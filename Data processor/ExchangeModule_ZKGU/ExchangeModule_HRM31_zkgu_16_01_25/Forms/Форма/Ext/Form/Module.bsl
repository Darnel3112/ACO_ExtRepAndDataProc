
////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СОБЫТИЙ ФОРМЫ
#Область ФункцииСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияПеременныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВыбораКодаВалюты();
	
	ВосстановитьСохраненныеЗначенияПеременных();
	
	ИнициализацияЗначенийРеквизитов();
	
	ОбновитьДоступностьЭлементовФормы();
	
	УстановитьВидимостьЭлементовСпособаИдентификации();
	
	МассПейментПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначенияПеременных();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
# Область ФункцииСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаПанельРеестровПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСостояниеКнопкиВыполнения(Элементы.ГруппаПанельРеестров.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыВыполнить(Команда)
	ЗапуститьОбработкуРеестра(Элементы.ГруппаПанельРеестров.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СохранитьЗначение_Организация(Объект.Организация);
	
	ВосстановитьСохраненныеЗначенияПеременныхПоОрганизации(Объект.Организация);
	
	Если ПустаяСтрока(Объект.СокращенноеНаименованиеОрганизации) Тогда
		ЗаполнитьСокращенноеНаименованиеОрганизации(Объект.Организация);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИНН) Тогда
		ЗаполнитьИННОрганизации(Объект.Организация);
	КонецЕсли;
	
	ЗаполнитьЗарплатныйПроект(Объект.Организация, Объект.Банк);
	
	СохранитьЗначение_ЗарплатныйПроект(Объект.Организация, Объект.ЗарплатныйПроект);
	
	ЗаполнитьНомераРеестров();
	
	СформироватьИменаФайловРеестров();
	
	УстановитьВидимостьЭлементовСпособаИдентификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СохранитьЗначение_ИНН(Объект.Организация, Объект.ИНН);
	
	СформироватьИменаФайловРеестров();
	
КонецПроцедуры

&НаКлиенте
Процедура УНКПриИзменении(Элемент)
	
	СохранитьЗначение_УНК(Объект.Организация, Объект.УНК);
	
	СформироватьИменаФайловРеестров();
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганизацииПриИзменении(Элемент)
	
	СохранитьЗначение_КодОрганизации(Объект.Организация, Объект.КодОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	СохранитьЗначение_Банк(Объект.Организация, Объект.Банк);
	
	ЗаполнитьЗарплатныйПроект(Объект.Организация, Объект.Банк);
	
	СохранитьЗначение_ЗарплатныйПроект(Объект.Организация, Объект.ЗарплатныйПроект);
	
	ВосстановитьЗначение_ИННБанка(Объект.Банк);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатныйПроектПриИзменении(Элемент)
	
	СохранитьЗначение_ЗарплатныйПроект(Объект.Организация, Объект.ЗарплатныйПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипБанковскихКартПриИзменении(Элемент)
	
	СохранитьЗначение_ТипБанковскихКарт(Объект.ТипБанковскихКарт);
	
	ЗаполнитьЗначениеРеквизитаТабличнойЧасти("РеестрНаВыпускБанковскихКарт", "ТипКарты", Объект.ТипБанковскихКарт);
	
	Если Объект.ТипБанковскихКарт = "MCMK_MUI" ИЛИ Объект.ТипБанковскихКарт = "VISAMK_VCIM" ИЛИ Объект.ТипБанковскихКарт = "MIRMK_MIRUI" Тогда
		Элемент.Подсказка = "Внимание! Неименную карту сотрудник может получить только в отделении Банка. Доставка на территорию компании не производится";
		Сообщить("Внимание! Неименную карту сотрудник может получить только в отделении Банка. Доставка на территорию компании не производится." +
		"Чем отличается неименная карта от именной:" +
		Символы.ПС + "1. Сотрудник может получить карту сразу после успешной обработки заявки на выпуск карты в любом отделении Банка." +
		Символы.ПС + "2. Сотрудник может отказаться от получения карты в отделении и активировать счет, если необходим только счет без карты.");
	Иначе
		Элемент.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВалютыПриИзменении(Элемент)
	
	СохранитьЗначение_КодВалюты(Объект.КодВалюты);
	
	ЗаполнитьЗначениеРеквизитаТабличнойЧасти("РеестрРаботниковДляОбъявления", "КодВалюты", Объект.КодВалюты);
	
	Если ЭтоРоссийскийРубль(Объект.КодВалюты) Тогда
		Объект.КурсВалюты = 1;
	Иначе
		Объект.КурсВалюты = ВосстановитьЗначение_КурсВалюты(Объект.КодВалюты);
	КонецЕсли;
	
	ОбновитьДоступностьКурсаВалюты(Объект.КодВалюты);
	
КонецПроцедуры

&НаКлиенте
Процедура СокращенноеНаименованиеОрганизацииПриИзменении(Элемент)
	
	СохранитьЗначение_СокращенноеНаименованиеОрганизации(Объект.Организация, Объект.СокращенноеНаименованиеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭмбоссируемоеНазваниеКомпанииПриИзменении(Элемент)
	
	СохранитьЗначение_ЭмбоссируемоеНазваниеКомпании(Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерФинансовогоИнститутаПриИзменении(Элемент)
	
	СохранитьЗначение_НомерФинансовогоИнститута(Объект.Организация, Объект.НомерФинансовогоИнститута);
	
	СформироватьИменаФайловРеестров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаДляВыгрузкиФайловПриИзменении(Элемент)
	
	СохранитьЗначение_ПапкаДляВыгрузкиФайлов(Объект.ПапкаДляВыгрузкиФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРеестраНаЗачислениеДенежныхСредствПриИзменении(Элемент)
	
	Объект.НомерРеестраНаЗачислениеДенежныхСредств = ПолучитьНомерРеестраНаЗачислениеДенежныхСредств();
	
	СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРеестраНаЗачислениеДенежныхСредствПриИзменении(Элемент)
	
	СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьНаВыплатуЗарплатыВБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("ЗарплатныйПроект", Объект.ЗарплатныйПроект);
	ПараметрыОткрытия.Вставить("СписокВедомостей", Объект.СписокВедомостей);
	ПараметрыОткрытия.Вставить("МассПеймент", Объект.МассПеймент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактированиеСпискаВедомостейЗавершение", ЭтотОбъект);
	
	СтруктураВозврата = ОткрытьФорму(ПолучитьПолноеИмяФормы("ФормаВыбораПлатежныхВедомостей"), ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаРеестраНаЗачислениеДенежныхСредствОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Объект.ПапкаДляВыгрузкиФайлов + "\" + Объект.ИмяФайлаРеестраНаЗачислениеДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяФайлаРеестраНаЗачислениеДенежныхСредств(Команда)
	
	СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрНаЗачислениеДенежныхСредствФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьДанныеСтрокиРеестраНаЗачислениеДенежныхСредств(Элементы.РеестрНаЗачислениеДенежныхСредств.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЗарплатныйПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяФайлаРеестраУволенныхСотрудников(Команда)
	
	СформироватьИмяФайлаРеестраУволенныхСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяФайлаРеестраНаВыпускБанковскихКарт(Команда)
	
	СформироватьИмяФайлаРеестраНаВыпускБанковскихКарт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяФайлаРеестраРаботниковДляОбъявления(Команда)
	
	СформироватьИмяФайлаРеестраРаботниковДляОбъявления();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКарт(Команда)
	
	ЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКарт(Объект.ИмяФайлаДляЗагрузкиДанныхБанковскихКарт, Объект.Организация, ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрНаЗачислениеДенежныхСредств(Команда)
	
	ЗаполнитьРеестрНаЗачислениеДенежныхСредств(Объект.Организация, Объект.ЗарплатныйПроект, Объект.СписокВедомостей, Объект.КодВалюты, Объект.КурсВалюты);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрУволенныхСотрудников(Команда)
	
	ЗаполнитьРеестрУволенныхСотрудников(Объект.Организация, Объект.ЗарплатныйПроект, Объект.ПериодУвольненияНачало, Объект.ПериодУвольненияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрНаВыпускБанковскихКарт(Команда)
	
	ЗаполнитьРеестрНаВыпускБанковскихКарт(Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании, Объект.Банк, Объект.ЗарплатныйПроект, Объект.ТипБанковскихКарт, Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДляЗагрузкиДанныхБанковскихКартОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Объект.ИмяФайлаДляЗагрузкиДанныхБанковскихКарт);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаРеестраУволенныхСотрудниковОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Объект.ПапкаДляВыгрузкиФайлов + "\" + Объект.ИмяФайлаРеестраУволенныхСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаРеестраНаВыпускБанковскихКартОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Объект.ПапкаДляВыгрузкиФайлов + "\" + Объект.ИмяФайлаРеестраНаВыпускБанковскихКарт);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаРеестраРаботниковДляОбъявленияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Объект.ПапкаДляВыгрузкиФайлов + "\" + Объект.ИмяФайлаРеестраРаботниковДляОбъявления);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрУволенныхСотрудниковФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьДанныеСтрокиРеестраУволенныхСотрудников(Элементы.РеестрУволенныхСотрудников.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЗарплатныйПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрНаВыпускБанковскихКартФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьДанныеСтрокиРеестраНаВыпускБанковскихКарт(Элементы.РеестрНаВыпускБанковскихКарт.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании, Объект.Банк, Объект.ТипБанковскихКарт, Объект.ДатаРеестраНаВыпускБанковскихКарт);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрРаботниковДляОбъявления(Команда)
	
	ЗаполнитьРеестрРаботниковДляОбъявления(Объект.Организация, Объект.ЗарплатныйПроект, Объект.ДатаРеестраРаботниковДляОбъявления);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрРаботниковДляОбъявленияФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьДанныеСтрокиРеестраРаботниковДляОбъявления(Элементы.РеестрРаботниковДляОбъявления.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЗарплатныйПроект, Объект.ДатаРеестраРаботниковДляОбъявления);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрДляЗагрузкиДанныхБанковскихКартФизическоеЛицоПриИзменении(Элемент)
	
	//Если Вопрос("Заполнить строку данными выбранного физического лица?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	ЗаполнитьДанныеСтрокиРеестраДанныхБанковскихКарт(Элементы.РеестрДляЗагрузкиДанныхБанковскихКарт.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЗарплатныйПроект, ТекущаяДата());
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	
	СохранитьЗначение_Бухгалтер(Объект.Организация, Объект.Бухгалтер);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	СохранитьЗначение_Руководитель(Объект.Организация, Объект.Руководитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННБанкаПриИзменении(Элемент)
	
	СохранитьЗначение_ИННБанка(Объект.Банк, Объект.ИННБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоПервойПодписиПриИзменении(Элемент)
	
	СохранитьЗначение_ЛицоПервойПодписи(Объект.Организация, Объект.ЛицоПервойПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьЛицаПервойПодписиПриИзменении(Элемент)
	
	СохранитьЗначение_ДолжностьЛицаПервойПодписи(Объект.Организация, Объект.ДолжностьЛицаПервойПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоВторойПодписиПриИзменении(Элемент)
	
	СохранитьЗначение_ЛицоВторойПодписи(Объект.Организация, Объект.ЛицоВторойПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьЛицаВторойПодписиПриИзменении(Элемент)
	
	СохранитьЗначение_ДолжностьЛицаВторойПодписи(Объект.Организация, Объект.ДолжностьЛицаВторойПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПечатьРеестраНаЗачислениеДенежныхСредств(Кнопка)
	
	ПолучитьПечатнуюФормуРеестраНаЗачислениеДенежныхСредств(Объект.мПрефикс + Объект.мСимволПодчеркивания + Кнопка.Имя).Показать("Реестр на зачисление денежных средств",,);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПечатьРеестраНаВыпускБанковскихКарт(Кнопка)
	
	ПолучитьПечатнуюФормуРеестраНаВыпускБанковскихКарт(Объект.мПрефикс + Объект.мСимволПодчеркивания + Кнопка.Имя).Показать("Реестр на выпуск банковских карт",,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУвольненияНачалоПриИзменении(Элемент)
	
	СохранитьЗначение_ПериодУвольненияНачало(Объект.Организация, Объект.ПериодУвольненияНачало);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУвольненияОкончаниеПриИзменении(Элемент)
	
	СохранитьЗначение_ПериодУвольненияОкончание(Объект.Организация, Объект.ПериодУвольненияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВалютыПриИзменении(Элемент)
	
	СохранитьЗначение_КурсВалюты(Объект.КодВалюты, Объект.КурсВалюты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	СохранитьЗначение_Подразделение(Объект.Организация, Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура КодСЗППриИзменении(Элемент)
	
	СохранитьЗначение_КодСЗП(Объект.Организация, Объект.КодСЗП);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСпособИдентификацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Объект.СпособИдентификации = Элементы.ГруппаСпособИдентификации.ТекущаяСтраница.Имя;
	
	СохранитьЗначение_СпособИдентификации(Объект.Организация, Объект.СпособИдентификации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовСпособаИдентификации()
	
	Попытка
		Элементы.ГруппаСпособИдентификации.ТекущаяСтраница = Элементы[Объект.СпособИдентификации];
	Исключение
		Элементы.ГруппаСпособИдентификации.ТекущаяСтраница = Элементы["Вариант1"];
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура МассПейментПриИзмененииНаСервере()
	Если Объект.МассПеймент Тогда
		Элементы.СтраницаЗагрузкиЛицевыхСчетовДляМассПеймент.Видимость	= Истина;
		Элементы.РеестрНаЗачислениеДенежныхСредствБИК.Видимость 		= Истина;
	Иначе
		Элементы.СтраницаЗагрузкиЛицевыхСчетовДляМассПеймент.Видимость 	= Ложь;
		Элементы.РеестрНаЗачислениеДенежныхСредствБИК.Видимость 		= Ложь;
		Объект.СписокВедомостей.Очистить();
		Объект.ВедомостьНаВыплатуЗарплатыВБанк = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассПейментПриИзменении(Элемент)
	СохранитьЗначениеПеременнойПоИдентификатору("МассПеймент", Объект.МассПеймент);
	МассПейментПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДляЗагрузкиРасчетныхСчетовДляМассПейментНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.ПолноеИмяФайла				= Объект.ИмяФайлаДляЗагрузкиРасчетныхСчетовДляМассПеймент;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	ДиалогВыбораФайла.Фильтр						= "Файл excel(*.xls,*.xlsx)|*.xls*";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.ИмяФайлаДляЗагрузкиРасчетныхСчетовДляМассПеймент = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМЫ
#Область ФункцииФормы

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ОбновитьДоступностьКурсаВалюты(Объект.КодВалюты);
	
	ОбновитьСостояниеКнопкиВыполнения(Элементы.ГруппаПанельРеестров.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКнопкиВыполнения(парамИмяТекущейСтраницы)
	
	Если парамИмяТекущейСтраницы = "СтраницаРеестрНаЗачислениеДенежныхСредств"
		Или парамИмяТекущейСтраницы = "СтраницаРеестрУволенныхСотрудников"
		Или парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускБанковскихКарт"
		Или парамИмяТекущейСтраницы = "СтраницаРеестрРаботниковДляОбъявления"
		Или парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКП" 
		Или парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКМ" 		Тогда
		
		Элементы.ФормаОсновныеДействияФормыВыполнить.Заголовок = "Выгрузить";
		Элементы.ФормаОсновныеДействияФормыВыполнить.Доступность = Истина;
		
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрДляЗагрузкиДанныхБанковскихКарт" Тогда
		
		Элементы.ФормаОсновныеДействияФормыВыполнить.Заголовок = "Загрузить";
		Элементы.ФормаОсновныеДействияФормыВыполнить.Доступность = Истина;
		
	Иначе
		Элементы.ФормаОсновныеДействияФормыВыполнить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьКурсаВалюты(парамКодВалюты)
	
	Элементы.КурсВалюты.Доступность = Не ЭтоРоссийскийРубль(парамКодВалюты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуРеестра(парамИмяТекущейСтраницы)
	
	Отказ = Ложь;
	
	МассивОшибок = ПроверитьПравильностьЗаполненияДанных(парамИмяТекущейСтраницы, Отказ);
	
	Если Не Отказ Тогда
		
		Если парамИмяТекущейСтраницы = "СтраницаРеестрНаЗачислениеДенежныхСредств" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраНаЗачислениеДенежныхСредств(Объект.мСписокКодовВалют.НайтиПоЗначению(Объект.КодВалюты).Представление, МассивОшибок);
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраНаЗачислениеДенежныхСредств);
			СохранитьЗначение_НомерРеестраНаЗачислениеДенежныхСредств(Объект.Организация, Объект.НомерРеестраНаЗачислениеДенежныхСредств, Объект.ДатаРеестраНаЗачислениеДенежныхСредств);
			Объект.НомерРеестраНаЗачислениеДенежныхСредств = Объект.НомерРеестраНаЗачислениеДенежныхСредств + 1;
			СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств();
			
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрУволенныхСотрудников" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраУволенныхСотрудников();
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраУволенныхСотрудников);
			СохранитьЗначение_НомерРеестраУволенныхСотрудников(Объект.Организация, Объект.НомерРеестраУволенныхСотрудников, Объект.ДатаРеестраУволенныхСотрудников);
			Объект.НомерРеестраУволенныхСотрудников = Объект.НомерРеестраУволенныхСотрудников + 1;
			СформироватьИмяФайлаРеестраУволенныхСотрудников();
			
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускБанковскихКарт" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраНаВыпускБанковскихКарт();
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраНаВыпускБанковскихКарт);
			СохранитьЗначение_НомерРеестраНаВыпускБанковскихКарт(Объект.Организация, Объект.НомерРеестраНаВыпускБанковскихКарт, Объект.ДатаРеестраНаВыпускБанковскихКарт);
			Объект.НомерРеестраНаВыпускБанковскихКарт = Объект.НомерРеестраНаВыпускБанковскихКарт + 1;
			СформироватьИмяФайлаРеестраНаВыпускБанковскихКарт();
			
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрРаботниковДляОбъявления" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраРаботниковДляОбъявления();
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраРаботниковДляОбъявления);
			СохранитьЗначение_НомерРеестраРаботниковДляОбъявления(Объект.Организация, Объект.НомерРеестраРаботниковДляОбъявления, Объект.ДатаРеестраРаботниковДляОбъявления);
			Объект.НомерРеестраРаботниковДляОбъявления = Объект.НомерРеестраРаботниковДляОбъявления + 1;
			СформироватьИмяФайлаРеестраРаботниковДляОбъявления();
			
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрДляЗагрузкиДанныхБанковскихКарт" Тогда
			ЗагрузитьФайлРеестраДляЗагрузкиДанныхБанковскихКарт(Объект.Организация, Объект.Банк, Объект.ЗарплатныйПроект);
			//aliega 17.01.2019--------------------------------------------------------------------
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКП" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраНаВыпускСКП();
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраНаВыпускСКП);
			СохранитьЗначение_НомерРеестраНаВыпускСКП(Объект.Организация, Объект.НомерРеестраНаВыпускСКП, Объект.ДатаРеестраСКП);
			Объект.НомерРеестраНаВыпускСКП = Объект.НомерРеестраНаВыпускСКП	+	1;
			СформироватьИмяФайлаРеестраНаВыпускСКП();
		ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКМ" Тогда
			ПодготовленныеДанныеФайлаРеестра = СформироватьФайлРеестраНаВыпускСКМ();
			ЗаписатьФайлРеестра(ПодготовленныеДанныеФайлаРеестра, Объект.ИмяФайлаРеестраНаВыпускСКМ);
			СохранитьЗначение_НомерРеестраНаВыпускСКМ(Объект.Организация, Объект.НомерРеестраНаВыпускСКМ, Объект.ДатаРеестраСКМ);
			Объект.НомерРеестраНаВыпускСКМ = Объект.НомерРеестраНаВыпускСКМ	+	1;
			СформироватьИмяФайлаРеестраНаВыпускСКМ();
			//aliega 17.01.2019--------------------------------------------------------------------
		КонецЕсли;
		
		Сообщить("Данные реестра выгружены успешно!");
		
	Иначе
		Сообщить("Найдены ошибки. Для обработки реестра их необходимо исправить и повторить попытку.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РЕЕСТРА НА ЗАЧИСЛЕНИЕ ДЕНЕЖНЫХ СРЕДСТВ
#Область ФункцииРеестраНаЗачислениеДенежныхСредств

&НаСервере
Функция ПолучитьНомерРеестраНаЗачислениеДенежныхСредств()
	
	Возврат ПолучитьСледующийНомер("НомерРеестраНаЗачислениеДенежныхСредств", Объект.Организация, Объект.ДатаРеестраНаЗачислениеДенежныхСредств);
	
КонецФункции

&НаСервере
Процедура СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств()
	
	Объект.ИмяФайлаРеестраНаЗачислениеДенежныхСредств = ПолучитьИмяФайлаРеестраНаЗачислениеДенежныхСредств(Объект.ИНН, Объект.НомерФинансовогоИнститута, Объект.УНК, Объект.ДатаРеестраНаЗачислениеДенежныхСредств, Объект.НомерРеестраНаЗачислениеДенежныхСредств, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ВидЗачисления);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаРеестраНаЗачислениеДенежныхСредств(парамИНН, парамНомерФинансовогоИнститута, парамУНК, парамДатаРеестра, парамНомерРеестра, парамКодСЗП, парамСпособИдентификации, парамВидЗачисления)
	
	СтрокаВидаЗачисления = "";
	Если парамВидЗачисления = "ЧастичноеЗачисление" Тогда
		СтрокаВидаЗачисления = Объект.мСимволПодчеркивания + "01";
	КонецЕсли;
	Если парамСпособИдентификации = "Вариант2" Тогда
		
		Возврат
		"Z" +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамКодСЗП), 10, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		СтрокаВидаЗачисления + 
		".txt";
		
	Иначе
		
		Возврат
		ПривестиИНН(парамИНН) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамНомерФинансовогоИнститута), 5, "0") +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамУНК), 8, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты1) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 3, "0") +
		СтрокаВидаЗачисления +
		".txt";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьФайлРеестраНаЗачислениеДенежныхСредств(парамВалюта, МассивОшибок)
	
	ЗаголовокРеестра = СформироватьЗаголовокРеестраНаЗачислениеДенежныхСредств(Объект.ДатаРеестраНаЗачислениеДенежныхСредств, Объект.НомерРеестраНаЗачислениеДенежныхСредств, Объект.СокращенноеНаименованиеОрганизации);
	
	СтрокиРеестра = СформироватьСтрокиРеестраНаЗачислениеДенежныхСредств(Объект.РеестрНаЗачислениеДенежныхСредств, МассивОшибок);
	
	КонтрольнаяСтрокаРеестра = СформироватьКонтрольнуюСтрокуРеестраНаЗачислениеДенежныхСредств(Объект.РеестрНаЗачислениеДенежныхСредств.Количество(), Объект.РеестрНаЗачислениеДенежныхСредств.Итог("Сумма"), парамВалюта);
	
	Возврат ЗаголовокРеестра + СтрокиРеестра + КонтрольнаяСтрокаРеестра;
	
КонецФункции

&НаСервере
Функция СформироватьЗаголовокРеестраНаЗачислениеДенежныхСредств(парамДата, парамНомер, парамНаименованиеОрганизации)
	
	Возврат
	"START" +
	Объект.мСимволРазделитель +
	Формат(парамДата, Объект.мФорматДаты1) +
	Объект.мСимволРазделитель +
	ДополнитьСтроку(Формат(парамНомер, Объект.мФорматЦелогоЧислаБезПробелов), 3, "0") +
	Объект.мСимволРазделитель +
	"CREDIT" +
	Объект.мСимволРазделитель +
	СокрЛП(парамНаименованиеОрганизации) +
	Объект.мСимволНоваяСтрока;
	
КонецФункции

&НаСервере
Функция СформироватьСтрокиРеестраНаЗачислениеДенежныхСредств(парамТаблица, МассивОшибок)
	
	Результат = "";
	Если Объект.МассПеймент Тогда
		Для Каждого ТекСтрока Из парамТаблица Цикл
			Результат = Результат +
			ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) +
			Объект.мСимволРазделитель +
			Формат(ТекСтрока.Сумма, Объект.мФорматСуммыБезПробелов) +
			Объект.мСимволРазделитель +
			СокрЛП(ТекСтрока.ФИО) +
			Объект.мСимволРазделитель +
			ТекСтрока.СНИЛС + 
			Объект.мСимволРазделитель +
			ТекСтрока.ВидДохода+
			Объект.мСимволРазделитель +
			Формат(ТекСтрока.СуммаУдержания, Объект.мФорматСуммыБезПробелов) +
			Объект.мСимволРазделитель +
			ТекСтрока.КодСМС +
			Объект.мСимволРазделитель +
			ТекСтрока.БИК +
			Объект.мСимволНоваяСтрока;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из парамТаблица Цикл
			Результат = Результат +
			ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) +
			Объект.мСимволРазделитель +
			Формат(ТекСтрока.Сумма, Объект.мФорматСуммыБезПробелов) +
			Объект.мСимволРазделитель +
			СокрЛП(ТекСтрока.ФИО) +
			Объект.мСимволРазделитель +
			ТекСтрока.СНИЛС + 
			Объект.мСимволРазделитель +
			ТекСтрока.ВидДохода+
			Объект.мСимволРазделитель +
			Формат(ТекСтрока.СуммаУдержания, Объект.мФорматСуммыБезПробелов) +
			Объект.мСимволРазделитель +
			ТекСтрока.КодСМС +
			Объект.мСимволНоваяСтрока;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ИзменитьФорматСуммы(Сумма)
	
	Если (Сумма = 0) Тогда
		Возврат ""
	Иначе
		Строка = СтрЗаменить(Сумма, Символы.НПП, "");
		Возврат Строка;
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция СформироватьКонтрольнуюСтрокуРеестраНаЗачислениеДенежныхСредств(парамКоличествоСтрок, парамСумма, парамВалюта)
	
	Возврат
	"END" +
	Объект.мСимволРазделитель +
	Формат(парамКоличествоСтрок, Объект.мФорматЦелогоЧислаБезПробелов) +
	Объект.мСимволРазделитель +
	Формат(парамСумма, Объект.мФорматСуммыБезПробелов) +
	Объект.мСимволРазделитель +
	СокрЛП(парамВалюта) +
	Объект.мСимволНоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПравильностьЗаполненияРеестраНаЗачислениеДенежныхСредств(Отказ, парамВидЗачисления)
	
	МассивОшибок = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраНаЗачислениеДенежныхСредств) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраНаЗачислениеДенежныхСредств) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраНаЗачислениеДенежныхСредств) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
		
		Если ТекСтрока.НомерЛицевогоСчета <> ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " неверно заполнен номер лицевого счета (карты).", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере лицевого счета (карты) присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.Сумма = 0 Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не заполнена сумма.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ИзВедомостиНаСчета И ПроверитьНомерСчета(ТекСтрока.НомерЛицевогоСчета, ТекСтрока.БИК) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " некорректный номер счета или БИК");
			Отказ = Истина
		КонецЕсли;
		
		Если (ТекСтрока.КодСМС = "97" ИЛИ ТекСтрока.КодСМС = "901") И ТекСтрока.ВидДохода <> "2" И ЗначениеЗаполнено(ТекСтрока.ВидДохода) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " некорректное сочетание кода смс и вида дохода. Для кода смс "+ТекСтрока.КодСМС+" необходим вид дохода: 2");
			Отказ = Истина
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОшибок
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеестрНаЗачислениеДенежныхСредств(парамОрганизация, парамЗарплатныйПроект, Знач парамСписокВедомостей, парамКодВалюты, парамКурсВалюты)
	
	ДанныеДляЗачисления = Новый ТаблицаЗначений;
	ДанныеДляЗачисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеДляЗачисления.Колонки.Добавить("НомерЛицевогоСчета", Новый ОписаниеТипов("Строка"));
	ДанныеДляЗачисления.Колонки.Добавить("СуммаПоВедомости", Новый ОписаниеТипов("Число"));
	ДанныеДляЗачисления.Колонки.Добавить("СуммаУдержания", Новый ОписаниеТипов("Число"));
	ДанныеДляЗачисления.Колонки.Добавить("ВидДохода", Новый ОписаниеТипов("Строка"));
	ДанныеДляЗачисления.Колонки.Добавить("БИК", Новый ОписаниеТипов("Строка"));
	ДанныеДляЗачисления.Колонки.Добавить("ИзВедомостиНаСчета", Новый ОписаниеТипов("Булево"));
	
	Для Каждого парамВедомостьНаВыплатуЗарплатыВБанк Из парамСписокВедомостей.Выгрузить() Цикл
		Для Каждого ТекСтрока Из парамВедомостьНаВыплатуЗарплатыВБанк.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата Цикл
			НоваяСтрока = ДанныеДляЗачисления.Добавить();
			
			НоваяСтрока.ФизическоеЛицо		= ТекСтрока.Сотрудник.ФизическоеЛицо;
			Если ТипЗнч(парамВедомостьНаВыплатуЗарплатыВБанк.ВедомостьНаВыплатуЗарплатыВБанк) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением") Тогда 
				НоваяСтрока.НомерЛицевогоСчета = УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.БанковскийСчет.НомерСчета); 
				НоваяСтрока.БИК = УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.БанковскийСчет.Банк.Код);
				НоваяСтрока.ИзВедомостиНаСчета = Истина;
			Иначе
				НоваяСтрока.НомерЛицевогоСчета	= УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.НомерЛицевогоСчета);
				НоваяСтрока.ИзВедомостиНаСчета = Ложь;
			КонецЕсли;
			НоваяСтрока.СуммаПоВедомости	= ТекСтрока.КВыплате + ТекСтрока.КомпенсацияЗаЗадержкуЗарплаты;
			НоваяСтрока.СуммаУдержания		= парамВедомостьНаВыплатуЗарплатыВБанк.ВедомостьНаВыплатуЗарплатыВБанк.Состав.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекСтрока.Сотрудник.ФизическоеЛицо))[0].ВзысканнаяСумма;
			НоваяСтрока.ВидДохода 			= парамВедомостьНаВыплатуЗарплатыВБанк.ВедомостьНаВыплатуЗарплатыВБанк.ВидДоходаИсполнительногоПроизводства;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляЗачисления.Свернуть("ФизическоеЛицо, НомерЛицевогоСчета, СуммаУдержания, ВидДохода, БИК, ИзВедомостиНаСчета", "СуммаПоВедомости");
	ДанныеДляЗачисления.Сортировать("ФизическоеЛицо");
	
	
	Объект.РеестрНаЗачислениеДенежныхСредств.Очистить();
	
	Для Каждого ТекСтрока Из ДанныеДляЗачисления Цикл
		
		НоваяСтрока = Объект.РеестрНаЗачислениеДенежныхСредств.Добавить();
		
		НоваяСтрока.ФизическоеЛицо		= ТекСтрока.ФизическоеЛицо;
		НоваяСтрока.НомерЛицевогоСчета	= ТекСтрока.НомерЛицевогоСчета;
		НоваяСтрока.СуммаПоВедомости	= ТекСтрока.СуммаПоВедомости;
		НоваяСтрока.Сумма				= СконвертироватьСумму(ТекСтрока.СуммаПоВедомости, парамКодВалюты, парамКурсВалюты);
		НоваяСтрока.СНИЛС				= ПолучитьСНИЛСФизЛица(ТекСтрока.ФизическоеЛицо);
		НоваяСтрока.СуммаУдержания 		= ТекСтрока.СуммаУдержания;
		НоваяСтрока.ВидДохода			= ПолучитьВидДохода(ТекСтрока.ВидДохода);
		НоваяСтрока.БИК 				= ТекСтрока.БИК;
		НоваяСтрока.ИзВедомостиНаСчета	= ТекСтрока.ИзВедомостиНаСчета;
		
		ЗаполнитьДанныеСтрокиРеестраНаЗачислениеДенежныхСредств(НоваяСтрока, парамОрганизация, парамЗарплатныйПроект);
		Если ЗначениеЗаполнено(Объект.ВидДохода) Тогда
			НоваяСтрока.ВидДохода = Объект.ВидДохода;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодСМС) Тогда
			НоваяСтрока.КодСМС = Объект.КодСМС;   
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВидДохода(парамСуммаВзыскания) 
	
	Если ЗначениеЗаполнено(парамСуммаВзыскания) Тогда
		Если парамСуммаВзыскания = "Заработная плата и иные доходы с ограничением взыскания" Тогда
			Возврат "1";
		ИначеЕсли парамСуммаВзыскания = "Доходы, на которые не может быть обращено взыскание (без оговорок)" Тогда
			Возврат "2";  
		ИначеЕсли парамСуммаВзыскания = "Периодические доходы, на которые не может быть обращено взыскание (без оговорок)" Тогда
			Возврат "2";
		ИначеЕсли парамСуммаВзыскания = "Периодические доходы, на которые не может быть обращено взыскание (с оговорками)" Тогда
			Возврат "3";
		ИначеЕсли парамСуммаВзыскания = "Доходы, на которые не может быть обращено взыскание (с оговорками)" Тогда
			Возврат "3";
		ИначеЕсли парамСуммаВзыскания = "Единовременные доходы, на которые не может быть обращено взыскание (без оговорок)" Тогда
			Возврат "4";
		ИначеЕсли парамСуммаВзыскания = "Единовременные доходы, на которые не может быть обращено взыскание (с оговорками)" Тогда
			Возврат "5";
		Иначе 
			Возврат "";
		КонецЕсли;
	КонецЕсли;			
КонецФункции


&НаСервере
Процедура ЗаполнитьДанныеСтрокиРеестраНаЗачислениеДенежныхСредств(Знач парамСтрока, парамОрганизация, парамЗарплатныйПроект)
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрНаЗачислениеДенежныхСредств[парамСтрока - 1];
	КонецЕсли;
	
	парамСтрока.ФИО = ПолучитьФамилиюИмяОтчествоФизическогоЛица(парамСтрока.ФизическоеЛицо);
	
	Если ПустаяСтрока(парамСтрока.НомерЛицевогоСчета) Тогда
		парамСтрока.НомерЛицевогоСчета = ПолучитьНомерЛицевогоСчетаФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСНИЛСФизЛица(ФизическоеЛицо)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ФизическиеЛица.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СтраховойНомерПФР;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции

&НаСервере
Функция ПолучитьПечатнуюФормуРеестраНаЗачислениеДенежныхСредств(парамИмяПараметровПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = парамИмяПараметровПечати;
	
	Макет = ПолучитьМакетНаСервере("МакетРеестрНаЗачислениеДенежныхСредств");
	
	ОбластьМакетаВерх			= Макет.ПолучитьОбласть("ОбластьВерх");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьМакетаСтрока			= Макет.ПолучитьОбласть("ОбластьСтрока");
	ОбластьМакетаПодвалЛиста	= Макет.ПолучитьОбласть("ОбластьПодвалЛиста");
	ОбластьМакетаПодвалРеестра	= Макет.ПолучитьОбласть("ОбластьПодвалРеестра");
	ОбластьМакетаНиз			= Макет.ПолучитьОбласть("ОбластьНиз");
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвалЛиста);
	
	ОбластьМакетаВерх.Параметры.ДатаДоговора	= Формат(Объект.ЗарплатныйПроект.ДатаДоговора, Объект.мФорматДаты5);
	ОбластьМакетаВерх.Параметры.НомерДоговора	= СокрЛП(Объект.ЗарплатныйПроект.НомерДоговора);
	ОбластьМакетаВерх.Параметры.НомерРеестра	= Формат(Объект.НомерРеестраНаЗачислениеДенежныхСредств, Объект.мФорматЦелогоЧислаБезПробелов);
	
	ОбластьМакетаВерх.Параметры.НаименованиеОрганизации	= Объект.СокращенноеНаименованиеОрганизации;
	ОбластьМакетаВерх.Параметры.Банк					= Строка(Объект.Банк);
	ОбластьМакетаВерх.Параметры.ИННБанка				= Объект.ИННБанка;
	ОбластьМакетаВерх.Параметры.БИК						= Объект.ЗарплатныйПроект.Банк.Код;
	ОбластьМакетаВерх.Параметры.КоррСчет				= "";//Объект.ЗарплатныйПроект.Банк.КоррСчет;
	ОбластьМакетаВерх.Параметры.БанкКоррСчета			= Объект.ЗарплатныйПроект.Банк.Наименование;
	ОбластьМакетаВерх.Параметры.РасчетныйСчет			= Объект.ЗарплатныйПроект.РасчетныйСчет;
	ОбластьМакетаВерх.Параметры.ИННПредприятия			= Объект.ИНН;
	
	ТабДокумент.Вывести(ОбластьМакетаВерх);
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВсегоСтрокДокумента = Объект.РеестрНаЗачислениеДенежныхСредств.Количество();
	ВыведеноСтрок = 0;
	ИтогоПоЛисту = 0;
	Для Каждого ТекСтрока Из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
		
		ОбластьМакетаСтрока.Параметры.НомерСтроки			= Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов);
		ОбластьМакетаСтрока.Параметры.НомерЛицевогоСчета	= ТекСтрока.НомерЛицевогоСчета;
		ОбластьМакетаСтрока.Параметры.СуммаДляЗачисления	= Формат(ТекСтрока.Сумма, Объект.мФорматСуммыСПробелами);
		ОбластьМакетаСтрока.Параметры.ФИОСотрудника			= ТекСтрока.ФИО;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвалРеестра);
			ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаПодвалЛиста.Параметры.ИтогоПоЛисту = Формат(ИтогоПоЛисту, Объект.мФорматСуммыСПробелами);
			ТабДокумент.Вывести(ОбластьМакетаПодвалЛиста);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ИтогоПоЛисту = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		ИтогоПоЛисту = ИтогоПоЛисту + ТекСтрока.Сумма;
		
	КонецЦикла;
	
	ОбластьМакетаПодвалЛиста.Параметры.ИтогоПоЛисту = Формат(ИтогоПоЛисту, Объект.мФорматСуммыСПробелами);
	ОбластьМакетаПодвалРеестра.Параметры.ИтогоПоРеестру = Формат(Объект.РеестрНаЗачислениеДенежныхСредств.Итог("Сумма"), Объект.мФорматСуммыСПробелами);
	
	ТабДокумент.Вывести(ОбластьМакетаПодвалЛиста);
	ТабДокумент.Вывести(ОбластьМакетаПодвалРеестра);
	
	ОбластьМакетаНиз.Параметры.ЛицоПервойПодписи = Строка(Объект.ДолжностьЛицаПервойПодписи) + " " + ПолучитьФамилиюИОФизическогоЛица(Объект.ЛицоПервойПодписи);
	ОбластьМакетаНиз.Параметры.ЛицоВторойПодписи = Строка(Объект.ДолжностьЛицаВторойПодписи) + " " + ПолучитьФамилиюИОФизическогоЛица(Объект.ЛицоВторойПодписи);
	
	ТабДокумент.Вывести(ОбластьМакетаНиз);
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыСУчетомКурса(Команда)
	
	Для Каждого ТекСтрока Из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
		ТекСтрока.Сумма = СконвертироватьСумму(ТекСтрока.СуммаПоВедомости, Объект.КодВалюты, Объект.КурсВалюты)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РЕЕСТРА УВОЛЕННЫХ СОТРУДНИКОВ
#Область ФункцииРеестраУволенныхСотрудников

&НаСервере
Функция ПолучитьНомерРеестраУволенныхСотрудников()
	
	Возврат ПолучитьСледующийНомер("НомерРеестраУволенныхСотрудников", Объект.Организация, Объект.ДатаРеестраУволенныхСотрудников);
	
КонецФункции

&НаСервере
Процедура СформироватьИмяФайлаРеестраУволенныхСотрудников()
	
	Объект.ИмяФайлаРеестраУволенныхСотрудников = ПолучитьИмяФайлаРеестраУволенныхСотрудников(Объект.ИНН, Объект.ДатаРеестраУволенныхСотрудников, Объект.НомерРеестраУволенныхСотрудников, Объект.КодСЗП, Объект.СпособИдентификации);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаРеестраУволенныхСотрудников(парамИНН, парамДатаРеестра, парамНомерРеестра, парамКодСЗП, парамСпособИдентификации)
	
	Если парамСпособИдентификации = "Вариант2" Тогда
		
		Возврат
		"D" +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамКодСЗП), 10, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		".txt";
		
	Иначе
		
		Возврат
		"S2R" +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамИНН), 12, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		".txt";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьФайлРеестраУволенныхСотрудников()
	
	ЗаголовокРеестра = СформироватьЗаголовокРеестраУволенныхСотрудников(Объект.ДатаРеестраУволенныхСотрудников, Объект.СокращенноеНаименованиеОрганизации, Объект.ИНН, Объект.КодОрганизации);
	
	СтрокиРеестра = СформироватьСтрокиРеестраУволенныхСотрудников(Объект.РеестрУволенныхСотрудников);
	
	КонтрольнаяСтрокаРеестра = СформироватьКонтрольнуюСтрокуРеестраУволенныхСотрудников(Объект.РеестрУволенныхСотрудников.Количество());
	
	Возврат ЗаголовокРеестра + СтрокиРеестра + КонтрольнаяСтрокаРеестра;
	
КонецФункции

&НаСервере
Функция СформироватьЗаголовокРеестраУволенныхСотрудников(парамДата, парамНаименованиеОрганизации, парамИНН, парамКодОрганизации)
	
	Возврат
	СокрЛП(парамНаименованиеОрганизации) +
	Объект.мСимволРазделитель +
	ДополнитьСтроку(СокрЛП(парамИНН), 12, "0") +
	Объект.мСимволРазделитель +
	СокрЛП(парамКодОрганизации) +
	Объект.мСимволРазделитель +
	Формат(парамДата, Объект.мФорматДаты2) +
	Объект.мСимволНоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеестрНаВыпускСКМ(парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамЗарплатныйПроект, парамТипБанковскихКарт, парамПериод, парамПодразделение) Экспорт
	
	Объект.РеестрСКМ.Очистить();
	
	СписокФизическихЛиц	=	ПолучитьСписокРаботающихРаботников(парамОрганизация, парамПериод, парамПодразделение);
	
	Для Каждого ТекЗначение Из СписокФизическихЛиц Цикл
		Если ПустаяСтрока(ПолучитьНомерЛицевогоСчетаФизическогоЛица(ТекЗначение.Значение, парамОрганизация, парамЗарплатныйПроект)) Тогда
			НоваяСтрока					=	Объект.РеестрСКМ.Добавить();
			НоваяСтрока.ФизическоеЛицо	=	ТекЗначение.Значение;
			ЗаполнитьДанныеСтрокиРеестраНаВыпускСКМ(НоваяСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначениеРеквизитаТабличнойЧасти("РеестрНаВыпускБанковскихКарт", "ТипКарты", парамТипБанковскихКарт);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтрокиРеестраУволенныхСотрудников(парамТаблица)
	
	Результат = "";
	
	Для Каждого ТекСтрока Из парамТаблица Цикл
		
		Результат = Результат +
		СокрЛП(ТекСтрока.ФИО) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаРождения, Объект.мФорматДаты5) +
		Объект.мСимволРазделитель +
		ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) +
		Объект.мСимволНоваяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьКонтрольнуюСтрокуРеестраУволенныхСотрудников(парамКоличествоСтрок)
	
	Возврат
	Формат(парамКоличествоСтрок, Объект.мФорматЦелогоЧислаБезПробелов) +
	Объект.мСимволНоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ПроверитьПравильностьЗаполненияРеестраУволенныхСотрудников(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраУволенныхСотрудников) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраУволенныхСотрудников) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраУволенныхСотрудников) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрУволенныхСотрудников Цикл
		
		Если ПустаяСтрока(ТекСтрока.ФИО) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано ФИО работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ФИО) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в ФИО работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.НомерЛицевогоСчета <> ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " неверно заполнен номер лицевого счета (карты).", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере лицевого счета (карты) присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеестрУволенныхСотрудников(парамОрганизация, парамЗарплатныйПроект, парамПериодНачало, парамПериодОкончание) Экспорт
	
	Объект.РеестрУволенныхСотрудников.Очистить();
	
	СписокФизическихЛиц = ПолучитьСписокУволенныхРаботников(парамОрганизация, парамПериодНачало, парамПериодОкончание);
	
	Для Каждого ТекЗначение Из СписокФизическихЛиц Цикл
		
		Если Не ПустаяСтрока(ПолучитьНомерЛицевогоСчетаФизическогоЛица(ТекЗначение.Значение, парамОрганизация, парамЗарплатныйПроект)) Тогда
			
			НоваяСтрока = Объект.РеестрУволенныхСотрудников.Добавить();
			
			НоваяСтрока.ФизическоеЛицо = ТекЗначение.Значение;
			
			ЗаполнитьДанныеСтрокиРеестраУволенныхСотрудников(НоваяСтрока, парамОрганизация, парамЗарплатныйПроект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиРеестраУволенныхСотрудников(Знач парамСтрока, парамОрганизация, парамЗарплатныйПроект) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрУволенныхСотрудников[парамСтрока - 1];
	КонецЕсли;
	
	парамСтрока.ФИО = ПолучитьФамилиюИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.ДатаРождения = парамСтрока.ФизическоеЛицо.ДатаРождения;
	парамСтрока.НомерЛицевогоСчета = ПолучитьНомерЛицевогоСчетаФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РЕЕСТРА НА ВЫПУСК БАНКОВСКИХ КАРТ
#Область ФункцииРеестраНаВыпускБанковскихКарт

&НаКлиенте
Процедура РеестрНаВыпускБанковскихКартПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "РеестрНаВыпускБанковскихКартДокументКод" Или Элемент.ТекущийЭлемент.Имя = "РеестрНаВыпускБанковскихКартВторойДокументКод" Тогда
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		ЗаполнитьОрганВыдачиДокумента(ТекущаяСтрока.ВторойДокументКод, ТекущаяСтрока.ВторойДокументКемВыдан);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерРеестраНаВыпускБанковскихКарт()
	
	Возврат ПолучитьСледующийНомер("НомерРеестраНаВыпускБанковскихКарт", Объект.Организация, Объект.ДатаРеестраНаВыпускБанковскихКарт);
	
КонецФункции

&НаСервере
Функция ПолучитьНомерРеестраНаВыпускСКП()
	
	Возврат	ПолучитьСледующийНомер("НомерРеестраНаВыпускСКП", Объект.Организация, Объект.ДатаРеестраСКП); 
	
КонецФункции

&НаСервере
Функция ПолучитьНомерРеестраНаВыпускСКМ()
	
	Возврат	ПолучитьСледующийНомер("НомерРеестраНаВыпускСКМ", Объект.Организация, Объект.ДатаРеестраСКМ); 
	
КонецФункции

&НаСервере
Процедура СформироватьИмяФайлаРеестраНаВыпускБанковскихКарт()
	
	Объект.ИмяФайлаРеестраНаВыпускБанковскихКарт = ПолучитьИмяФайлаРеестраНаВыпускБанковскихКарт(Объект.КодОрганизации, Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.НомерРеестраНаВыпускБанковскихКарт, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ДополнительныеУсловия);
	
КонецПроцедуры

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Процедура СформироватьИмяФайлаРеестраНаВыпускСКП()
	
	Объект.ИмяФайлаРеестраНаВыпускСКП = ПолучитьИмяФайлаРеестраНаВыпускСКП(Объект.КодОрганизации, Объект.ДатаРеестраСКП, Объект.НомерРеестраНаВыпускСКП, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ДополнительныеУсловия);
	
КонецПроцедуры
//aliega 17.01.2019--------------------------------------------------------------------

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Процедура СформироватьИмяФайлаРеестраНаСКП()
	
	Объект.ИмяФайлаРеестраНаВыпускСКП	=	ПолучитьИмяФайлаРеестраНаВыпускСКП(Объект.КодОрганизации, Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.НомерРеестраНаВыпускБанковскихКарт, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ДополнительныеУсловия);	
	
КонецПроцедуры
//aliega 17.01.2019--------------------------------------------------------------------

&НаСервере
Процедура СформироватьИмяФайлаРеестраНаСКМ()
	
	Объект.ИмяФайлаРеестраНаВыпускСКМ	=	ПолучитьИмяФайлаРеестраНаВыпускСКМ(Объект.КодОрганизации, Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.НомерРеестраНаВыпускБанковскихКарт, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ДополнительныеУсловия);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаРеестраНаВыпускБанковскихКарт(парамКодОрганизации, парамДатаРеестра, парамНомерРеестра, парамКодСЗП, парамСпособИдентификации, парамДопУсловия)
	
	СтрокаВозврата = "CI";
	
	Если парамДопУсловия Тогда
		СтрокаВозврата = "CJ";
	КонецЕсли;
	
	Если парамСпособИдентификации = "Вариант2" Тогда
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамКодСЗП), 10, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		".txt";
		
	Иначе
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		СокрЛП(парамКодОрганизации) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты3) +
		".txt";
		
	КонецЕсли;
	
КонецФункции

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Функция ПолучитьИмяФайлаРеестраНаВыпускСКП(парамКодОрганизации, парамДатаРеестра, парамНомерРеестра, парамКодСЗП, парамСпособИдентификации, парамДопУсловия)
	
	СтрокаВозврата = "CIE";
	
	Если парамДопУсловия Тогда
		СтрокаВозврата = "CJE";
	КонецЕсли;
	
	Если парамСпособИдентификации = "Вариант2" Тогда
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамКодСЗП), 10, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		".txt";
		
	Иначе
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		СокрЛП(парамКодОрганизации) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты3) +
		".txt";
		
	КонецЕсли;
	
КонецФункции
//aliega 17.01.2019--------------------------------------------------------------------

&НаСервере
Функция СформироватьФайлРеестраНаВыпускБанковскихКарт()
	
	ЗаголовокРеестра = СформироватьЗаголовокРеестраНаВыпускБанковскихКарт(Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.НомерРеестраНаВыпускБанковскихКарт, Объект.СокращенноеНаименованиеОрганизации, Объект.ТочкаДоставкиКарты);
	
	СтрокиРеестра = СформироватьСтрокиРеестраНаВыпускБанковскихКарт(Объект.РеестрНаВыпускБанковскихКарт);
	
	КонтрольнаяСтрокаРеестра = СформироватьКонтрольнуюСтрокуРеестраНаВыпускБанковскихКарт(Объект.РеестрНаВыпускБанковскихКарт.Количество());
	
	Возврат ЗаголовокРеестра + СтрокиРеестра + КонтрольнаяСтрокаРеестра;
	
КонецФункции

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Функция СформироватьФайлРеестраНаВыпускСКП()
	
	ЗаголовокРеестра = СформироватьЗаголовокРеестраНаВыпускСКП(Объект.ДатаРеестраСКП, Объект.НомерРеестраНаВыпускСКП, Объект.СокращенноеНаименованиеОрганизации, Объект.ТПИнициаторСКП, Объект.КаналПродажиСКП, Объект.СпособПередачиСКП, Объект.ТПДоставкиСКП);
	
	СтрокиРеестра = СформироватьСтрокиРеестраНаВыпускСКП(Объект.РеестрСКП);
	
	КонтрольнаяСтрокаРеестра = СформироватьКонтрольнуюСтрокуРеестраНаВыпускСКП(Объект.РеестрСКП.Количество());
	
	Возврат ЗаголовокРеестра + СтрокиРеестра + КонтрольнаяСтрокаРеестра;	
	
КонецФункции
//aliega 17.01.2019--------------------------------------------------------------------

&НаСервере
Функция СформироватьФайлРеестраНаВыпускСКМ()
	
	ЗаголовокРеестра = СформироватьЗаголовокРеестраНаВыпускСКМ(Объект.ДатаРеестраСКМ, Объект.НомерРеестраНаВыпускСКМ, Объект.СокращенноеНаименованиеОрганизации, Объект.ТПИнициаторСКМ, Объект.КаналПродажиСКМ, Объект.СпособПередачиСКМ, Объект.ТПДоставкиСКМ);
	
	СтрокиРеестра = СформироватьСтрокиРеестраНаВыпускСКМ(Объект.РеестрСКМ);
	
	КонтрольнаяСтрокаРеестра = СформироватьКонтрольнуюСтрокуРеестраНаВыпускСКМ(Объект.РеестрСКМ.Количество());
	
	Возврат ЗаголовокРеестра + СтрокиРеестра + КонтрольнаяСтрокаРеестра;	
	
КонецФункции

&НаСервере
Функция СформироватьЗаголовокРеестраНаВыпускБанковскихКарт(парамДата, парамНомер, парамНаименованиеОрганизации, парамТочкаДоставки)
	
	ДополнительнаяСтрока = "";
	
	Если ЗначениеЗаполнено(парамТочкаДоставки) Тогда
		Возврат
		"card" +
		Объект.мСимволРазделитель +
		Формат(парамДата, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		ДополнитьСтроку(СокрЛП(парамНомер), 2, "0") +
		Объект.мСимволРазделитель +
		ПривестиСтроку(парамНаименованиеОрганизации, 200) +
		Объект.мСимволРазделитель +
		Объект.мСимволРазделитель +
		Объект.мСимволРазделитель +
		Объект.мСимволРазделитель +
		ПривестиСтроку(парамТочкаДоставки, 4) +
		ДополнительнаяСтрока +
		Объект.мСимволНоваяСтрока;
		
	Иначе	
		Возврат
		"card" +
		Объект.мСимволРазделитель +
		Формат(парамДата, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		ДополнитьСтроку(СокрЛП(парамНомер), 2, "0") +
		Объект.мСимволРазделитель +
		ПривестиСтроку(парамНаименованиеОрганизации, 200) +
		ДополнительнаяСтрока +
		Объект.мСимволНоваяСтрока;
	КонецЕсли;
	
	
КонецФункции

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Функция СформироватьЗаголовокРеестраНаВыпускСКП(парамДата, парамНомер, парамНаименованиеОрганизации, ТПИнициаторСКП, КаналПродажиСКП, СпособПередачиСКП, ТПДоставкиСКП)
	
	ДополнительнаяСтрока	=	"";
	
	Возврат
	"card" +
	Объект.мСимволРазделитель +
	Формат(парамДата, Объект.мФорматДаты4) +
	Объект.мСимволРазделитель +
	ДополнитьСтроку(СокрЛП(парамНомер), 2, "0") +
	Объект.мСимволРазделитель +
	ПривестиСтроку(парамНаименованиеОрганизации, 200) +
	Объект.мСимволРазделитель+
	ТПИнициаторСКП+
	Объект.мСимволРазделитель+
	КаналПродажиСКП+
	Объект.мСимволРазделитель+
	СпособПередачиСКП+
	Объект.мСимволРазделитель+
	ТПДоставкиСКП+
	ДополнительнаяСтрока +
	Объект.мСимволНоваяСтрока;
	
КонецФункции
//aliega 17.01.2019--------------------------------------------------------------------

Функция СформироватьЗаголовокРеестраНаВыпускСКМ(парамДата, парамНомер, парамНаименованиеОрганизации, ТПИнициаторСКМ, КаналПродажиСКМ, СпособПередачиСКМ, ТПДоставкиСКМ)
	
	ДополнительнаяСтрока	=	"";
	
	Возврат
	"card" +
	Объект.мСимволРазделитель +
	Формат(парамДата, Объект.мФорматДаты4) +
	Объект.мСимволРазделитель +
	ДополнитьСтроку(СокрЛП(парамНомер), 2, "0") +
	Объект.мСимволРазделитель +
	ПривестиСтроку(парамНаименованиеОрганизации, 200) +
	Объект.мСимволРазделитель+
	ТПИнициаторСКМ+
	Объект.мСимволРазделитель+
	КаналПродажиСКМ+
	Объект.мСимволРазделитель+
	СпособПередачиСКМ+
	Объект.мСимволРазделитель+
	ТПДоставкиСКМ+
	ДополнительнаяСтрока +
	Объект.мСимволНоваяСтрока;
	
КонецФункции


&НаСервере
Функция СформироватьСтрокиРеестраНаВыпускБанковскихКарт(парамТаблица)
	
	Результат = "";
	
	Для Каждого ТекСтрока Из парамТаблица Цикл
		
		Результат = Результат +
		СокрЛП(ТекСтрока.ТабельныйНомер) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Фамилия) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Имя) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Отчество) +
		Объект.мСимволРазделитель +
		?(ТекСтрока.Пол = Перечисления.ПолФизическогоЛица.Женский, "Ж", "М") +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаРождения, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.МестоРождения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Гражданство) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ДокументКод) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ДокументСерия) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ДокументНомер) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДокументДатаВыдачи, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ДокументКемВыдан) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ДокументКодПодразделения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Индекс) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Район) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Город) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Улица) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Дом) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Корпус) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистрации_Квартира) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.ТелефонПоМестуРегистрации) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.АдресВременнойРегистрации) +
		Объект.мСимволРазделитель +
		//Формат(ТекСтрока.СрокДействияВременнойРегистрации, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресФактическогоПроживания) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.ТелефонПоМестуПроживания) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ТелефонМобильный) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресЭлектроннойПочты) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ТелефонРабочий) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.Факс) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НаименованиеДолжности) +
		Объект.мСимволРазделитель +
		ПолучитьФамилиюИмяСОграничениемДлины(СокрЛП(ТекСтрока.ЭмбоссируемаяФамилия), СокрЛП(ТекСтрока.ЭмбоссируемоеИмя), Объект.мСимволРазделитель, 19) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ЭмбоссируемоеНазваниеКомпании) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.КодовоеСлово) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ВторойДокументКод) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ВторойДокументСерия) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ВторойДокументНомер) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ВторойДокументДатаВыдачи, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ВторойДокументКемВыдан) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ОсновнойДоход, Объект.мФорматЦелогоЧислаБезПробелов) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ТипКарты) +
		Объект.мСимволРазделитель +
		//Формат(ТекСтрока.ДатаПриемаНаРаботу, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодДолжности) +
		Объект.мСимволРазделитель +
		"stop" +
		Объект.мСимволНоваяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//aliega 07.02.2019--------------------------------------------------------------------
&НаСервере
Функция СформироватьСтрокиРеестраНаВыпускСКП(парамТаблица)
	
	Результат = "";
	
	Для Каждого ТекСтрока Из парамТаблица Цикл
		
		Результат = Результат +
		СокрЛП(ТекСтрока.ТабельныйНомер) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Фамилия) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Имя) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Отчество) +
		Объект.мСимволРазделитель +
		?(ТекСтрока.Пол = Перечисления.ПолФизическогоЛица.Женский, "Ж", "М") +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаРождения, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.МестоРождения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Гражданство) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.СерияПаспорта) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НомерПаспорта) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаВыдачиПаспорта, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КемВыданПаспорт) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодПодразделения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистраии_прописки) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Индекс_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Район_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Город_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Улица_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Дом_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Корпус_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Квартира_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Телефон_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Адрес_времрег) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.СрокДействия_времрег, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресФактическогоПроживания) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.ТелефонПоМестуПроживания) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Телефон_мобильный) +
		Объект.мСимволРазделитель +//----------------
		СокрЛП(ТекСтрока.АдресEmail) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.РабочийТелефон) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.Факс) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НазваниеДолжности) +
		Объект.мСимволРазделитель +
		ПолучитьФамилиюИмяСОграничениемДлины(СокрЛП(ТекСтрока.ЭмбосируемаяФамилия), СокрЛП(ТекСтрока.ЭмбосируемоеИмя), Объект.мСимволРазделитель, 19) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ЭмбосируемоеНазваниеКомпании) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодовоеСлово_пароль) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодВторогоДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.СерияВторогоДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НомерВторогоДокумента) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаВыдачиВторогоДокумента, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КемВыданВторойДокумент) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ОсновнойДоход, Объект.мФорматЦелогоЧислаБезПробелов) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ТипКарты) +
		Объект.мСимволРазделитель +
		//Формат(ТекСтрока.ДатаПриемаНаРаботу, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Должность) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.СерияОМС) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.НомерОМС) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.СНИЛС)+
		Объект.мСимволРазделитель +
		"stop" +
		Объект.мСимволНоваяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
//aliega 07.02.2019--------------------------------------------------------------------

&НаСервере
Функция СформироватьСтрокиРеестраНаВыпускСКМ(парамТаблица)
	
	Результат = "";
	
	Для Каждого ТекСтрока Из парамТаблица Цикл
		
		Результат = Результат +
		СокрЛП(ТекСтрока.ТабельныйНомер) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Фамилия) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Имя) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Отчество) +
		Объект.мСимволРазделитель +
		?(ТекСтрока.Пол = Перечисления.ПолФизическогоЛица.Женский, "Ж", "М") +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаРождения, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.МестоРождения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Гражданство) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.СерияПаспорта) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НомерПаспорта) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаВыдачиПаспорта, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КемВыданПаспорт) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодПодразделения) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресРегистраии_прописки) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Индекс_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Район_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Город_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Улица_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Дом_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Корпус_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Квартира_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Телефон_рег) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Адрес_времрег) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.СрокДействия_времрег, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.АдресФактическогоПроживания) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.ТелефонПоМестуПроживания) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Телефон_мобильный) +
		Объект.мСимволРазделитель +//----------------
		СокрЛП(ТекСтрока.АдресEmail) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.РабочийТелефон) +
		Объект.мСимволРазделитель +
		//СокрЛП(ТекСтрока.Факс) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НазваниеДолжности) +
		Объект.мСимволРазделитель +
		ПолучитьФамилиюИмяСОграничениемДлины(СокрЛП(ТекСтрока.ЭмбосируемаяФамилия), СокрЛП(ТекСтрока.ЭмбосируемоеИмя), Объект.мСимволРазделитель, 19) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ЭмбосируемоеНазваниеКомпании) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодовоеСлово_пароль) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КодВторогоДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.СерияВторогоДокумента) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.НомерВторогоДокумента) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ДатаВыдачиВторогоДокумента, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.КемВыданВторойДокумент) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.ОсновнойДоход, Объект.мФорматЦелогоЧислаБезПробелов) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ТипКарты) +
		Объект.мСимволРазделитель +
		//Формат(ТекСтрока.ДатаПриемаНаРаботу, Объект.мФорматДаты4) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.Должность) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.СерияОМС) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.НомерОМС) +
		Объект.мСимволРазделитель +
		СокрЛ(ТекСтрока.СНИЛС)+
		Объект.мСимволРазделитель +
		(?(ТекСтрока.РеестрСКММедицинскийРаботник,"y","n"))+
		Объект.мСимволРазделитель+
		"stop" +
		Объект.мСимволНоваяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//&НаСервере
//Функция МедицинскийРаботник(МедицинскийРаботник)
//	Если ЭтотОбъект.ЭтаФорма.МедицинскийРаботник Тогда
//		Пер = "Y";
//	Иначе 
//		Пер = "N";
//	КонецЕсли;	
//	Возврат Пер;
//КонецФункции


&НаСервере
Функция СформироватьКонтрольнуюСтрокуРеестраНаВыпускБанковскихКарт(парамКоличествоСтрок)
	
	Возврат
	"end" +
	Объект.мСимволРазделитель +
	Формат(парамКоличествоСтрок, Объект.мФорматЦелогоЧислаБезПробелов) +
	Объект.мСимволНоваяСтрока;
	
КонецФункции

//aliega 17.01.2019--------------------------------------------------------------------
&НаСервере
Функция СформироватьКонтрольнуюСтрокуРеестраНаВыпускСКП(парамКоличествоСтрок)
	
	Возврат
	"end" +
	Объект.мСимволРазделитель +
	Формат(парамКоличествоСтрок, Объект.мФорматЦелогоЧислаБезПробелов) +
	Объект.мСимволНоваяСтрока;	
	
КонецФункции
//aliega 17.01.2019--------------------------------------------------------------------

&НаСервере
Функция СформироватьКонтрольнуюСтрокуРеестраНаВыпускСКМ(парамКоличествоСтрок)
	
	Возврат
	"end" +
	Объект.мСимволРазделитель +
	Формат(парамКоличествоСтрок, Объект.мФорматЦелогоЧислаБезПробелов) +
	Объект.мСимволНоваяСтрока;	
	
КонецФункции


&НаСервере
Процедура ПроверитьПравильностьЗаполненияРеестраНаВыпускБанковскихКарт(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраНаВыпускБанковскихКарт) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраНаВыпускБанковскихКарт) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТочкаДоставкиКарты) И СтрДлина(Объект.ТочкаДоставкиКарты) < 4 Тогда
		Сообщить("Реестр не может быть сформирован, т.к. в поле Точка доставки карты введено менее 4 цифр", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраНаВыпускБанковскихКарт) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрНаВыпускБанковскихКарт Цикл
		
		Если ПустаяСтрока(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана фамилия работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в фамилии работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано имя работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в имени работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано отчество работника.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в отчестве работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Пол) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан пол работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано место рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в месте рождения присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано гражданство.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в гражданстве присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ДокументКод) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ДокументКод) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ДокументКод = "ПаспортРФ" И ПустаяСтрока(ТекСтрока.ДокументСерия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана серия документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли ТекСтрока.ДокументКод = "ПаспортРФ" И Не ФорматСерииДокументаСоответствует(ТекСтрока.ДокументСерия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указана серия документа в неверном формате.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ДокументСерия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ДокументНомер) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан номер документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ДокументНомер) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДокументДатаВыдачи) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ДокументКемВыдан) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан орган выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ДокументКемВыдан) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в органе выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ДокументКодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код подразделения выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ДокументКодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде подразделения выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресРегистрации) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресРегистрации) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресРегистрации_Город) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан город по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресРегистрации_Город) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в городе по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресРегистрации_Улица) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана улица по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресРегистрации_Улица) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в улице по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.АдресФактическогоПроживания) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес фактического проживания.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//Иначе
		Если Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресФактическогоПроживания) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе фактического проживания присутствуют недопустимые символы." + Символы.ПС + "Примечание: Поле необязательное и может быть пустым или заполнено в соотвествии с требованиями", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.ТелефонРабочий) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан рабочий телефон.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//Иначе
		Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.ТелефонРабочий) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан рабочий телефон в неверном формате." + Символы.ПС + "Примечание: Поле необязательное и может быть пустым или заполнено в соотвествии со следующими требованиями: код города, пробел, номер телефона(без пробелов), пример:495 1234567", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТелефонРабочий) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в рабочем телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ПустаяСтрока(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//	Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан телефон по месту проживания в неверном формате.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в телефоне по месту проживания присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ПустаяСтрока(ТекСтрока.ТелефонМобильный) Тогда
			Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.ТелефонМобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан мобильный телефон в неверном формате. Формат: код города, пробел, номер телефона(без пробелов), пример:495 1234567", СтатусСообщения.Внимание);
				Отказ = Истина;
			ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТелефонМобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в мобильном телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.НаименованиеДолжности) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано наименование должности.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//Иначе
		Если Не ДопустимыеСимволыВСтроке(ТекСтрока.НаименованиеДолжности) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в наименовании должности присутствуют недопустимые символы." + Символы.ПС + "Примечание: Поле необязательное и может быть пустым или заполнено в соотвествии с требованиями", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ТекСтрока.ОсновнойДоход) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана сумма основного дохода.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан тип карты.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в типе карты присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		//
		//Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПриемаНаРаботу) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата приема на работу.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.КодДолжности) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код должности.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КодДолжности) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде должности присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если Не ДопустимыеСимволыВСтроке(ТекСтрока.ВторойДокументНомер) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере второго документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли ПустаяСтрока(ТекСтрока.ВторойДокументНомер) Тогда
			ТекСтрока.ВторойДокументКод = "";
		Иначе
			Если ТекСтрока.ВторойДокументКод = "СНИЛС" Тогда
				СтрокаЦифр = СтрЗаменить(ТекСтрока.ВторойДокументНомер, "-", "");
				СтрокаЦифр = СтрЗаменить(СтрокаЦифр, " ", "");
				Если СтрДлина(СтрокаЦифр) < 11 Тогда
					Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + ", поле ""Номер второго документа"" заполнено некорректно. Это необязательное поле, оно может быть пустым или заполнено согласно следующему формату: NNN-NNN-NNN CC.", СтатусСообщения.Внимание);
					Отказ = Истина;				
				ИначеЕсли НЕ ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
					Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + ", поле ""Номер второго документа"" заполнено некорректно. Это необязательное поле, оно может быть пустым или заполнено согласно следующему формату: NNN-NNN-NNN CC.", СтатусСообщения.Внимание);
					Отказ = Истина;
				ИначеЕсли ПолучитьСимволСтроки(ТекСтрока.ВторойДокументНомер, 4) <> "-" ИЛИ ПолучитьСимволСтроки(ТекСтрока.ВторойДокументНомер, 8) <> "-" ИЛИ ПолучитьСимволСтроки(ТекСтрока.ВторойДокументНомер, 12) <> " " Тогда
					Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + ", поле ""Номер второго документа"" заполнено некорректно. Это необязательное поле, оно может быть пустым или заполнено согласно следующему формату: NNN-NNN-NNN CC.", СтатусСообщения.Внимание);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТолькоЦифрыВСтроке(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

//aliega 07.02.2019----------------------------------------------------
&НаСервере
Процедура ПроверитьПравильностьЗаполненияРеестраНаВыпускСКП(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраСКП) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраНаВыпускСКП) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраНаВыпускСКП) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрСКП Цикл
		
		Если ПустаяСтрока(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана фамилия работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в фамилии работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано имя работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в имени работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано отчество работника.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в отчестве работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Пол) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан пол работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано место рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в месте рождения присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано гражданство.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в гражданстве присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КодДокумента) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КодДокумента) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.КодДокумента = "ПаспортРФ" И ПустаяСтрока(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана серия документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли ТекСтрока.КодДокумента = "ПаспортРФ" И Не ФорматСерииДокументаСоответствует(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указана серия документа в неверном формате.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.НомерПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан номер документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НомерПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаВыдачиПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КемВыданПаспорт) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан орган выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КемВыданПаспорт) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в органе выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код подразделения выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде подразделения выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресРегистраии_прописки) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресРегистраии_прописки) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Город_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан город по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Город_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в городе по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Улица_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана улица по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Улица_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в улице по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресФактическогоПроживания) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес фактического проживания.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресФактическогоПроживания) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе фактического проживания присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан рабочий телефон.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ФорматНомераТелефонаСоответствует(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан рабочий телефон в неверном формате.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в рабочем телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ПустаяСтрока(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//	Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан телефон по месту проживания в неверном формате.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в телефоне по месту проживания присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ПустаяСтрока(ТекСтрока.Телефон_мобильный) Тогда
			Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.Телефон_мобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан мобильный телефон в неверном формате.", СтатусСообщения.Внимание);
				Отказ = Истина;
			ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Телефон_мобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в мобильном телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.НазваниеДолжности) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано наименование должности.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НазваниеДолжности) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в наименовании должности присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ОсновнойДоход) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана сумма основного дохода.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан тип карты.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в типе карты присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПриемаНаРаботу) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата приема на работу.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Должность) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код должности.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Должность) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде должности присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии ОМС присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		//
		//Если ПустаяСтрока(ТекСтрока.НомерОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не номер ОМС.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.НомерОМС) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан номер ОМС.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		Если ЕстьКириллица(ТекСтрока.СерияОМС) ИЛИ Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияОМС) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии ОМС присутствуют недопустимые символы или символы Кириллицы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекСтрока.СерияОМС) И СтрДлина(ТекСтрока.НомерОМС) <> 10  Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " номер ОМС не равен 10 цифрам, что противоречит старому образцу формата.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		Если ПустаяСтрока(ТекСтрока.СерияОМС) И	СтрДлина(ТекСтрока.НомерОМС) <> 16 Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " номер ОМС не равен 16 цифрам, что противоречит новому образцу формата.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры
//aliega 07.02.2019----------------------------------------------------

&НаСервере
Процедура ПроверитьПравильностьЗаполненияРеестраНаВыпускСКМ(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраСКМ) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраНаВыпускСКМ) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраНаВыпускСКМ) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрСКМ Цикл
		
		Если ПустаяСтрока(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана фамилия работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Фамилия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в фамилии работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано имя работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Имя) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в имени работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано отчество работника.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Отчество) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в отчестве работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Пол) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан пол работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано место рождения.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.МестоРождения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в месте рождения присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано гражданство.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Гражданство) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в гражданстве присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КодДокумента) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КодДокумента) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.КодДокумента = "ПаспортРФ" И ПустаяСтрока(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана серия документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли ТекСтрока.КодДокумента = "ПаспортРФ" И Не ФорматСерииДокументаСоответствует(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указана серия документа в неверном формате.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.НомерПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан номер документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НомерПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаВыдачиПаспорта) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КемВыданПаспорт) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан орган выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КемВыданПаспорт) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в органе выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.КодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код подразделения выдачи документа.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.КодПодразделения) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде подразделения выдачи документа присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресРегистраии_прописки) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресРегистраии_прописки) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Город_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан город по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Город_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в городе по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Улица_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана улица по адресу регистрации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Улица_рег) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в улице по адресу регистрации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.АдресФактическогоПроживания) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан адрес фактического проживания.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.АдресФактическогоПроживания) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в адресе фактического проживания присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан рабочий телефон.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ФорматНомераТелефонаСоответствует(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан рабочий телефон в неверном формате.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.РабочийТелефон) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в рабочем телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ПустаяСтрока(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//	Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан телефон по месту проживания в неверном формате.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТелефонПоМестуПроживания) Тогда
		//		Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в телефоне по месту проживания присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ПустаяСтрока(ТекСтрока.Телефон_мобильный) Тогда
			Если Не ФорматНомераТелефонаСоответствует(ТекСтрока.Телефон_мобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " указан мобильный телефон в неверном формате.", СтатусСообщения.Внимание);
				Отказ = Истина;
			ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Телефон_мобильный) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в мобильном телефоне присутствуют недопустимые символы.", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.НазваниеДолжности) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано наименование должности.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НазваниеДолжности) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в наименовании должности присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ОсновнойДоход) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана сумма основного дохода.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан тип карты.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТипКарты) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в типе карты присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПриемаНаРаботу) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указана дата приема на работу.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Должность) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан код должности.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.Должность) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в коде должности присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии ОМС присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		//
		//Если ПустаяСтрока(ТекСтрока.НомерОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не номер ОМС.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		
		//Если ПустаяСтрока(ТекСтрока.НомерОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан номер ОМС.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		//Если ЕстьКириллица(ТекСтрока.СерияОМС) ИЛИ Не ДопустимыеСимволыВСтроке(ТекСтрока.СерияОМС) Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в серии ОМС присутствуют недопустимые символы или символы Кириллицы.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		//Если Не ПустаяСтрока(ТекСтрока.СерияОМС) И СтрДлина(ТекСтрока.НомерОМС) <> 10  Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " номер ОМС не равен 10 цифрам, что противоречит старому образцу формата.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;
		//Если ПустаяСтрока(ТекСтрока.СерияОМС) И	СтрДлина(ТекСтрока.НомерОМС) <> 16 Тогда
		//	Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " номер ОМС не равен 16 цифрам, что противоречит новому образцу формата.", СтатусСообщения.Внимание);
		//	Отказ = Истина;
		//КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекСтрока.СНИЛС)Тогда
			
			Элемент = 9;
			КонтрЧисло = 0;
			Для Счетчик = 1 По 11 Цикл
				Если (Сред(ТекСтрока.СНИЛС,Счетчик,1) <> "-") Тогда
					Значение = Число(Сред(ТекСтрока.СНИЛС,Счетчик,1)) * Элемент;
					КонтрЧисло = КонтрЧисло + Значение;
					Элемент = Элемент - 1;
				КонецЕсли;			
			КонецЦикла;
			
			КонтрольноеЧислоОкругленное = КонтрЧисло % 101;
			
			
			
			Если НЕ((КонтрЧисло < 100 И КонтрЧисло = Число(Сред(ТекСтрока.СНИЛС,13,2))) ИЛИ
				(КонтрЧисло = 100 И Число(Сред(ТекСтрока.СНИЛС,13,2)) = 00)ИЛИ 
				(КонтрЧисло = 101 И Число(Сред(ТекСтрока.СНИЛС,13,2)) = 00)ИЛИ 
				(КонтрЧисло > 101 И Число(Сред(ТекСтрока.СНИЛС,13,2)) = КонтрольноеЧислоОкругленное)) Тогда
				
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " Неверный ввод СНИЛС", СтатусСообщения.Внимание);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


//aliega 16.01.2019----------------------------------------------------
&НаСервере
Функция ЕстьКириллица(ПроверяемаяСтрока) Экспорт 
	
	ЕстьКириллица	=	ЛОЖЬ; 
	ИсходнаяСтрока	=	СокрЛП(ПроверяемаяСтрока); 
	
	Если	СтрДлина(ИсходнаяСтрока)	>	0	Тогда 
		Для	Сч	=	1	По	СтрДлина(ПроверяемаяСтрока)	Цикл 
			Символ	=	НРег(Сред(ПроверяемаяСтрока,	Сч,	1)); 
			Если	Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя",	Символ)	Тогда 
				ЕстьКириллица	=	ИСТИНА; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ЕстьКириллица;
	
КонецФункции
//aliega 16.01.2019----------------------------------------------------

&НаСервере
Процедура ЗаполнитьРеестрНаВыпускБанковскихКарт(парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамЗарплатныйПроект, парамТипБанковскихКарт, парамПериод, парамПодразделение) Экспорт
	
	Объект.РеестрНаВыпускБанковскихКарт.Очистить();
	
	СписокФизическихЛиц = ПолучитьСписокРаботающихРаботников(парамОрганизация, парамПериод, парамПодразделение);
	
	Для Каждого ТекЗначение Из СписокФизическихЛиц Цикл
		
		Если ПустаяСтрока(ПолучитьНомерЛицевогоСчетаФизическогоЛица(ТекЗначение.Значение, парамОрганизация, парамЗарплатныйПроект)) Тогда
			
			НоваяСтрока = Объект.РеестрНаВыпускБанковскихКарт.Добавить();
			
			НоваяСтрока.ФизическоеЛицо = ТекЗначение.Значение;
			
			ЗаполнитьДанныеСтрокиРеестраНаВыпускБанковскихКарт(НоваяСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначениеРеквизитаТабличнойЧасти("РеестрНаВыпускБанковскихКарт", "ТипКарты", парамТипБанковскихКарт);
	
КонецПроцедуры

//aliega 16.01.2019----------------------------------------------------
&НаСервере
Процедура ЗаполнитьРеестрНаВыпускСКП(парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамЗарплатныйПроект, парамТипБанковскихКарт, парамПериод, парамПодразделение) Экспорт
	
	Объект.РеестрСКП.Очистить();
	
	СписокФизическихЛиц	=	ПолучитьСписокРаботающихРаботников(парамОрганизация, парамПериод, парамПодразделение);
	
	Для Каждого ТекЗначение Из СписокФизическихЛиц Цикл
		Если ПустаяСтрока(ПолучитьНомерЛицевогоСчетаФизическогоЛица(ТекЗначение.Значение, парамОрганизация, парамЗарплатныйПроект)) Тогда
			НоваяСтрока					=	Объект.РеестрСКП.Добавить();
			НоваяСтрока.ФизическоеЛицо	=	ТекЗначение.Значение;
			ЗаполнитьДанныеСтрокиРеестраНаВыпускСКП(НоваяСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначениеРеквизитаТабличнойЧасти("РеестрНаВыпускБанковскихКарт", "ТипКарты", парамТипБанковскихКарт);
	
КонецПроцедуры
//aliega 16.01.2019----------------------------------------------------

&НаСервере
Процедура ЗаполнитьДанныеСтрокиРеестраНаВыпускБанковскихКарт(Знач парамСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрНаВыпускБанковскихКарт[парамСтрока - 1];
	КонецЕсли;
	
	СтруктураРабочегоМеста		= ПолучитьРабочееМестоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамПериод);
	СтруктураФИО				= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	СтруктураГражданства		= ПолучитьГражданствоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	
	СтруктураПаспорта			= ПолучитьПаспортныеДанныеФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	СтруктураВторогоДокумента	= ПолучитьДанныеНеосновныхДокументовФизическогоЛица(парамСтрока.ФизическоеЛицо);
	
	СтруктураАдресаРегистрации	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СтруктураАдресаПроживания	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	Если Не ЗначениеЗаполнено(СтруктураАдресаПроживания) Тогда
		СтруктураАдресаПроживания = СтруктураАдресаРегистрации;
	КонецЕсли;
	
	СтруктураМобильногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	СтруктураТелефонаПоМестуПроживания = ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СтруктураСлужебногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	Если Не ЗначениеЗаполнено(СтруктураСлужебногоТелефона) Тогда
		СтруктураСлужебногоТелефона = ПолучитьТелефонОбъекта(парамОрганизация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	парамСтрока.ТабельныйНомер						= Прав(СокрЛП(СтруктураРабочегоМеста.ТабельныйНомер), 7);
	парамСтрока.Фамилия								= СтруктураФИО.Фамилия;
	парамСтрока.Имя									= СтруктураФИО.Имя;
	парамСтрока.Отчество							= СтруктураФИО.Отчество;
	парамСтрока.Пол									= парамСтрока.ФизическоеЛицо.Пол;
	парамСтрока.ДатаРождения						= парамСтрока.ФизическоеЛицо.ДатаРождения;
	парамСтрока.МестоРождения						= ПолучитьМестоРожденияФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.Гражданство							= ПреобразоватьКодСтраныМира(СтруктураГражданства.КодСтраны);
	парамСтрока.ДокументКод							= СтруктураПаспорта.ДокументКод;
	парамСтрока.ДокументСерия						= СтруктураПаспорта.ДокументСерия;
	парамСтрока.ДокументНомер						= СтруктураПаспорта.ДокументНомер;
	парамСтрока.ДокументДатаВыдачи					= СтруктураПаспорта.ДокументДатаВыдачи;
	парамСтрока.ДокументКемВыдан					= СтруктураПаспорта.ДокументКемВыдан;
	парамСтрока.ДокументКодПодразделения			= СтруктураПаспорта.ДокументКодПодразделения;
	парамСтрока.АдресРегистрации					= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Адрес, "");
	парамСтрока.АдресРегистрации_Индекс				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Индекс, "");
	парамСтрока.АдресРегистрации_Район				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Район, "");
	парамСтрока.АдресРегистрации_Город				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Город, "");
	парамСтрока.АдресРегистрации_Улица				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Улица, "");
	парамСтрока.АдресРегистрации_Дом				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Дом, "");
	парамСтрока.АдресРегистрации_Корпус				= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Корпус, "");
	парамСтрока.АдресРегистрации_Квартира			= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Квартира, "");
	//парамСтрока.ТелефонПоМестуРегистрации			= "";
	//парамСтрока.АдресВременнойРегистрации			= "";
	//парамСтрока.СрокДействияВременнойРегистрации	= Дата('00010101');
	парамСтрока.АдресФактическогоПроживания			= ?(ЗначениеЗаполнено(СтруктураАдресаПроживания), СтруктураАдресаПроживания.Адрес, "");
	//парамСтрока.ТелефонПоМестуПроживания			= ?(ЗначениеЗаполнено(СтруктураТелефонаПоМестуПроживания), СтруктураТелефонаПоМестуПроживания.Телефон, "");
	парамСтрока.ТелефонМобильный					= ?(ЗначениеЗаполнено(СтруктураМобильногоТелефона), СтруктураМобильногоТелефона.Телефон, "");
	парамСтрока.АдресЭлектроннойПочты				= "";
	парамСтрока.ТелефонРабочий						= ?(ЗначениеЗаполнено(СтруктураСлужебногоТелефона), СтруктураСлужебногоТелефона.Телефон, "");
	//парамСтрока.Факс								= "";
	парамСтрока.НаименованиеДолжности				= СтруктураРабочегоМеста.НаименованиеДолжности;
	парамСтрока.ЭмбоссируемаяФамилия				= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Фамилия);
	парамСтрока.ЭмбоссируемоеИмя					= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Имя);
	парамСтрока.ЭмбоссируемоеНазваниеКомпании		= парамЭмбоссируемоеНазваниеКомпании;
	//парамСтрока.КодовоеСлово						= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо).Фамилия;
	парамСтрока.ВторойДокументКод					= СтруктураВторогоДокумента.ДокументКод;
	парамСтрока.ВторойДокументСерия					= "";
	парамСтрока.ВторойДокументНомер					= СтруктураВторогоДокумента.ДокументНомер;
	парамСтрока.ВторойДокументДатаВыдачи			= Дата('00010101');
	парамСтрока.ВторойДокументКемВыдан				= "";
	парамСтрока.ОсновнойДоход						= СтруктураРабочегоМеста.ОсновнойДоход;
	парамСтрока.ТипКарты							= парамТипБанковскихКарт;
	//парамСтрока.ДатаПриемаНаРаботу					= СтруктураРабочегоМеста.ДатаПриемаНаРаботу;
	парамСтрока.КодДолжности						= СтруктураРабочегоМеста.КодДолжности;
	
	ЗаполнитьОрганВыдачиДокумента(парамСтрока.ВторойДокументКод, парамСтрока.ВторойДокументКемВыдан);
	
КонецПроцедуры

//aliega 07.02.2019------------------------------------------
&НаСервере
Процедура ЗаполнитьДанныеСтрокиРеестраНаВыпускСКП(Знач парамСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрСКП[парамСтрока - 1];
	КонецЕсли;
	
	СтруктураРабочегоМеста		= ПолучитьРабочееМестоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамПериод);
	СтруктураФИО				= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	СтруктураГражданства		= ПолучитьГражданствоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	
	СтруктураПаспорта			= ПолучитьПаспортныеДанныеФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	СтруктураВторогоДокумента	= ПолучитьДанныеНеосновныхДокументовФизическогоЛица(парамСтрока.ФизическоеЛицо);
	
	СтруктураАдресаРегистрации	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СтруктураАдресаПроживания	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	
	Если Не ЗначениеЗаполнено(СтруктураАдресаПроживания) Тогда
		СтруктураАдресаПроживания = СтруктураАдресаРегистрации;
	КонецЕсли;
	
	СтруктураМобильногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	СтруктураТелефонаПоМестуПроживания = ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СтруктураСлужебногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	Если Не ЗначениеЗаполнено(СтруктураСлужебногоТелефона) Тогда
		СтруктураСлужебногоТелефона = ПолучитьТелефонОбъекта(парамОрганизация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	СтруктураДокументаОМС		=	ПолучитьДанныеОМСФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	
	
	парамСтрока.ТабельныйНомер						= Прав(СокрЛП(СтруктураРабочегоМеста.ТабельныйНомер), 7);
	парамСтрока.Фамилия								= СтруктураФИО.Фамилия;
	парамСтрока.Имя									= СтруктураФИО.Имя;
	парамСтрока.Отчество							= СтруктураФИО.Отчество;
	парамСтрока.Пол									= парамСтрока.ФизическоеЛицо.Пол;
	парамСтрока.ДатаРождения						= парамСтрока.ФизическоеЛицо.ДатаРождения;
	парамСтрока.МестоРождения						= ПолучитьМестоРожденияФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.Гражданство							= ПреобразоватьКодСтраныМира(СтруктураГражданства.КодСтраны);
	парамСтрока.КодДокумента						= СтруктураПаспорта.ДокументКод;
	парамСтрока.СерияПаспорта						= СтруктураПаспорта.ДокументСерия;
	парамСтрока.НомерПаспорта						= СтруктураПаспорта.ДокументНомер;
	парамСтрока.ДатаВыдачиПаспорта					= СтруктураПаспорта.ДокументДатаВыдачи;
	парамСтрока.КемВыданПаспорт						= СтруктураПаспорта.ДокументКемВыдан;
	парамСтрока.КодПодразделения					= СтруктураПаспорта.ДокументКодПодразделения;
	парамСтрока.АдресРегистраии_прописки			= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Адрес, "");
	парамСтрока.Индекс_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Индекс, "");
	парамСтрока.Район_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Район, "");
	парамСтрока.Город_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Город, "");
	парамСтрока.Улица_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Улица, "");
	парамСтрока.Дом_рег								= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Дом, "");
	парамСтрока.Корпус_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Корпус, "");
	парамСтрока.Квартира_рег						= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Квартира, "");
	парамСтрока.Телефон_рег							= "";
	парамСтрока.Адрес_времрег						= "";
	парамСтрока.СрокДействия_времрег				= Дата('00010101');
	парамСтрока.АдресФактическогоПроживания			= ?(ЗначениеЗаполнено(СтруктураАдресаПроживания), СтруктураАдресаПроживания.Адрес, "");
	//парамСтрока.ТелефонПоМестуПроживания			= ?(ЗначениеЗаполнено(СтруктураТелефонаПоМестуПроживания), СтруктураТелефонаПоМестуПроживания.Телефон, "");
	парамСтрока.Телефон_мобильный					= ?(ЗначениеЗаполнено(СтруктураМобильногоТелефона), СтруктураМобильногоТелефона.Телефон, "");
	парамСтрока.АдресEmail							= "";
	парамСтрока.РабочийТелефон						= ?(ЗначениеЗаполнено(СтруктураСлужебногоТелефона), СтруктураСлужебногоТелефона.Телефон, "");
	//парамСтрока.Факс								= "";
	парамСтрока.НазваниеДолжности					= СтруктураРабочегоМеста.НаименованиеДолжности;
	парамСтрока.ЭмбосируемаяФамилия					= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Фамилия);
	парамСтрока.ЭмбосируемоеИмя						= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Имя);
	парамСтрока.ЭмбосируемоеНазваниеКомпании		= парамЭмбоссируемоеНазваниеКомпании;
	парамСтрока.КодовоеСлово_пароль					= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо).Фамилия;
	парамСтрока.КодВторогоДокумента					= СтруктураВторогоДокумента.ДокументКод;
	парамСтрока.СерияВторогоДокумента				= "";
	парамСтрока.НомерВторогоДокумента				= СтруктураВторогоДокумента.ДокументНомер;
	парамСтрока.ДатаВыдачиВторогоДокумента			= Дата('00010101');
	парамСтрока.КемВыданВторойДокумент				= "";
	парамСтрока.ОсновнойДоход						= СтруктураРабочегоМеста.ОсновнойДоход;
	парамСтрока.ТипКарты							= парамТипБанковскихКарт;
	//парамСтрока.ДатаПриемаНаРаботу					= СтруктураРабочегоМеста.ДатаПриемаНаРаботу;
	парамСтрока.Должность							= СтруктураРабочегоМеста.КодДолжности;
	парамСтрока.СерияОМС							= СтруктураДокументаОМС.ДокументСерия; 
	парамСтрока.НомерОМС                            = СтруктураДокументаОМС.ДокументНомер;
	парамСтрока.СНИЛС								= Справочники.ФизическиеЛица.НайтиПоНаименованию(парамСтрока.ФизическоеЛицо).СтраховойНомерПФР;
	парамСтрока.СерияОМС							= СтруктураДокументаОМС.ДокументСерия;
	парамСтрока.НомерОМС							= СтруктураДокументаОМС.ДокументНомер;
	
	ЗаполнитьОрганВыдачиДокумента(парамСтрока.КодВторогоДокумента, парамСтрока.КемВыданВторойДокумент);
	
КонецПроцедуры
//aliega 07.02.2019------------------------------------------

&НаСервере
Процедура ЗаполнитьДанныеСтрокиРеестраНаВыпускСКМ(Знач парамСтрока, парамОрганизация, парамЭмбоссируемоеНазваниеКомпании, парамБанк, парамТипБанковскихКарт, парамПериод) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрСКМ[парамСтрока - 1];
	КонецЕсли;
	
	СтруктураРабочегоМеста		= ПолучитьРабочееМестоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамПериод);
	СтруктураФИО				= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	СтруктураГражданства		= ПолучитьГражданствоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	
	СтруктураПаспорта			= ПолучитьПаспортныеДанныеФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	СтруктураВторогоДокумента	= ПолучитьДанныеНеосновныхДокументовФизическогоЛица(парамСтрока.ФизическоеЛицо);
	
	СтруктураАдресаРегистрации	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СтруктураАдресаПроживания	= ПолучитьАдресОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	
	Если Не ЗначениеЗаполнено(СтруктураАдресаПроживания) Тогда
		СтруктураАдресаПроживания = СтруктураАдресаРегистрации;
	КонецЕсли;
	
	СтруктураМобильногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	СтруктураТелефонаПоМестуПроживания = ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СтруктураСлужебногоТелефона	= ПолучитьТелефонОбъекта(парамСтрока.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	Если Не ЗначениеЗаполнено(СтруктураСлужебногоТелефона) Тогда
		СтруктураСлужебногоТелефона = ПолучитьТелефонОбъекта(парамОрганизация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	КонецЕсли;
	
	СтруктураДокументаОМС		=	ПолучитьДанныеОМСФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	
	
	парамСтрока.ТабельныйНомер						= Прав(СокрЛП(СтруктураРабочегоМеста.ТабельныйНомер), 7);
	парамСтрока.Фамилия								= СтруктураФИО.Фамилия;
	парамСтрока.Имя									= СтруктураФИО.Имя;
	парамСтрока.Отчество							= СтруктураФИО.Отчество;
	парамСтрока.Пол									= парамСтрока.ФизическоеЛицо.Пол;
	парамСтрока.ДатаРождения						= парамСтрока.ФизическоеЛицо.ДатаРождения;
	парамСтрока.МестоРождения						= ПолучитьМестоРожденияФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.Гражданство							= ПреобразоватьКодСтраныМира(СтруктураГражданства.КодСтраны);
	парамСтрока.КодДокумента						= СтруктураПаспорта.ДокументКод;
	парамСтрока.СерияПаспорта						= СтруктураПаспорта.ДокументСерия;
	парамСтрока.НомерПаспорта						= СтруктураПаспорта.ДокументНомер;
	парамСтрока.ДатаВыдачиПаспорта					= СтруктураПаспорта.ДокументДатаВыдачи;
	парамСтрока.КемВыданПаспорт						= СтруктураПаспорта.ДокументКемВыдан;
	парамСтрока.КодПодразделения					= СтруктураПаспорта.ДокументКодПодразделения;
	парамСтрока.АдресРегистраии_прописки			= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Адрес, "");
	парамСтрока.Индекс_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Индекс, "");
	парамСтрока.Район_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Район, "");
	парамСтрока.Город_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Город, "");
	парамСтрока.Улица_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Улица, "");
	парамСтрока.Дом_рег								= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Дом, "");
	парамСтрока.Корпус_рег							= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Корпус, "");
	парамСтрока.Квартира_рег						= ?(ЗначениеЗаполнено(СтруктураАдресаРегистрации), СтруктураАдресаРегистрации.Квартира, "");
	парамСтрока.Телефон_рег							= "";
	парамСтрока.Адрес_времрег						= "";
	парамСтрока.СрокДействия_времрег				= Дата('00010101');
	парамСтрока.АдресФактическогоПроживания			= ?(ЗначениеЗаполнено(СтруктураАдресаПроживания), СтруктураАдресаПроживания.Адрес, "");
	//парамСтрока.ТелефонПоМестуПроживания			= ?(ЗначениеЗаполнено(СтруктураТелефонаПоМестуПроживания), СтруктураТелефонаПоМестуПроживания.Телефон, "");
	парамСтрока.Телефон_мобильный					= ?(ЗначениеЗаполнено(СтруктураМобильногоТелефона), СтруктураМобильногоТелефона.Телефон, "");
	парамСтрока.АдресEmail							= "";
	парамСтрока.РабочийТелефон						= ?(ЗначениеЗаполнено(СтруктураСлужебногоТелефона), СтруктураСлужебногоТелефона.Телефон, "");
	//парамСтрока.Факс								= "";
	парамСтрока.НазваниеДолжности					= СтруктураРабочегоМеста.НаименованиеДолжности;
	парамСтрока.ЭмбосируемаяФамилия					= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Фамилия);
	парамСтрока.ЭмбосируемоеИмя						= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Имя);
	парамСтрока.ЭмбосируемоеНазваниеКомпании		= парамЭмбоссируемоеНазваниеКомпании;
	парамСтрока.КодовоеСлово_пароль					= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо).Фамилия;
	парамСтрока.КодВторогоДокумента					= СтруктураВторогоДокумента.ДокументКод;
	парамСтрока.СерияВторогоДокумента				= "";
	парамСтрока.НомерВторогоДокумента				= СтруктураВторогоДокумента.ДокументНомер;
	парамСтрока.ДатаВыдачиВторогоДокумента			= Дата('00010101');
	парамСтрока.КемВыданВторойДокумент				= "";
	парамСтрока.ОсновнойДоход						= СтруктураРабочегоМеста.ОсновнойДоход;
	парамСтрока.ТипКарты							= парамТипБанковскихКарт;
	//парамСтрока.ДатаПриемаНаРаботу					= СтруктураРабочегоМеста.ДатаПриемаНаРаботу;
	парамСтрока.Должность							= СтруктураРабочегоМеста.КодДолжности;
	парамСтрока.СерияОМС							= СтруктураДокументаОМС.ДокументСерия; 
	парамСтрока.НомерОМС                            = СтруктураДокументаОМС.ДокументНомер;
	парамСтрока.СНИЛС								= Справочники.ФизическиеЛица.НайтиПоНаименованию(парамСтрока.ФизическоеЛицо).СтраховойНомерПФР;
	парамСтрока.СерияОМС							= СтруктураДокументаОМС.ДокументСерия;
	парамСтрока.НомерОМС							= СтруктураДокументаОМС.ДокументНомер;
	
	ЗаполнитьОрганВыдачиДокумента(парамСтрока.КодВторогоДокумента, парамСтрока.КемВыданВторойДокумент);
	
КонецПроцедуры
//aliega 07.02.2019------------------------------------------


&НаСервере
Функция ПолучитьПечатнуюФормуРеестраНаВыпускБанковскихКарт(парамИмяПараметровПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = парамИмяПараметровПечати;
	
	Макет = ПолучитьМакетНаСервере("МакетРеестрНаВыпускБанковскихКарт");
	
	ОбластьМакетаВерх	= Макет.ПолучитьОбласть("ОбластьВерх");
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьМакетаСтрока	= Макет.ПолучитьОбласть("ОбластьСтрока");
	ОбластьМакетаНиз	= Макет.ПолучитьОбласть("ОбластьНиз");
	
	ОбластьМакетаВерх.Параметры.ДатаДоговора			= Формат(Объект.ЗарплатныйПроект.ДатаДоговора, Объект.мФорматДаты5);
	ОбластьМакетаВерх.Параметры.НомерДоговора			= СокрЛП(Объект.ЗарплатныйПроект.НомерДоговора);
	ОбластьМакетаВерх.Параметры.НаименованиеОрганизации	= Объект.СокращенноеНаименованиеОрганизации;
	ОбластьМакетаВерх.Параметры.ИНН						= СокрЛП(Объект.ИНН);
	ОбластьМакетаВерх.Параметры.УНК						= СокрЛП(Объект.УНК);
	ОбластьМакетаВерх.Параметры.КодСЗП					= СокрЛП(Объект.КодСЗП);
	
	ТабДокумент.Вывести(ОбластьМакетаВерх);
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	Для Каждого ТекСтрока Из Объект.РеестрНаВыпускБанковскихКарт Цикл
		
		ОбластьМакетаСтрока.Параметры.НомерСтроки	= Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов);
		ОбластьМакетаСтрока.Параметры.ФИОСотрудника	= ТекСтрока.Фамилия + " " + ТекСтрока.Имя + " " + ТекСтрока.Отчество;
		ОбластьМакетаСтрока.Параметры.Должность		= ТекСтрока.НаименованиеДолжности;
		ОбластьМакетаСтрока.Параметры.СтажРаботы	= ПолучитьКодСтажаРаботы(ПолучитьРабочееМестоФизическогоЛица(ТекСтрока.ФизическоеЛицо, Объект.Организация, Объект.ДатаРеестраРаботниковДляОбъявления).ДатаПриемаНаРаботу, Объект.ДатаРеестраНаВыпускБанковскихКарт);
		ОбластьМакетаСтрока.Параметры.Доход			= Формат(ТекСтрока.ОсновнойДоход, Объект.мФорматСуммыСПробелами);
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
	КонецЦикла;
	
	ОбластьМакетаНиз.Параметры.ДатаРеестра		= Формат(Объект.ДатаРеестраНаВыпускБанковскихКарт, Объект.мФорматДаты5);
	ОбластьМакетаНиз.Параметры.ФИОБухгалтера	= ПолучитьФамилиюИОФизическогоЛица(Объект.Бухгалтер);
	ОбластьМакетаНиз.Параметры.ФИОРуководителя	= ПолучитьФамилиюИОФизическогоЛица(Объект.Руководитель);
	
	ТабДокумент.Вывести(ОбластьМакетаНиз);
	
	Возврат ТабДокумент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораБанковскихКарт()
	
	ТипыБанковскихКарт = ПолучитьСписокТиповБанкоскихКарт();
	Для Каждого СтрокаСЗ Из ТипыБанковскихКарт Цикл
		Элементы.ТипБанковскихКарт.СписокВыбора.Добавить(СтрокаСЗ.Значение, СтрокаСЗ.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТиповБанкоскихКарт()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("MIRMK_MIRUI",						"Неименная Мультикарта МИР");
	СписокВозврата.Добавить("MIR_Multicarta_Salary",			"MIR Multicard");
	СписокВозврата.Добавить("MIR_PrivilegeMK_SUPREME_Salary",	"Mir Supreme Привилегия");
	СписокВозврата.Добавить("MIRMA_Salary",						"Кобейдж МИР-Maestro Salary для участников зарплатного проекта");
	СписокВозврата.Добавить("MIRMAPS",							"Привилегия МК Кобейдж Мир-Маэстро Зарплатная");
	СписокВозврата.Добавить("MIR_PRIVILEGEMK_TR_Salary",		"МИР Привилегия Мультикарта c ТП Тройка для зарплатных клиентов");
	СписокВозврата.Добавить("VISAMK_VCIM",						"Неименная Мультикарта Visa");
	СписокВозврата.Добавить("Visa_Multicarta_Salary",			"Visa Multicard");
	СписокВозврата.Добавить("VISA_Sign_Multicard_sal",			"Visa Signature Мультикарта Sal");
	СписокВозврата.Добавить("V_Multicard_TR_SAL",				"Visa Мультикарта Тройка_Salary");
	СписокВозврата.Добавить("V_Signature_TR_SAL",				"Visa Signature Тройка_Salary");
	СписокВозврата.Добавить("MCMK_MUI",							"Неименная Мультикарта MasterCard");
	СписокВозврата.Добавить("MC_Multicarta_Salary",				"MasterCard Multicard");
	СписокВозврата.Добавить("MC_Multicard_TR_SAL",				"MasterCard Мультикарта Тройка_Salary");
	СписокВозврата.Добавить("MC_BE_TR_SAL",						"MasterCard Black Edition Тройка_Salary");
	
	Возврат СписокВозврата;
	
КонецФункции

#КонецОбласти                                                                                                                                                                                                                                                         	

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РЕЕСТРА РАБОТНИКОВ ДЛЯ ОБЪЯВЛЕНИЯ
#Область ФункцииРеестраРаботниковДляОбъявления

&НаСервере
Функция ПолучитьНомерРеестраРаботниковДляОбъявления()
	
	Возврат ПолучитьСледующийНомер("НомерРеестраРаботниковДляОбъявления", Объект.Организация, Объект.ДатаРеестраРаботниковДляОбъявления);
	
КонецФункции

&НаСервере
Процедура СформироватьИмяФайлаРеестраРаботниковДляОбъявления()
	
	Объект.ИмяФайлаРеестраРаботниковДляОбъявления = ПолучитьИмяФайлаРеестраРаботниковДляОбъявления(Объект.НомерРеестраРаботниковДляОбъявления);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаРеестраРаботниковДляОбъявления(парамНомерРеестра)
	
	Возврат
	"sot" +
	Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов) +
	".txt";
	
КонецФункции

&НаСервере
Функция СформироватьФайлРеестраРаботниковДляОбъявления()
	
	СтрокиРеестра = СформироватьСтрокиРеестраРаботниковДляОбъявления(Объект.РеестрРаботниковДляОбъявления);
	
	Возврат СтрокиРеестра;
	
КонецФункции

&НаСервере
Функция СформироватьСтрокиРеестраРаботниковДляОбъявления(парамТаблица)
	
	Результат = "";
	
	Для Каждого ТекСтрока Из парамТаблица Цикл
		
		Результат = Результат +
		СокрЛП(ТекСтрока.ТабельныйНомер) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.ФИО) +
		Объект.мСимволРазделитель +
		СокрЛП(ТекСтрока.СтатусРаботника) +
		Объект.мСимволРазделитель +
		ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) +
		Объект.мСимволРазделитель +
		Формат(ТекСтрока.СрокДействия, Объект.мФорматДаты2) +
		Объект.мСимволРазделитель +
		"stop" +
		Объект.мСимволРазделитель +
		Объект.мСимволНоваяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПравильностьЗаполненияРеестраРаботниковДляОбъявления(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаРеестраРаботниковДляОбъявления) Тогда
		Сообщить("Не указана дата реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерРеестраРаботниковДляОбъявления) Тогда
		Сообщить("Не указан номер реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаРеестраРаботниковДляОбъявления) Тогда
		Сообщить("Не указано имя файла для записи реестра.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РеестрРаботниковДляОбъявления Цикл
		
		Если ПустаяСтрока(ТекСтрока.ТабельныйНомер) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан табельный номер.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ТабельныйНомер) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в табельном номере присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.ФИО) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано ФИО работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.ФИО) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в ФИО работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.СтатусРаботника) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан статус работника.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.СтатусРаботника) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в статусе работника присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.НомерЛицевогоСчета <> ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " неверно заполнен номер лицевого счета (карты).", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.СтатусРаботника) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере лицевого счета (карты) присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СрокДействия) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан срок действия.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеестрРаботниковДляОбъявления(парамОрганизация, парамЗарплатныйПроект, парамПериод) Экспорт
	
	Объект.РеестрРаботниковДляОбъявления.Очистить();
	
	СписокФизическихЛиц = ПолучитьСписокРаботников(парамОрганизация, парамПериод);
	
	Для Каждого ТекЗначение Из СписокФизическихЛиц Цикл
		
		Если Не ПустаяСтрока(ПолучитьНомерЛицевогоСчетаФизическогоЛица(ТекЗначение.Значение, парамОрганизация, парамЗарплатныйПроект)) Тогда
			
			НоваяСтрока = Объект.РеестрРаботниковДляОбъявления.Добавить();
			
			НоваяСтрока.ФизическоеЛицо = ТекЗначение.Значение;
			
			ЗаполнитьДанныеСтрокиРеестраРаботниковДляОбъявления(НоваяСтрока, парамОрганизация, парамЗарплатныйПроект, парамПериод);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиРеестраРаботниковДляОбъявления(Знач парамСтрока, парамОрганизация, парамЗарплатныйПроект, парамПериод) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрРаботниковДляОбъявления[парамСтрока - 1];
	КонецЕсли;
	
	СтруктураРабочегоМеста = ПолучитьРабочееМестоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамПериод);
	
	парамСтрока.ТабельныйНомер		= Прав(СокрЛП(СтруктураРабочегоМеста.ТабельныйНомер), 32);
	парамСтрока.ФИО					= ПолучитьФамилиюИмяОтчествоФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.СтатусРаботника		= СтруктураРабочегоМеста.СтатусРаботника;
	парамСтрока.НомерЛицевогоСчета	= ПолучитьНомерЛицевогоСчетаФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект);
	парамСтрока.СрокДействия		= ДобавитьМесяц(парамПериод, 36);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РЕЕСТРА ДЛЯ ЗАГРУЗКИ ДАННЫХ БАНКОВСКИХ КАРТ
#Область ФункцииРеестраДляЗагрузкиДанныхБанковскихКарт

&НаСервере
Процедура ЗагрузитьФайлРеестраДляЗагрузкиДанныхБанковскихКарт(парамОрганизация, парамБанк, парамЗарплатныйПроект)
	
	Для Каждого ТекСтрока Из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
		
		СтруктураОбъявленияЛицевогоСчета = ПолучитьСтруктуруОбъявленияЛицевогоСчетаФизическогоЛица(ТекСтрока.ФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект, ТекущаяДата());
		
		Если ЗначениеЗаполнено(СтруктураОбъявленияЛицевогоСчета) И ЗначениеЗаполнено(СтруктураОбъявленияЛицевогоСчета.Регистратор) Тогда
			
			ЗаявкаНаОткрытиеСчетов = СтруктураОбъявленияЛицевогоСчета.Регистратор.ПолучитьОбъект();
			
			СтрокаДанных = ЗаявкаНаОткрытиеСчетов.Сотрудники[СтруктураОбъявленияЛицевогоСчета.НомерСтроки - 1];
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Организация.Установить(парамОрганизация);
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ТекСтрока.ФизическоеЛицо);
			
			Если ЗначениеЗаполнено(Объект.ЗарплатныйПроект) Тогда
				НаборЗаписей.Отбор.ЗарплатныйПроект.Установить(парамЗарплатныйПроект);
			Иначе
				НаборЗаписей.Отбор.Банк.Установить(парамБанк);
			КонецЕсли;
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			ПервичныйДокументЗаявка = Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.СоздатьДокумент();
			
			ПервичныйДокументЗаявка.Дата				= ТекущаяДата();
			ПервичныйДокументЗаявка.Организация			= парамОрганизация;
			ПервичныйДокументЗаявка.ЗарплатныйПроект	= парамЗарплатныйПроект;
			ПервичныйДокументЗаявка.Комментарий			= "Документ создан автоматически при загрузке данных из Банка";
			
			СтрокаДанных = ПервичныйДокументЗаявка.Сотрудники.Добавить();
			
			СтрокаДанных.ФизическоеЛицо = ТекСтрока.ФизическоеЛицо;
			
			ПервичныйДокументЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗаявкаНаОткрытиеСчетов = Документы.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.СоздатьДокумент();
			
			ЗаявкаНаОткрытиеСчетов.Дата						= ТекущаяДата();
			ЗаявкаНаОткрытиеСчетов.Организация				= парамОрганизация;
			ЗаявкаНаОткрытиеСчетов.ЗарплатныйПроект			= парамЗарплатныйПроект;
			ЗаявкаНаОткрытиеСчетов.ПервичныйДокумент		= ПервичныйДокументЗаявка.Ссылка;
			ЗаявкаНаОткрытиеСчетов.Комментарий				= "Документ создан автоматически при загрузке данных из Банка";
			
			СтрокаДанных = ЗаявкаНаОткрытиеСчетов.Сотрудники.Добавить();
			
			СтрокаДанных.ФизическоеЛицо = ТекСтрока.ФизическоеЛицо;
			
		КонецЕсли;
		
		ЗаявкаНаОткрытиеСчетов.МесяцОткрытия	= НачалоМесяца(ТекущаяДата());
		СтрокаДанных.НомерЛицевогоСчета			= УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.НомерЛицевогоСчета);
		СтрокаДанных.РезультатОткрытияСчета		= Перечисления.РезультатыОткрытияЛицевыхСчетовСотрудников.СчетОткрыт;
		
		ЗаявкаНаОткрытиеСчетов.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравильностьЗаполненияРеестраДляЗагрузкиДанныхБанковскихКарт(Отказ)
	
	Для Каждого ТекСтрока Из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
		
		Если ПустаяСтрока(ТекСтрока.ФизическоеЛицо) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указано физическое лицо.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрока.НомерЛицевогоСчета <> ПривестиНомерСчета(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " неверно заполнен номер лицевого счета (карты).", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(ТекСтрока.НомерЛицевогоСчета) Тогда
			Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " в номере лицевого счета (карты) присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


//rarus masi выделяем процедуру загрузки на клиента
&НаКлиенте
Процедура ЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКартНаКлиенте()
	
	парамфайл = Объект.ИмяФайлаДляЗагрузкиДанныхБанковскихКарт;
	
	ФайлРеестра = Новый ТекстовыйДокумент;
	
	ФайлРеестра.Прочитать(парамФайл, Объект.мКодировка);
	
	МассивДанныхПолуч = Новый Массив; 
	
	Для  Ном = 1 По ФайлРеестра.КоличествоСтрок() Цикл
		
		МассивДанных = РазложитьСтрокуВМассивПодстрок(ФайлРеестра.ПолучитьСтроку(Ном), Объект.мСимволРазделитель);
		
		//НоваяСтрока = Объект.РеестрДляЗагрузкиДанныхБанковскихКарт.Добавить();
		
		Попытка
			
			СтруктураДанных = Новый Структура; 
			СтруктураДанных.Вставить("НомерКлиента", СокрЛП(МассивДанных[0]));
			СтруктураДанных.Вставить("КороткоеИмяКлиента", СокрЛП(МассивДанных[1]));
			СтруктураДанных.Вставить("СерияИНомерПаспорта", СокрЛП(МассивДанных[2]));
			СтруктураДанных.Вставить("НомерЛицевогоСчета", СокрЛП(МассивДанных[3]));
			
			СтруктураДанных.Вставить("КодВалюты", СокрЛП(МассивДанных[4]));
			СтруктураДанных.Вставить("Фамилия", СокрЛП(МассивДанных[5]));
			СтруктураДанных.Вставить("Имя", СокрЛП(МассивДанных[6]));
			
			СтруктураДанных.Вставить("Отчество", СокрЛП(МассивДанных[7]));
			СтруктураДанных.Вставить("ЭмбоссируемоеИмя", СокрЛП(МассивДанных[8]));
			СтруктураДанных.Вставить("ЭмбоссируемаяФамилия", СокрЛП(МассивДанных[9]));
			
			
			СтруктураДанных.Вставить("Обращение", СокрЛП(МассивДанных[10]));
			СтруктураДанных.Вставить("КодТПКарты", СокрЛП(МассивДанных[11]));
			СтруктураДанных.Вставить("КодТПДоставкиКарты", СокрЛП(МассивДанных[12]));
			Если (СокрЛП(МассивДанных[13])= "stop") Тогда
				СтруктураДанных.Вставить("БИК", "");
			Иначе СтруктураДанных.Вставить("БИК", СокрЛП(МассивДанных[13]));
			КонецЕсли;
			
			
			
			
			
			
			МассивДанныхПолуч.Добавить(СтруктураДанных);
			
			
			
			
			
			
			//НоваяСтрока.НомерКлиента			= СокрЛП(МассивДанных[0]);
			//НоваяСтрока.КороткоеИмяКлиента		= СокрЛП(МассивДанных[1]);
			//НоваяСтрока.СерияИНомерПаспорта		= СокрЛП(МассивДанных[2]);
			//НоваяСтрока.НомерЛицевогоСчета		= СокрЛП(МассивДанных[3]);
			//НоваяСтрока.КодВалюты				= СокрЛП(МассивДанных[4]);
			//НоваяСтрока.Фамилия					= СокрЛП(МассивДанных[5]);
			//НоваяСтрока.Имя						= СокрЛП(МассивДанных[6]);
			//НоваяСтрока.Отчество				= СокрЛП(МассивДанных[7]);
			//НоваяСтрока.ЭмбоссируемоеИмя		= СокрЛП(МассивДанных[8]);
			//НоваяСтрока.ЭмбоссируемаяФамилия	= СокрЛП(МассивДанных[9]);
			//НоваяСтрока.Обращение				= СокрЛП(МассивДанных[10]);
			//НоваяСтрока.КодТПКарты				= СокрЛП(МассивДанных[11]);
			//НоваяСтрока.КодТПДоставкиКарты		= СокрЛП(МассивДанных[12]);
		Исключение
		КонецПопытки;
		
		//НоваяСтрока.ФизическоеЛицо = ПолучитьФизическоеЛицо(НоваяСтрока.Фамилия, НоваяСтрока.Имя, НоваяСтрока.Отчество, НоваяСтрока.СерияИНомерПаспорта, парамОрганизация, парамПериод);
		
	КонецЦикла;
	
	
	ЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКартНаСервере(МассивДанныхПолуч);
	
	
	
	
	
	//МассивДанных = Новый Массив; 
	//
	//Для НомерНачальнойСтроки = 2 по ПоследняяСтрока цикл
	//	
	//	СтруктураДанных = Новый Структура; 
	//	СтруктураДанных.Вставить("ТабельныйНомер", СокрЛП(Лист.Cells(НомерНачальнойСтроки, 1).Text));
	//	СтруктураДанных.Вставить("Процент", СокрЛП(Лист.Cells(НомерНачальнойСтроки, 2).Value));
	//	СтруктураДанных.Вставить("Сумма", СокрЛП(Лист.Cells(НомерНачальнойСтроки, 3).Value));
	//	СтруктураДанных.Вставить("ВидОплаты", СокрЛП(Лист.Cells(НомерНачальнойСтроки, 4).Text));
	//		
	//	МассивДанных.Добавить(СтруктураДанных);
	//	
	//КонецЦикла;
	
	Для каждого элемент из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
		Если ЗначениеЗаполнено(элемент.БИКМастерСчетаМодуль) Тогда
			Элементы.ФормаПроверитьСоответсвиеБИК.Видимость = Истина;
		Иначе Элементы.ФормаПроверитьСоответсвиеБИК.Видимость = Ложь; 
		КонецЕсли;
	КонецЦикла;
	
	
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьБИК(Команда)
	
	ЗагрузитьБИКНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьБИКНаСервере()	
	
	//Для каждого элемент из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
	//	Если Не ЗначениеЗаполнено(элемент.БИКМастерСчетаБаза) Тогда
	//		ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ФИО", СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя) + " " + СокрЛП(Элемент.Отчество));
	//		ФизЛицо = ФизЛицо.ПолучитьОбъект();
	//		Добавить = ФизЛицо.ДополнительныеРеквизиты.Добавить();
	//		Добавить.Свойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "БИКМастерСчета");
	//		Добавить.Значение	= Элемент.БИКМастерСчетаМодуль;
	//		Добавить.ТекстоваяСтрока = Элемент.БИКМастерСчетаМодуль;
	//		ФизЛицо.Записать();
	//		Элемент.БИКМастерСчетаБаза = Элемент.БИКМастерСчетаМодуль; 
	//	КонецЕсли;
	//КонецЦикла;
	
	
	Для каждого элемент из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
		Если Не ЗначениеЗаполнено(элемент.БИКМастерСчетаБаза) И ЗначениеЗаполнено(элемент.БИКМастерСчетаМодуль) Тогда
			ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ФИО", СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя) + " " + СокрЛП(Элемент.Отчество));
			ФизЛицо = ФизЛицо.ПолучитьОбъект();
			Добавить = ФизЛицо.ДополнительныеРеквизиты.Добавить();
			Добавить.Свойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "БИКМастерСчета");
			Добавить.Значение	= Элемент.БИКМастерСчетаМодуль;
			Добавить.ТекстоваяСтрока = Элемент.БИКМастерСчетаМодуль;
			ФизЛицо.Записать();
			Элемент.БИКМастерСчетаБаза = Элемент.БИКМастерСчетаМодуль; 
		КонецЕсли;
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(элемент.БИКМастерСчетаБаза) И ЗначениеЗаполнено(элемент.БИКМастерСчетаМодуль)) И (элемент.БИКМастерСчетаБаза <> элемент.БИКМастерСчетаМодуль) Тогда
		ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ФИО", СокрЛП(Элемент.Фамилия) + " " + СокрЛП(Элемент.Имя) + " " + СокрЛП(Элемент.Отчество));
		ФизЛицо = ФизЛицо.ПолучитьОбъект();
		Добавить = ФизЛицо.ДополнительныеРеквизиты.Добавить();
		Добавить.Свойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "БИКМастерСчета");
		Добавить.Значение	= Элемент.БИКМастерСчетаМодуль;
		Добавить.ТекстоваяСтрока = Элемент.БИКМастерСчетаМодуль;
		ФизЛицо.Записать();
		Элемент.БИКМастерСчетаБаза = Элемент.БИКМастерСчетаМодуль; 
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидДоходаПриИзменении(Элемент)
	Для Каждого ТекСтрока из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
		ТекСтрока.ВидДохода = Объект.ВидДохода;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КодСМСПриИзменении(Элемент)
	Для Каждого ТекСтрока из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
		ТекСтрока.КодСМС = Объект.КодСМС;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКартНаСервере(МассивДанных)
	
	//МассивДанныхПолуч = новый Массив;
	
	Объект.РеестрДляЗагрузкиДанныхБанковскихКарт.Очистить();	
	
	Для нн=0 по МассивДанных.Количество()-1 цикл
		
		НоваяСтрока = Объект.РеестрДляЗагрузкиДанныхБанковскихКарт.Добавить();
		
		
		Попытка
			НоваяСтрока.НомерКлиента			= СокрЛП(МассивДанных[нн].НомерКлиента);
			НоваяСтрока.КороткоеИмяКлиента		= СокрЛП(МассивДанных[нн].КороткоеИмяКлиента);
			НоваяСтрока.СерияИНомерПаспорта		= СокрЛП(МассивДанных[нн].СерияИНомерПаспорта);
			НоваяСтрока.НомерЛицевогоСчета		= СокрЛП(МассивДанных[нн].НомерЛицевогоСчета);
			НоваяСтрока.КодВалюты				= СокрЛП(МассивДанных[нн].КодВалюты);
			НоваяСтрока.Фамилия					= СокрЛП(МассивДанных[нн].Фамилия);
			НоваяСтрока.Имя						= СокрЛП(МассивДанных[нн].Имя);
			НоваяСтрока.Отчество				= СокрЛП(МассивДанных[нн].Отчество);
			НоваяСтрока.ЭмбоссируемоеИмя		= СокрЛП(МассивДанных[нн].ЭмбоссируемоеИмя);
			НоваяСтрока.ЭмбоссируемаяФамилия	= СокрЛП(МассивДанных[нн].ЭмбоссируемаяФамилия);
			НоваяСтрока.Обращение				= СокрЛП(МассивДанных[нн].Обращение);
			НоваяСтрока.КодТПКарты				= СокрЛП(МассивДанных[нн].КодТПКарты);
			НоваяСтрока.КодТПДоставкиКарты		= СокрЛП(МассивДанных[нн].КодТПДоставкиКарты);
			НоваяСтрока.БИКМастерСчетаМодуль	= СокрЛП(МассивДанных[нн].БИК);
			
		Исключение
		КонецПопытки;
		
		
		
		НоваяСтрока.ФизическоеЛицо = ПолучитьФизическоеЛицо(НоваяСтрока.Фамилия, НоваяСтрока.Имя, НоваяСтрока.Отчество, НоваяСтрока.СерияИНомерПаспорта, Объект.Организация, ТекущаяДата());
		НоваяСтрока.БИКМастерСчетаБаза = ПолучитьБИК(НоваяСтрока.Фамилия, НоваяСтрока.Имя, НоваяСтрока.Отчество, НоваяСтрока.БИКМастерСчетаМодуль);
		
		Для Каждого Элемент из Объект.РеестрДляЗагрузкиДанныхБанковскихКарт Цикл
			
			Если ЗначениеЗаполнено(Элемент.БИКМастерСчетаБаза) И (Элемент.БИКМастерСчетаБаза <> Элемент.БИКМастерСчетаМодуль) Тогда
				Сообщить("Обратите внимание, что в строке " + Формат(Элемент.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " имеющиеся данные по БИК в базе, отличаются от данных загруженного реестра!");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	
//

//masi старый вариант процедуры
&НаСервере
Процедура ЗаполнитьРеестрДляЗагрузкиДанныхБанковскихКарт(парамФайл, парамОрганизация, парамПериод) Экспорт
	
	Объект.РеестрДляЗагрузкиДанныхБанковскихКарт.Очистить();
	
	ФайлРеестра = Новый ТекстовыйДокумент;
	
	ФайлРеестра.Прочитать(парамФайл, Объект.мКодировка);
	
	Для  Ном = 1 По ФайлРеестра.КоличествоСтрок() Цикл
		
		МассивДанных = РазложитьСтрокуВМассивПодстрок(ФайлРеестра.ПолучитьСтроку(Ном), Объект.мСимволРазделитель);
		
		НоваяСтрока = Объект.РеестрДляЗагрузкиДанныхБанковскихКарт.Добавить();
		
		Попытка
			НоваяСтрока.НомерКлиента			= СокрЛП(МассивДанных[0]);
			НоваяСтрока.КороткоеИмяКлиента		= СокрЛП(МассивДанных[1]);
			НоваяСтрока.СерияИНомерПаспорта		= СокрЛП(МассивДанных[2]);
			НоваяСтрока.НомерЛицевогоСчета		= СокрЛП(МассивДанных[3]);
			НоваяСтрока.КодВалюты				= СокрЛП(МассивДанных[4]);
			НоваяСтрока.Фамилия					= СокрЛП(МассивДанных[5]);
			НоваяСтрока.Имя						= СокрЛП(МассивДанных[6]);
			НоваяСтрока.Отчество				= СокрЛП(МассивДанных[7]);
			НоваяСтрока.ЭмбоссируемоеИмя		= СокрЛП(МассивДанных[8]);
			НоваяСтрока.ЭмбоссируемаяФамилия	= СокрЛП(МассивДанных[9]);
			НоваяСтрока.Обращение				= СокрЛП(МассивДанных[10]);
			НоваяСтрока.КодТПКарты				= СокрЛП(МассивДанных[11]);
			НоваяСтрока.КодТПДоставкиКарты		= СокрЛП(МассивДанных[12]);
		Исключение
		КонецПопытки;
		
		НоваяСтрока.ФизическоеЛицо = ПолучитьФизическоеЛицо(НоваяСтрока.Фамилия, НоваяСтрока.Имя, НоваяСтрока.Отчество, НоваяСтрока.СерияИНомерПаспорта, парамОрганизация, парамПериод);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтрокиРеестраДанныхБанковскихКарт(Знач парамСтрока, парамОрганизация, парамЗарплатныйПроект, парамПериод) Экспорт
	
	Если ТипЗнч(парамСтрока) = Тип("Число") Тогда
		парамСтрока = Объект.РеестрДляЗагрузкиДанныхБанковскихКарт[парамСтрока - 1];
	КонецЕсли;
	
	СтруктураРабочегоМеста	= ПолучитьРабочееМестоФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамПериод);
	СтруктураПаспорта		= ПолучитьПаспортныеДанныеФизическогоЛица(парамСтрока.ФизическоеЛицо, парамПериод);
	СтруктураФИО			= ПолучитьСтруктуруФИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	
	парамСтрока.НомерКлиента			= СтруктураРабочегоМеста.ТабельныйНомер;
	парамСтрока.КороткоеИмяКлиента		= ПолучитьФамилиюИОФизическогоЛица(парамСтрока.ФизическоеЛицо);
	парамСтрока.СерияИНомерПаспорта		= СтруктураПаспорта.ДокументСерия + " " + СтруктураПаспорта.ДокументНомер;
	парамСтрока.НомерЛицевогоСчета		= ПолучитьНомерЛицевогоСчетаФизическогоЛица(парамСтрока.ФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект);
	парамСтрока.КодВалюты				= "810";
	парамСтрока.Фамилия					= СтруктураФИО.Фамилия;
	парамСтрока.Имя						= СтруктураФИО.Имя;
	парамСтрока.Отчество				= СтруктураФИО.Отчество;
	парамСтрока.ЭмбоссируемоеИмя		= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Имя);
	парамСтрока.ЭмбоссируемаяФамилия	= ПолучитьСтрокуНаЛатинском(СтруктураФИО.Фамилия);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляЗагрузкиЛицевыхСчетовДляМассПеймент

&НаСервере
Функция ПолучитьСписокФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.ФИО КАК ФИО,
	|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура КнопкаЗаполнитьЗагрузкаРасчетныхСчетовДляМассПейментНаСервере(ВременноеХранилище)
	
	//ДвоичныеДанные 	= ПолучитьИзВременногоХранилища(ВременноеХранилище);
	//Путь 			= ПолучитьИмяВременногоФайла();
	//ДвоичныеДанные.Записать(Путь);
	//
	//Попытка
	//	Excel = Новый COMОбъект("Excel.Application");
	//	Excel.WorkBooks.Open(Путь);
	//Исключение
	//	Сообщить("Ошибка при открытии файла с помощью Excel");
	//КонецПопытки;
	//
	//Попытка
	//	//Открываем необходимый лист
	//	Excel.Sheets(1).Select(); // лист 1, по умолчанию
	//Исключение
	//	//Закрываем Excel
	//	Excel.ActiveWorkbook.Close();
	//	Excel = 0;
	//	Сообщить("Файл " + Объект.ИмяФайлаДляЗагрузкиРасчетныхСчетовДляМассПеймент + " не соответствует необходимому формату! Первый лист не найден!");
	//	Возврат;
	//КонецПопытки;
	//
	////Получим количество строк и колонок.
	////В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	//Версия = Лев(Excel.Version, Найти(Excel.Version,".") - 1);
	//Если Версия = "8" Тогда
	//	ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
	//	ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	//Иначе
	//	ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
	//	ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
	//КонецЕсли;
	//
	//МассивВозврата = Новый Массив;
	//
	//Попытка 			
	//	Для Сч = 2 По ФайлСтрок Цикл
	//		Если НЕ СокрЛП(Excel.Cells(Сч, 1).Value) = ""  Тогда
	//			
	//			СтруктураВозврата = Новый Структура;
	//			СтруктураВозврата.Вставить("ФИО", СокрЛП(Excel.Cells(Сч, 1).Text));
	//			СтруктураВозврата.Вставить("ДатаРождения", Дата(СокрЛП(Excel.Cells(Сч, 2).Value)));
	//			СтруктураВозврата.Вставить("РасчетныйСчет", СокрЛП(Excel.Cells(Сч, 3).Text));
	//			СтруктураВозврата.Вставить("БИК", СокрЛП(Excel.Cells(Сч, 4).Text));
	//			
	//			МассивВозврата.Добавить(СтруктураВозврата);	
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//Исключение
	//	Excel.ActiveWorkbook.Close();
	//	Excel.Quit();
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//Excel.Quit();
	//ЗаполнитьМассПеймент(МассивВозврата);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМассПеймент(МассивВход)
	
	ТаблицаФизЛиц = ПолучитьСписокФизЛиц();
	
	Для Каждого СтрокаТЗ Из МассивВход Цикл				
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДатаРождения", СтрокаТЗ.ДатаРождения);
		ПараметрыОтбора.Вставить("ФИО", СтрокаТЗ.ФИО); 
		
		СтрокиОтбора = ТаблицаФизЛиц.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(СтрокиОтбора) Тогда
			
			НоваяСтрока 				= Объект.ФизЛицаИзЕксел.Добавить();
			НоваяСтрока.ФизЛицо 		= СтрокиОтбора[0].Ссылка;
			НоваяСтрока.РасчетныйСчет	= СтрокаТЗ.РасчетныйСчет;
			НоваяСтрока.БИК 			= СтрокаТЗ.БИК;
			
		Иначе
			Сообщить("Физ. лицо: " + СтрокаТЗ.ФИО + " не найден(а)");
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура КнопкаЗаполнитьЗагрузкаРасчетныхСчетовДляМассПеймент(Команда)
	
	ДвоичДанные 		= Новый ДвоичныеДанные(Объект.ИмяФайлаДляЗагрузкиРасчетныхСчетовДляМассПеймент);
	ВременноеХранилище	= ПоместитьВоВременноеХранилище(ДвоичДанные);
	
	Объект.ФизЛицаИзЕксел.Очистить();
	КнопкаЗаполнитьЗагрузкаРасчетныхСчетовДляМассПейментНаСервере(ВременноеХранилище);
	
КонецПроцедуры

&НаСервере
Функция СформироватьАвтоНаименование(Справочник, СтрокаТаблицы, Знач Текст = "")
	
	НомерСчетаТекущий = СокрЛП(Справочник.НомерСчета);
	
	СтрокаНаименования = "";
	Если ЗначениеЗаполнено(СтрокаТаблицы.БИК) Тогда
		СтрокаНаименования = Строка(СтрокаТаблицы.БИК);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Справочник.Банк) Тогда
		СтрокаНаименования = ?(ПустаяСтрока(СтрокаНаименования), "", СтрокаНаименования + ", ") + СокрЛП(Справочник.Банк);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Справочник.НомерСчета) Тогда
		СтрокаНаименования = ?(ПустаяСтрока(СтрокаНаименования), "", СтрокаНаименования + ", ") + СокрЛП(Справочник.НомерСчета);
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
КонецФункции

&НаСервере
Функция СоздатьБанковскиеСчета()
	
	ТаблицаДанных	= Объект.ФизЛицаИзЕксел.Выгрузить();
	МассивБик 		= ТаблицаДанных.ВыгрузитьКолонку("БИК");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторБанков.Ссылка КАК Банк,
	|	КлассификаторБанков.Код КАК БИК
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Код В(&БИК)";
	Запрос.УстановитьПараметр("БИК", МассивБик);
	ТаблицаБик = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("БанковскийСчет");
	
	МассивФизЛиц = ТаблицаДанных.ВыгрузитьКолонку("ФизЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Владелец,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БИК
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец В(&ФизЛица)";
	Запрос.УстановитьПараметр("ФизЛица", МассивФизЛиц);
	ТаблицаБанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаДанных Цикл
		
		Попытка
			СтруктураОтбора		= Новый Структура("Владелец, НомерСчета, БИК", Строка.ФизЛицо, Строка.РасчетныйСчет, Строка.БИК);
			НовыеСправочники 	= ТаблицаБанковскиеСчета.НайтиСтроки(СтруктураОтбора);
			
			Если Не ЗначениеЗаполнено(НовыеСправочники) Тогда
				НовыйСправочник 				= Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
				НовыйСправочник.Владелец 		= Строка.ФизЛицо;
				НовыйСправочник.Банк 			= ТаблицаБик.Найти(Строка.БИК, "БИК").Банк;
				НовыйСправочник.НомерСчета 		= Строка.РасчетныйСчет;
				НовыйСправочник.Наименование	= СформироватьАвтоНаименование(НовыйСправочник, Строка);
				
				НовыйСправочник.Записать();
				Строка.БанковскийСчет 			= НовыйСправочник;
			Иначе
				Строка.БанковскийСчет 			= НовыеСправочники[0].Ссылка;	
			КонецЕсли;
			
		Исключение
			Если Не ЗначениеЗаполнено(НовыйСправочник.Владелец) Тогда
				Сообщить("Ошибка. Справочник ""Банковский счет"" не создан, не указано физическое лицо");
			ИначеЕсли Не ЗначениеЗаполнено(НовыйСправочник.Банк) Тогда
				Сообщить("Ошибка. Справочник ""Банковский счет"" для " + Строка.ФизЛицо + " не создан, не найден банк с указанным БИК");
			Иначе
				Сообщить("Ошибка. Справочник ""Банковский счет"" для " + Строка.ФизЛицо + " не создан");
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Процедура СоздатьЗаписьВРегистреСведений(СтрокаТаблицы)
	
	НаборЗаписей = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизЛицо);
	НаборЗаписей.Прочитать();
	
	Попытка
		Если ЗначениеЗаполнено(НаборЗаписей) Тогда
			НаборЗаписей[0].Вид 			= Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
			НаборЗаписей[0].МестоВыплаты 	= СтрокаТаблицы.БанковскийСчет.Ссылка;
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сотрудник 		= СтрокаТаблицы.Сотрудник;
			НоваяЗапись.ФизическоеЛицо	= СтрокаТаблицы.ФизЛицо;
			НоваяЗапись.Вид 			= Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
			НоваяЗапись.МестоВыплаты 	= СтрокаТаблицы.БанковскийСчет.Ссылка;
			
		КонецЕсли;
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Ошибка. Место выплаты для сотрудника """ + СтрокаТаблицы.Сотрудник + """ не изменено");
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура КнопкаСоздатьБанковскиеСчетаНаСервере()
	
	ТаблицаДанных = СоздатьБанковскиеСчета();
	
	МассивФизЛиц = ТаблицаДанных.ВыгрузитьКолонку("ФизЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо В(&МассивФизЛиц)";
	Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Сотрудник");
	КопияТаблицаДанных = ТаблицаДанных.Скопировать();
	
	Для каждого Строка Из КопияТаблицаДанных Цикл
		
		Сотрудники = ТаблицаСотрудников.НайтиСтроки(Новый Структура("ФизическоеЛицо", Строка.ФизЛицо));
		Если Сотрудники.Количество() = 1 Тогда
			
			Строка.Сотрудник = Сотрудники[0].Ссылка;
			СоздатьЗаписьВРегистреСведений(Строка);
			
		ИначеЕсли Сотрудники.Количество() > 1 Тогда
			
			Строка.Сотрудник = Сотрудники[0].Ссылка;
			СоздатьЗаписьВРегистреСведений(Строка);
			
			Для Сч = 1 По Сотрудники.Количество() - 1 Цикл
				НоваяСтрока 				= ТаблицаДанных.Добавить();
				НоваяСтрока.БИК 			= Строка.БИК;
				НоваяСтрока.БанковскийСчет	= Строка.БанковскийСчет;
				НоваяСтрока.РасчетныйСчет 	= Строка.РасчетныйСчет;
				НоваяСтрока.ФизЛицо 		= Строка.ФизЛицо;
				НоваяСтрока.Сотрудник 		= Сотрудники[Сч].Ссылка;
				СоздатьЗаписьВРегистреСведений(НоваяСтрока);
			КонецЦикла;
			
		Иначе
			Сообщить("Ошибка. Справочник сотрудника для физ.лица """ + Строка.ФизЛицо + """ не найден");
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Операция завершена!");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСимволСтроки(Строка, Индекс)
	Возврат Сред(Строка, Индекс, 1);
КонецФункции

&НаСервере
Функция ПроверитьНомерСчета(НомерСчета, БИК)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Бик) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Стр = ПолучитьСимволСтроки(БИК, 7) + ПолучитьСимволСтроки(БИК, 8) + ПолучитьСимволСтроки(БИК, 9) + НомерСчета;
	МассивВесов = Новый Массив;
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(3);
	
	МассивВесов.Добавить(7);
	МассивВесов.Добавить(1);
	
	КонтрольноеЧисло = 0;
	
	Для Сч = 1 по 23 Цикл
		КонтрольноеЧисло = КонтрольноеЧисло + Число(ПолучитьСимволСтроки(Стр, Сч)) * МассивВесов[Сч-1];
	КонецЦикла;
	
	КонтрольноеЧисло = КонтрольноеЧисло % 10;
	
	Если КонтрольноеЧисло <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции


&НаСервере
Функция ПроверитьКорректностьЗаполнения()
	
	Отказ = Ложь;
	
	Для каждого Строка из Объект.ФизЛицаИзЕксел Цикл
		Если СтрДлина(Строка.РасчетныйСчет) <> 20 Тогда
			Отказ = Истина;
			Сообщить("Ошибка. Строка №" + Строка.НомерСтроки + " некорректный номер счета. Необходимо 20 символов");
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Физлицо) Тогда
			Отказ = Истина;
			Сообщить("Ошибка. Строка №" + Строка.НомерСтроки + " поле ""Физическое лицо"" - пустое");
		ИначеЕсли СтрДлина(Строка.БИК) <> 9 Тогда
			Отказ = Истина;
			Сообщить("Ошибка. Строка №" + Строка.НомерСтроки + " некорректный БИК. Необходимо 9 символов");
		ИначеЕсли ПроверитьНомерСчета(Строка.РасчетныйСчет, Строка.БИК) Тогда
			Отказ = Истина;
			Сообщить("Ошибка. Строка №" + Строка.НомерСтроки + " некорректный номер счета или БИК");
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
КонецФункции

&НаКлиенте
Процедура КнопкаСоздатьБанковскиеСчета(Команда)
	Если Не ПроверитьКорректностьЗаполнения() Тогда
		КнопкаСоздатьБанковскиеСчетаНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВОССТАНОВЛЕНИЯ ЗНАЧЕНИЙ ОБЩИХ РЕКВИЗИТОВ
#Область ФункцииВосстановленияЗначенийОбщихРеквизитов

&НаСервере
Процедура ВосстановитьСохраненныеЗначенияПеременных()
	
	Объект.Организация				= ВосстановитьЗначение_Организация();
	Объект.ПапкаДляВыгрузкиФайлов	= ВосстановитьЗначение_ПапкаДляВыгрузкиФайлов();
	Объект.ТипБанковскихКарт		= ВосстановитьЗначение_ТипБанковскихКарт();
	Объект.КодВалюты				= ВосстановитьЗначение_КодВалюты();
	Объект.ДополнительныеУсловия	= ВосстановитьЗначение_ДополнительныеУсловия();
	Объект.ВидЗачисления			= ВосстановитьЗначение_ВидЗачисления();
	
	ВосстановитьСохраненныеЗначенияПеременныхПоОрганизации(Объект.Организация);
	
	Объект.ИННБанка					= ВосстановитьЗначение_ИННБанка(Объект.Банк);
	Объект.КурсВалюты				= ВосстановитьЗначение_КурсВалюты(Объект.КодВалюты);
	Объект.МассПеймент 				= ВосстановитьЗначениеПеременнойПоИдентификатору("МассПеймент");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеЗначенияПеременныхПоОрганизации(парамОрганизация)
	
	Объект.СокращенноеНаименованиеОрганизации	= ВосстановитьЗначение_СокращенноеНаименованиеОрганизации(парамОрганизация);
	Объект.ЭмбоссируемоеНазваниеКомпании		= ВосстановитьЗначение_ЭмбоссируемоеНазваниеКомпании(парамОрганизация);
	Объект.ИНН									= ВосстановитьЗначение_ИНН(парамОрганизация);
	Объект.НомерФинансовогоИнститута			= ВосстановитьЗначение_НомерФинансовогоИнститута(парамОрганизация);
	Объект.УНК									= ВосстановитьЗначение_УНК(парамОрганизация);
	Объект.КодОрганизации						= ВосстановитьЗначение_КодОрганизации(парамОрганизация);
	Объект.Банк									= ВосстановитьЗначение_Банк(парамОрганизация);
	Объект.ЗарплатныйПроект						= ВосстановитьЗначение_ЗарплатныйПроект(парамОрганизация);
	Объект.Бухгалтер							= ВосстановитьЗначение_Бухгалтер(парамОрганизация);
	Объект.Руководитель							= ВосстановитьЗначение_Руководитель(парамОрганизация);
	Объект.ЛицоПервойПодписи					= ВосстановитьЗначение_ЛицоПервойПодписи(парамОрганизация);
	Объект.ДолжностьЛицаПервойПодписи			= ВосстановитьЗначение_ДолжностьЛицаПервойПодписи(парамОрганизация);
	Объект.ЛицоВторойПодписи					= ВосстановитьЗначение_ЛицоВторойПодписи(парамОрганизация);
	Объект.ДолжностьЛицаВторойПодписи			= ВосстановитьЗначение_ДолжностьЛицаВторойПодписи(парамОрганизация);
	Объект.ПериодУвольненияНачало				= ВосстановитьЗначение_ПериодУвольненияНачало(парамОрганизация);
	Объект.ПериодУвольненияОкончание			= ВосстановитьЗначение_ПериодУвольненияОкончание(парамОрганизация);
	Объект.Подразделение						= ВосстановитьЗначение_Подразделение(парамОрганизация);
	Объект.КодСЗП								= ВосстановитьЗначение_КодСЗП(парамОрганизация);
	Объект.СпособИдентификации					= ВосстановитьЗначение_СпособИдентификации(парамОрганизация);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьЗначениеПеременнойПоИдентификатору(парамИдентификатор, парамРаздел = Неопределено, парамДата = Неопределено)
	
	ИдентификаторПеременной = ПолучитьИдентификаторПеременной(парамИдентификатор, парамРаздел, парамДата);
	
	Возврат ВосстановитьНастройку(ИдентификаторПеременной);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_Организация()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("Организация");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ПапкаДляВыгрузкиФайлов()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ПапкаДляВыгрузкиФайлов");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ТипБанковскихКарт()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ТипБанковскихКарт");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_КодВалюты()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("КодВалюты");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ДополнительныеУсловия()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ДополнительныеУсловия");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ВидЗачисления()
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ВидЗачисления");
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_СокращенноеНаименованиеОрганизации(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("СокращенноеНаименованиеОрганизации", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ЭмбоссируемоеНазваниеКомпании(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ЭмбоссируемоеНазваниеКомпании", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ИНН(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ИНН", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_НомерФинансовогоИнститута(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("НомерФинансовогоИнститута", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_УНК(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("УНК", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_КодОрганизации(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("КодОрганизации", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_Банк(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("Банк", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ЗарплатныйПроект(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ЗарплатныйПроект", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_Бухгалтер(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("Бухгалтер", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_Руководитель(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("Руководитель", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ИННБанка(парамБанк)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ИННБанка", парамБанк);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ЛицоПервойПодписи(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ЛицоПервойПодписи", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ДолжностьЛицаПервойПодписи(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ДолжностьЛицаПервойПодписи", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ЛицоВторойПодписи(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ЛицоВторойПодписи", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ДолжностьЛицаВторойПодписи(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ДолжностьЛицаВторойПодписи", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ПериодУвольненияНачало(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ПериодУвольненияНачало", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_ПериодУвольненияОкончание(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("ПериодУвольненияОкончание", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_КурсВалюты(парамКодВалюты)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("КурсВалюты", парамКодВалюты);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_Подразделение(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("Подразделение", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_КодСЗП(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("КодСЗП", парамОрганизация);
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначение_СпособИдентификации(парамОрганизация)
	
	Возврат ВосстановитьЗначениеПеременнойПоИдентификатору("СпособИдентификации", парамОрганизация);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СОХРАНЕНИЯ ЗНАЧЕНИЙ ОБЩИХ РЕКВИЗИТОВ
#Область ФункцииСохраненияЗначенийОбщихРеквизитов

&НаСервере
Процедура СохранитьЗначенияПеременных()
	
	СохранитьЗначение_Организация(Объект.Организация);
	СохранитьЗначение_ПапкаДляВыгрузкиФайлов(Объект.ПапкаДляВыгрузкиФайлов);
	СохранитьЗначение_ТипБанковскихКарт(Объект.ТипБанковскихКарт);
	СохранитьЗначение_КодВалюты(Объект.КодВалюты);
	СохранитьЗначение_ИННБанка(Объект.Банк, Объект.ИННБанка);
	СохранитьЗначение_КурсВалюты(Объект.КодВалюты, Объект.КурсВалюты);
	СохранитьЗначение_ДополнительныеУсловия(Объект.ДополнительныеУсловия);
	МассПейментПриИзмененииНаСервере();
	
	СохранитьЗначенияПеременныхПоОрганизации(Объект.Организация)
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПеременныхПоОрганизации(парамОрганизация)
	
	СохранитьЗначение_СокращенноеНаименованиеОрганизации(парамОрганизация, Объект.СокращенноеНаименованиеОрганизации);
	СохранитьЗначение_ЭмбоссируемоеНазваниеКомпании(парамОрганизация, Объект.ЭмбоссируемоеНазваниеКомпании);
	СохранитьЗначение_ИНН(парамОрганизация, Объект.ИНН);
	СохранитьЗначение_НомерФинансовогоИнститута(парамОрганизация, Объект.НомерФинансовогоИнститута);
	СохранитьЗначение_УНК(парамОрганизация, Объект.УНК);
	СохранитьЗначение_КодОрганизации(парамОрганизация, Объект.КодОрганизации);
	СохранитьЗначение_Банк(парамОрганизация, Объект.Банк);
	СохранитьЗначение_ЗарплатныйПроект(парамОрганизация, Объект.ЗарплатныйПроект);
	СохранитьЗначение_Бухгалтер(парамОрганизация, Объект.Бухгалтер);
	СохранитьЗначение_Руководитель(парамОрганизация, Объект.Руководитель);
	СохранитьЗначение_ЛицоПервойПодписи(парамОрганизация, Объект.ЛицоПервойПодписи);
	СохранитьЗначение_ДолжностьЛицаПервойПодписи(парамОрганизация, Объект.ДолжностьЛицаПервойПодписи);
	СохранитьЗначение_ЛицоВторойПодписи(парамОрганизация, Объект.ЛицоВторойПодписи);
	СохранитьЗначение_ДолжностьЛицаВторойПодписи(парамОрганизация, Объект.ДолжностьЛицаВторойПодписи);
	СохранитьЗначение_ПериодУвольненияНачало(парамОрганизация, Объект.ПериодУвольненияНачало);
	СохранитьЗначение_ПериодУвольненияОкончание(парамОрганизация, Объект.ПериодУвольненияОкончание);
	СохранитьЗначение_Подразделение(парамОрганизация, Объект.Подразделение);
	СохранитьЗначение_КодСЗП(парамОрганизация, Объект.КодСЗП);
	СохранитьЗначение_СпособИдентификации(парамОрганизация, Объект.СпособИдентификации);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеПеременнойПоИдентификатору(парамИдентификатор, парамЗначение, парамРаздел = Неопределено, парамДата = Неопределено)
	
	ИдентификаторПеременной = ПолучитьИдентификаторПеременной(парамИдентификатор, парамРаздел, парамДата);
	
	СохранитьНастройку(ИдентификаторПеременной, парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_Организация(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("Организация", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ДополнительныеУсловия(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ДополнительныеУсловия", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ВидЗачисления(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ВидЗачисления", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_СокращенноеНаименованиеОрганизации(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("СокращенноеНаименованиеОрганизации", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ЭмбоссируемоеНазваниеКомпании(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ЭмбоссируемоеНазваниеКомпании", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ИНН(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ИНН", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерФинансовогоИнститута(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерФинансовогоИнститута", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_УНК(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("УНК", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_КодОрганизации(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("КодОрганизации", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_Банк(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("Банк", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ЗарплатныйПроект(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ЗарплатныйПроект", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ПапкаДляВыгрузкиФайлов(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ПапкаДляВыгрузкиФайлов", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ТипБанковскихКарт(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ТипБанковскихКарт", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_КодВалюты(парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("КодВалюты", парамЗначение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраНаЗачислениеДенежныхСредств(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраНаЗачислениеДенежныхСредств", парамНомерРеестра, парамОрганизация, парамДатаРеестра);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраУволенныхСотрудников(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраУволенныхСотрудников", парамНомерРеестра, парамОрганизация, парамДатаРеестра);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраНаВыпускБанковскихКарт(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраНаВыпускБанковскихКарт", парамНомерРеестра, парамОрганизация, парамДатаРеестра);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраНаВыпускСКП(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраНаВыпускСКП", парамНомерРеестра, парамОрганизация, парамДатаРеестра);	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраНаВыпускСКМ(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраНаВыпускСКМ", парамНомерРеестра, парамОрганизация, парамДатаРеестра);	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_НомерРеестраРаботниковДляОбъявления(парамОрганизация, парамНомерРеестра, парамДатаРеестра)
	
	СохранитьЗначениеПеременнойПоИдентификатору("НомерРеестраРаботниковДляОбъявления", парамНомерРеестра, парамОрганизация, парамДатаРеестра);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_Бухгалтер(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("Бухгалтер", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_Руководитель(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("Руководитель", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ИННБанка(парамБанк, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ИННБанка", парамЗначение, парамБанк);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ЛицоПервойПодписи(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ЛицоПервойПодписи", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ДолжностьЛицаПервойПодписи(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ДолжностьЛицаПервойПодписи", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ЛицоВторойПодписи(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ЛицоВторойПодписи", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ДолжностьЛицаВторойПодписи(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ДолжностьЛицаВторойПодписи", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ПериодУвольненияНачало(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ПериодУвольненияНачало", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_ПериодУвольненияОкончание(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("ПериодУвольненияОкончание", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_КурсВалюты(парамКодВалюты, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("КурсВалюты", парамЗначение, парамКодВалюты);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_Подразделение(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("Подразделение", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_КодСЗП(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("КодСЗП", парамЗначение, парамОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначение_СпособИдентификации(парамОрганизация, парамЗначение)
	
	СохранитьЗначениеПеременнойПоИдентификатору("СпособИдентификации", парамЗначение, парамОрганизация);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
#Область ФункцииОбщегоНазначения

&НаКлиенте
Процедура ЗаполнитьСписокВыбораКодаВалюты()
	
	Для Каждого ТекЗначение Из Объект.мСписокКодовВалют Цикл
		Элементы.КодВалюты.СписокВыбора.Добавить(ТекЗначение.Значение, ТекЗначение.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЗначенийРеквизитов()
	
	ЗаполнитьДатыРеестров();
	
	ЗаполнитьНомераРеестров();
	
	СформироватьИменаФайловРеестров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыРеестров()
	
	Объект.ДатаРеестраНаЗачислениеДенежныхСредств	= ТекущаяДата();
	Объект.ДатаРеестраУволенныхСотрудников			= ТекущаяДата();
	Объект.ДатаРеестраНаВыпускБанковскихКарт		= ТекущаяДата();
	Объект.ДатаРеестраРаботниковДляОбъявления		= ТекущаяДата();
	Объект.ДатаРеестраСКП							= ТекущаяДата();
	Объект.ДатаРеестраСКМ							= ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераРеестров()
	
	Объект.НомерРеестраНаЗачислениеДенежныхСредств	= ПолучитьНомерРеестраНаЗачислениеДенежныхСредств();
	Объект.НомерРеестраУволенныхСотрудников			= ПолучитьНомерРеестраУволенныхСотрудников();
	Объект.НомерРеестраНаВыпускБанковскихКарт		= ПолучитьНомерРеестраНаВыпускБанковскихКарт();
	Объект.НомерРеестраРаботниковДляОбъявления		= ПолучитьНомерРеестраРаботниковДляОбъявления();
	Объект.НомерРеестраНаВыпускСКП					= ПолучитьНомерРеестраНаВыпускСКП();
	Объект.НомерРеестраНаВыпускСКМ					= ПолучитьНомерРеестраНаВыпускСКМ();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИменаФайловРеестров()
	
	СформироватьИмяФайлаРеестраНаЗачислениеДенежныхСредств();
	СформироватьИмяФайлаРеестраУволенныхСотрудников();
	СформироватьИмяФайлаРеестраНаВыпускБанковскихКарт();
	СформироватьИмяФайлаРеестраРаботниковДляОбъявления();
	СформироватьИмяФайлаРеестраНаСКП();
	СформироватьИмяФайлаРеестраНаСКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРеестрНаВыпускСКМ(Команда)
	ЗаполнитьРеестрНаВыпускСКМ(Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании, Объект.Банк, Объект.ЗарплатныйПроект, Объект.ТипБанковскихКарт, Объект.ДатаРеестраСКМ, Объект.Подразделение);
КонецПроцедуры




//ionnik 10.07.2019------------------------------------------------------
&НаСервере
Функция ПолучитьИмяФайлаРеестраНаВыпускСКМ(парамКодОрганизации, парамДатаРеестра, парамНомерРеестра, парамКодСЗП, парамСпособИдентификации, парамДопУсловия)
	
	СтрокаВозврата = "CIM";
	
	Если парамДопУсловия Тогда
		СтрокаВозврата = "CJE";
	КонецЕсли;
	
	Если парамСпособИдентификации = "Вариант2" Тогда
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(СокрЛП(парамКодСЗП), 10, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты2) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		".txt";
		
	Иначе
		
		Возврат
		СтрокаВозврата +
		Объект.мСимволПодчеркивания +
		СокрЛП(парамКодОрганизации) +
		Объект.мСимволПодчеркивания +
		ДополнитьСтроку(Формат(парамНомерРеестра, Объект.мФорматЦелогоЧислаБезПробелов), 2, "0") +
		Объект.мСимволПодчеркивания +
		Формат(парамДатаРеестра, Объект.мФорматДаты3) +
		".txt";
		
	КонецЕсли;
	
КонецФункции

//ionnik 10.07.2019------------------------------------------------------

&НаСервере
Процедура СформироватьИмяФайлаРеестраНаВыпускСКМ()
	Объект.ИмяФайлаРеестраНаВыпускСКМ = ПолучитьИмяФайлаРеестраНаВыпускСКМ(Объект.КодОрганизации, Объект.ДатаРеестраСКМ, Объект.НомерРеестраНаВыпускСКМ, Объект.КодСЗП, Объект.СпособИдентификации, Объект.ДополнительныеУсловия);
КонецПроцедуры

//ionnik 10.07.2019------------------------------------------------------
&НаКлиенте
Процедура ОбновитьИмяФайлаРеестрСКМ(Команда)
	СформироватьИмяФайлаРеестраНаВыпускСКМ();
КонецПроцедуры


&НаСервере
Функция ПолучитьСледующийНомер(парамИмяПеременной, парамОрганизация, парамДата)
	
	Результат = ВосстановитьЗначениеПеременнойПоИдентификатору(парамИмяПеременной, парамОрганизация, парамДата);
	
	Если Результат = Неопределено Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат + 1;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСокращенноеНаименованиеОрганизации(парамОрганизация)
	
	Объект.СокращенноеНаименованиеОрганизации = парамОрганизация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИННОрганизации(парамОрганизация)
	
	Объект.ИНН = парамОрганизация.ИНН;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеРеквизитаТабличнойЧасти(парамТабличнаяЧасть, парамИмяРеквизита, парамЗначение)
	
	Для Каждого ТекСтрока Из Объект[парамТабличнаяЧасть] Цикл
		ТекСтрока[парамИмяРеквизита] = парамЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗарплатныйПроект(парамОрганизация, парамБанк)
	
	Объект.ЗарплатныйПроект = ПолучитьЗарплатныйПроект(парамОрганизация, парамБанк);
	
КонецПроцедуры

&НаКлиенте
Функция  ПроверитьПравильностьЗаполненияДанных(парамИмяТекущейСтраницы, Отказ)
	
	ПроверитьПравильностьЗаполненияОсновныхРеквизитов(Отказ);
	
	Если парамИмяТекущейСтраницы = "СтраницаРеестрНаЗачислениеДенежныхСредств" Тогда
		МассивОшибок = ПроверитьПравильностьЗаполненияРеестраНаЗачислениеДенежныхСредств(Отказ, Объект.ВидЗачисления);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрУволенныхСотрудников" Тогда
		ПроверитьПравильностьЗаполненияРеестраУволенныхСотрудников(Отказ);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускБанковскихКарт" Тогда
		ПроверитьПравильностьЗаполненияРеестраНаВыпускБанковскихКарт(Отказ);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрРаботниковДляОбъявления" Тогда
		ПроверитьПравильностьЗаполненияРеестраРаботниковДляОбъявления(Отказ);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрДляЗагрузкиДанныхБанковскихКарт" Тогда
		ПроверитьПравильностьЗаполненияРеестраДляЗагрузкиДанныхБанковскихКарт(Отказ);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКП" Тогда
		ПроверитьПравильностьЗаполненияРеестраНаВыпускСКП(Отказ);
	ИначеЕсли парамИмяТекущейСтраницы = "СтраницаРеестрНаВыпускСКМ" Тогда
		ПроверитьПравильностьЗаполненияРеестраНаВыпускСКМ(Отказ);
	КонецЕсли;
	
	Возврат МассивОшибок
	
КонецФункции
&НаКлиенте
Процедура ПроверитьПравильностьЗаполненияОсновныхРеквизитов(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СокращенноеНаименованиеОрганизации) Тогда
		Сообщить("Не указано сокращенное наименование организации.", СтатусСообщения.Внимание);
		Отказ = Истина;
	ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.СокращенноеНаименованиеОрганизации) Тогда
		Сообщить("В сокращенном наименовании организации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ИНН <> ПривестиИНН(Объект.ИНН) Тогда
		Сообщить("Неверно заполнен ИНН.", СтатусСообщения.Внимание);
		Отказ = Истина;
	ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.ИНН) Тогда
		Сообщить("В ИНН присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НомерФинансовогоИнститута) Тогда
		Сообщить("Не указан номер финансового института.", СтатусСообщения.Внимание);
		Отказ = Истина;
	ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.НомерФинансовогоИнститута) Тогда
		Сообщить("В номере финансового института присутствуют недопустимые символы.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.СпособИдентификации = "Вариант2" Тогда
		
		Если ПустаяСтрока(Объект.КодСЗП) Тогда
			Сообщить("Не указан Код организации в СЗП.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.КодСЗП) Тогда
			Сообщить("В Коде организации в СЗП присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
	Иначе // Вариант1
		
		Если ПустаяСтрока(Объект.УНК) Тогда
			Сообщить("Не указан УНК.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.УНК) Тогда
			Сообщить("В УНК присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.КодОрганизации) Тогда
			Сообщить("Не указан Код организации.", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ДопустимыеСимволыВСтроке(Объект.КодОрганизации) Тогда
			Сообщить("В Коде организации присутствуют недопустимые символы.", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		Сообщить("Не указан банк.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЗарплатныйПроект) Тогда
		Сообщить("Не указан зарплатный счет.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ПапкаДляВыгрузкиФайлов) Тогда
		Сообщить("Не указана папка для выгрузки файлов.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипБанковскихКарт) Тогда
		Сообщить("Не указан тип банковских карт.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КодВалюты) Тогда
		Сообщить("Не указан код валюты.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.СНИЛСЗаполнен Тогда
		Для Каждого ТекСтрока Из Объект.РеестрНаЗачислениеДенежныхСредств Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СНИЛС) Тогда
				Сообщить("В строке " + Формат(ТекСтрока.НомерСтроки, Объект.мФорматЦелогоЧислаБезПробелов) + " не указан СНИЛС.", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ФорматНомераТелефонаСоответствует(парамЗначение) Экспорт
	
	Если парамЗначение = "" Тогда
		
		Возврат Истина;
		
	Иначе
		
		ПозицияПробела = Найти(парамЗначение, " ");
		
		Если ПозицияПробела <> 0 Тогда
			ЛеваяЧастьНомера = Лев(парамЗначение, ПозицияПробела - 1);
			Если ПозицияПробела <> СтрДлина(парамЗначение) Тогда
				ПраваяЧастьНомера = Сред(парамЗначение, ПозицияПробела + 1);
			Иначе
				ПраваяЧастьНомера = "";
			КонецЕсли;
		Иначе
			ЛеваяЧастьНомера = "";
			ПраваяЧастьНомера = парамЗначение;
		КонецЕсли;
		
		ЛеваяЧастьНомера = УдалитьНецифирныеСимволыИзСтроки(ЛеваяЧастьНомера);
		ПраваяЧастьНомера = УдалитьНецифирныеСимволыИзСтроки(ПраваяЧастьНомера);
		
		Возврат
		(ЛеваяЧастьНомера + " " + ПраваяЧастьНомера = парамЗначение) И
		(СтрДлина(ЛеваяЧастьНомера) = 3 Или СтрДлина(ЛеваяЧастьНомера) = 4) И
		(СтрДлина(ЛеваяЧастьНомера + ПраваяЧастьНомера) = 10) 
		
	КонецЕсли;
	
КонецФункции	

&НаСервере	
Функция ФорматНомераПолисаОМС(парамЗначение) Экспорт
	
	
	
КонецФункции


&НаСервере
Функция ФорматСерииДокументаСоответствует(парамЗначение) Экспорт
	
	СерияДокумента = УдалитьНецифирныеСимволыИзСтроки(парамЗначение);
	
	СерияДокумента = Лев(СерияДокумента, 2) + " " + Сред(СерияДокумента, 3, 2);
	
	Возврат СерияДокумента = парамЗначение;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ
#Область СлужебныеФункции

&НаСервере
Процедура ЗаполнитьЗначенияПеременныхФормы()
	
	Объект.мПрефикс = "МодульОбменаСБанком";
	
	Объект.мСимволПодчеркивания = "_";
	Объект.мСимволРазделитель = ";";
	Объект.мСимволНоваяСтрока = Символы.ПС;
	
	Объект.мФорматДаты1 = "ДФ=ddMMyyyy";
	Объект.мФорматДаты2 = "ДФ=yyyyMMdd";
	Объект.мФорматДаты3 = "ДФ=dd-MM-yyyy";
	Объект.мФорматДаты4 = "ДФ=dd/MM/yyyy";
	Объект.мФорматДаты5 = "ДФ=dd.MM.yyyy";
	
	Объект.мФорматЦелогоЧислаБезПробелов = "ЧГ=0";
	Объект.мФорматСуммыБезПробелов = "ЧДЦ=2; ЧРД=,; ЧГ=0";
	Объект.мФорматСуммыСПробелами = "ЧДЦ=2; ЧГ=3,0";
	
	Объект.мКодировка = КодировкаТекста.Системная;
	
	Объект.мСписокКодовДокументов		= ПолучитьСписокКодовДокументов();
	Объект.мСписокКодовДолжностей		= ПолучитьСписокКодовДолжностей();
	Объект.мСписокКодовВалют			= ПолучитьСписокКодовВалют();
	Объект.мСписокСтатусовРаботников	= ПолучитьСписокСтатусовРаботников();
	Объект.мСписокСтранМира				= ПолучитьСписокСтранМира();
	Объект.мСоответствияКодовСтранМира	= ПолучитьСоответствияКодовСтранМира();
	ЗаполнитьСписокВыбораБанковскихКарт();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторПеременной(парамИдентификатор, парамРаздел, парамДата)
	
	Возврат
	Объект.мПрефикс +
	Объект.мСимволПодчеркивания +
	парамИдентификатор +
	?(парамРаздел = Неопределено, "", Объект.мСимволПодчеркивания + СокрЛП(парамРаздел)) +
	?(парамДата = Неопределено, "", Объект.мСимволПодчеркивания + Формат(парамДата, Объект.мФорматДаты1));
	
КонецФункции

&НаКлиенте
Процедура ПапкаДляВыгрузкиФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПапкиДляВыгрузки(Объект.ПапкаДляВыгрузкиФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПапкиДляВыгрузки(парамЗначение, ПроверятьСуществование = Истина)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.ПолноеИмяФайла				= парамЗначение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		парамЗначение = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(парамИмяФайла)
	
	Если ЗначениеЗаполнено(парамИмяФайла) Тогда
		ЗапуститьПриложение(парамИмяФайла);
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокКодовДокументов()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("ПаспортРФ",	"Паспорт гражданина РФ");
	СписокВозврата.Добавить("ЗагрПаспорт",	"Иностранный паспорт");
	СписокВозврата.Добавить("ЗагрПаспРФ",	"Загранпаспорт гражданина РФ");
	СписокВозврата.Добавить("Документ",		"Паспорт гражданина СССР");
	СписокВозврата.Добавить("Паспорт",		"Паспорт гражданина СССР");
	СписокВозврата.Добавить("ЗагрПаспСССР",	"Загранпаспорт гражданина СССР");
	СписокВозврата.Добавить("ПаспМоряка",	"Паспорт моряка");
	СписокВозврата.Добавить("ВидНаЖительс",	"Вид на жительство");
	СписокВозврата.Добавить("ВоенБилОфЗап",	"Военный билет офицера запаса");
	СписокВозврата.Добавить("ВоенныйБилет",	"Военный билет солдата (матроса, сержанта, старшины)");
	СписокВозврата.Добавить("УдстЛичности",	"Удостоверение личности офицера");
	СписокВозврата.Добавить("ДипПаспРФ",	"Дипломатический паспорт гражданина РФ");
	СписокВозврата.Добавить("ПаспМинМорФл",	"Паспорт МинМорФлота");
	СписокВозврата.Добавить("СвРождении",	"Свидетельство о рождении"); 
	СписокВозврата.Добавить("ВремУдост",	"Временное удостоверение личности гражданина РФ");
	СписокВозврата.Добавить("УдостБежРФ",	"Свидетельство о предоставлении временного убежища на территории Российской Федерации"); 	
	СписокВозврата.Добавить("ИныеДокМВД",	"Иные документы, выданные органами МВД");
	СписокВозврата.Добавить("СНИЛС",		"СНИЛС");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокКодовДолжностей()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("01", "Госслужащий/высший управленец/высший чиновник");
	СписокВозврата.Добавить("02", "Владелец предприятия/Учредитель");
	СписокВозврата.Добавить("03", "Руководитель среднего звена");
	СписокВозврата.Добавить("04", "Высококвалифицированный специалист");
	СписокВозврата.Добавить("05", "Специалист");
	СписокВозврата.Добавить("09", "Неквалифицированный работник");
	СписокВозврата.Добавить("10", "Военнослужащий");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокКодовВалют()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("810", "RUR");
	СписокВозврата.Добавить("840", "USD");
	СписокВозврата.Добавить("978", "EUR");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокСтатусовРаботников()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("Активный",		"Работает");
	СписокВозврата.Добавить("Блокирован",	"N/A");
	СписокВозврата.Добавить("Удален",		"Уволен / не работает");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокСтранМира()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("ABH", "АБХАЗИЯ");
	СписокВозврата.Добавить("AUS", "АВСТРАЛИЯ");
	СписокВозврата.Добавить("AUT", "АВСТРИЯ");
	СписокВозврата.Добавить("AZE", "АЗЕРБАЙДЖАН");
	СписокВозврата.Добавить("ALB", "АЛБАНИЯ");
	СписокВозврата.Добавить("DZA", "АЛЖИР");
	СписокВозврата.Добавить("ASM", "АМЕРИКАНСКОЕ САМОА");
	СписокВозврата.Добавить("AIA", "АНГИЛЬЯ");
	СписокВозврата.Добавить("AGO", "АНГОЛА");
	СписокВозврата.Добавить("AND", "АНДОРРА");
	СписокВозврата.Добавить("ATA", "АНТАРКТИДА");
	СписокВозврата.Добавить("ATG", "АНТИГУА И БАРБУДА");
	СписокВозврата.Добавить("ARG", "АРГЕНТИНА");
	СписокВозврата.Добавить("ARM", "АРМЕНИЯ");
	СписокВозврата.Добавить("ABW", "АРУБА");
	СписокВозврата.Добавить("AFG", "АФГАНИСТАН");
	СписокВозврата.Добавить("BHS", "БАГАМЫ");
	СписокВозврата.Добавить("BGD", "БАНГЛАДЕШ");
	СписокВозврата.Добавить("BRB", "БАРБАДОС");
	СписокВозврата.Добавить("BHR", "БАХРЕЙН");
	СписокВозврата.Добавить("BLR", "БЕЛАРУСЬ");
	СписокВозврата.Добавить("BLZ", "БЕЛИЗ");
	СписокВозврата.Добавить("BEL", "БЕЛЬГИЯ");
	СписокВозврата.Добавить("BEN", "БЕНИН");
	СписокВозврата.Добавить("BMU", "БЕРМУДЫ");
	СписокВозврата.Добавить("BGR", "БОЛГАРИЯ");
	СписокВозврата.Добавить("BOL", "БОЛИВИЯ МНОГОНАЦИОНАЛЬНОЕ ГОСУДАРСТВО");
	СписокВозврата.Добавить("BES", "БОНЭЙР, СИНТ-ЭСТАТИУС И САБА");
	СписокВозврата.Добавить("BIH", "БОСНИЯ И ГЕРЦЕГОВИНА");
	СписокВозврата.Добавить("BWA", "БОТСВАНА");
	СписокВозврата.Добавить("BRA", "БРАЗИЛИЯ");
	СписокВозврата.Добавить("IOT", "БРИТАНСКАЯ ТЕРРИТОРИЯ В ИНДИЙСКОМ ОКЕАНЕ");
	СписокВозврата.Добавить("BRN", "БРУНЕЙ-ДАРУССАЛАМ");
	СписокВозврата.Добавить("BFA", "БУРКИНА-ФАСО");
	СписокВозврата.Добавить("BDI", "БУРУНДИ");
	СписокВозврата.Добавить("BTN", "БУТАН");
	СписокВозврата.Добавить("VUT", "ВАНУАТУ");
	СписокВозврата.Добавить("HUN", "ВЕНГРИЯ");
	СписокВозврата.Добавить("VEN", "ВЕНЕСУЭЛА БОЛИВАРИАНСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("VGB", "ВИРГИНСКИЕ ОСТРОВА, БРИТАНСКИЕ");
	СписокВозврата.Добавить("VIR", "ВИРГИНСКИЕ ОСТРОВА, США");
	СписокВозврата.Добавить("VNM", "ВЬЕТНАМ");
	СписокВозврата.Добавить("GAB", "ГАБОН");
	СписокВозврата.Добавить("GUY", "ГАЙАНА");
	СписокВозврата.Добавить("HTI", "ГАИТИ");
	СписокВозврата.Добавить("GMB", "ГАМБИЯ");
	СписокВозврата.Добавить("GHA", "ГАНА");
	СписокВозврата.Добавить("GLP", "ГВАДЕЛУПА");
	СписокВозврата.Добавить("GTM", "ГВАТЕМАЛА");
	СписокВозврата.Добавить("GIN", "ГВИНЕЯ");
	СписокВозврата.Добавить("GNB", "ГВИНЕЯ-БИСАУ");
	СписокВозврата.Добавить("DEU", "ГЕРМАНИЯ");
	СписокВозврата.Добавить("GGY", "ГЕРНСИ");
	СписокВозврата.Добавить("GIB", "ГИБРАЛТАР");
	СписокВозврата.Добавить("HND", "ГОНДУРАС");
	СписокВозврата.Добавить("HKG", "ГОНКОНГ");
	СписокВозврата.Добавить("GRD", "ГРЕНАДА");
	СписокВозврата.Добавить("GRL", "ГРЕНЛАНДИЯ");
	СписокВозврата.Добавить("GRC", "ГРЕЦИЯ");
	СписокВозврата.Добавить("GEO", "ГРУЗИЯ");
	СписокВозврата.Добавить("GUM", "ГУАМ");
	СписокВозврата.Добавить("DNK", "ДАНИЯ");
	СписокВозврата.Добавить("JEY", "ДЖЕРСИ");
	СписокВозврата.Добавить("DJI", "ДЖИБУТИ");
	СписокВозврата.Добавить("DMA", "ДОМИНИКА");
	СписокВозврата.Добавить("DOM", "ДОМИНИКАНСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("EGY", "ЕГИПЕТ");
	СписокВозврата.Добавить("ZMB", "ЗАМБИЯ");
	СписокВозврата.Добавить("ESH", "ЗАПАДНАЯ САХАРА");
	СписокВозврата.Добавить("ZWE", "ЗИМБАБВЕ");
	СписокВозврата.Добавить("YEM", "ЙЕМЕН");
	СписокВозврата.Добавить("ISR", "ИЗРАИЛЬ");
	СписокВозврата.Добавить("IND", "ИНДИЯ");
	СписокВозврата.Добавить("IDN", "ИНДОНЕЗИЯ");
	СписокВозврата.Добавить("JOR", "ИОРДАНИЯ");
	СписокВозврата.Добавить("IRQ", "ИРАК");
	СписокВозврата.Добавить("IRN", "ИРАН, ИСЛАМСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("IRL", "ИРЛАНДИЯ");
	СписокВозврата.Добавить("ISL", "ИСЛАНДИЯ");
	СписокВозврата.Добавить("ESP", "ИСПАНИЯ");
	СписокВозврата.Добавить("ITA", "ИТАЛИЯ");
	СписокВозврата.Добавить("CPV", "КАБО-ВЕРДЕ");
	СписокВозврата.Добавить("KAZ", "КАЗАХСТАН");
	СписокВозврата.Добавить("KHM", "КАМБОДЖА");
	СписокВозврата.Добавить("CMR", "КАМЕРУН");
	СписокВозврата.Добавить("CAN", "КАНАДА");
	СписокВозврата.Добавить("QAT", "КАТАР");
	СписокВозврата.Добавить("KEN", "КЕНИЯ");
	СписокВозврата.Добавить("CYP", "КИПР");
	СписокВозврата.Добавить("KGZ", "КИРГИЗИЯ");
	СписокВозврата.Добавить("KIR", "КИРИБАТИ");
	СписокВозврата.Добавить("CHN", "КИТАЙ");
	СписокВозврата.Добавить("CCK", "КОКОСОВЫЕ (КИЛИНГ) ОСТРОВА");
	СписокВозврата.Добавить("COL", "КОЛУМБИЯ");
	СписокВозврата.Добавить("COM", "КОМОРЫ");
	СписокВозврата.Добавить("COG", "КОНГО");
	СписокВозврата.Добавить("COD", "КОНГО, ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("PRK", "КОРЕЯ, НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("KOR", "КОРЕЯ, РЕСПУБЛИКА");
	СписокВозврата.Добавить("CRI", "КОСТА-РИКА");
	СписокВозврата.Добавить("CIV", "КОТ Д'ИВУАР");
	СписокВозврата.Добавить("CUB", "КУБА");
	СписокВозврата.Добавить("KWT", "КУВЕЙТ");
	СписокВозврата.Добавить("CUW", "КЮРАСАО");
	СписокВозврата.Добавить("LAO", "ЛАОССКАЯ НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("LVA", "ЛАТВИЯ");
	СписокВозврата.Добавить("LSO", "ЛЕСОТО");
	СписокВозврата.Добавить("LBR", "ЛИБЕРИЯ");
	СписокВозврата.Добавить("LBN", "ЛИВАН");
	СписокВозврата.Добавить("LBY", "ЛИВИЯ");
	СписокВозврата.Добавить("LTU", "ЛИТВА");
	СписокВозврата.Добавить("LIE", "ЛИХТЕНШТЕЙН");
	СписокВозврата.Добавить("LUX", "ЛЮКСЕМБУРГ");
	СписокВозврата.Добавить("MUS", "МАВРИКИЙ");
	СписокВозврата.Добавить("MRT", "МАВРИТАНИЯ");
	СписокВозврата.Добавить("MDG", "МАДАГАСКАР");
	СписокВозврата.Добавить("MYT", "МАЙОТТА");
	СписокВозврата.Добавить("MAC", "МАКАО");
	СписокВозврата.Добавить("MWI", "МАЛАВИ");
	СписокВозврата.Добавить("MYS", "МАЛАЙЗИЯ");
	СписокВозврата.Добавить("MLI", "МАЛИ");
	СписокВозврата.Добавить("UMI", "МАЛЫЕ ТИХООКЕАНСКИЕ ОТДАЛЕННЫЕ ОСТРОВА СОЕДИНЕННЫХ ШТАТОВ");
	СписокВозврата.Добавить("MDV", "МАЛЬДИВЫ");
	СписокВозврата.Добавить("MLT", "МАЛЬТА");
	СписокВозврата.Добавить("MAR", "МАРОККО");
	СписокВозврата.Добавить("MTQ", "МАРТИНИКА");
	СписокВозврата.Добавить("MHL", "МАРШАЛЛОВЫ ОСТРОВА");
	СписокВозврата.Добавить("MEX", "МЕКСИКА");
	СписокВозврата.Добавить("FSM", "МИКРОНЕЗИЯ, ФЕДЕРАТИВНЫЕ ШТАТЫ");
	СписокВозврата.Добавить("MOZ", "МОЗАМБИК");
	СписокВозврата.Добавить("MDA", "МОЛДОВА, РЕСПУБЛИКА");
	СписокВозврата.Добавить("MCO", "МОНАКО");
	СписокВозврата.Добавить("MNG", "МОНГОЛИЯ");
	СписокВозврата.Добавить("MSR", "МОНТСЕРРАТ");
	СписокВозврата.Добавить("MMR", "МЬЯНМА");
	СписокВозврата.Добавить("NAM", "НАМИБИЯ");
	СписокВозврата.Добавить("NRU", "НАУРУ");
	СписокВозврата.Добавить("NPL", "НЕПАЛ");
	СписокВозврата.Добавить("NER", "НИГЕР");
	СписокВозврата.Добавить("NGA", "НИГЕРИЯ");
	СписокВозврата.Добавить("NLD", "НИДЕРЛАНДЫ");
	СписокВозврата.Добавить("NIC", "НИКАРАГУА");
	СписокВозврата.Добавить("NIU", "НИУЭ");
	СписокВозврата.Добавить("NZL", "НОВАЯ ЗЕЛАНДИЯ");
	СписокВозврата.Добавить("NCL", "НОВАЯ КАЛЕДОНИЯ");
	СписокВозврата.Добавить("NOR", "НОРВЕГИЯ");
	СписокВозврата.Добавить("ARE", "ОБЪЕДИНЕННЫЕ АРАБСКИЕ ЭМИРАТЫ");
	СписокВозврата.Добавить("OMN", "ОМАН");
	СписокВозврата.Добавить("BVT", "ОСТРОВ БУВЕ");
	СписокВозврата.Добавить("IMN", "ОСТРОВ МЭН");
	СписокВозврата.Добавить("NFK", "ОСТРОВ НОРФОЛК");
	СписокВозврата.Добавить("CXR", "ОСТРОВ РОЖДЕСТВА");
	СписокВозврата.Добавить("HMD", "ОСТРОВ ХЕРД И ОСТРОВА МАКДОНАЛЬД");
	СписокВозврата.Добавить("CYM", "ОСТРОВА КАЙМАН");
	СписокВозврата.Добавить("COK", "ОСТРОВА КУКА");
	СписокВозврата.Добавить("TCA", "ОСТРОВА ТЕРКС И КАЙКОС");
	СписокВозврата.Добавить("PAK", "ПАКИСТАН");
	СписокВозврата.Добавить("PLW", "ПАЛАУ");
	СписокВозврата.Добавить("PSE", "ПАЛЕСТИНА, ГОСУДАРСТВО");
	СписокВозврата.Добавить("PAN", "ПАНАМА");
	СписокВозврата.Добавить("VAT", "ПАПСКИЙ ПРЕСТОЛ (ГОСУДАРСТВО - ГОРОД ВАТИКАН)");
	СписокВозврата.Добавить("PNG", "ПАПУА НОВАЯ ГВИНЕЯ");
	СписокВозврата.Добавить("PRY", "ПАРАГВАЙ");
	СписокВозврата.Добавить("PER", "ПЕРУ");
	СписокВозврата.Добавить("PCN", "ПИТКЕРН");
	СписокВозврата.Добавить("POL", "ПОЛЬША");
	СписокВозврата.Добавить("PRT", "ПОРТУГАЛИЯ");
	СписокВозврата.Добавить("PRI", "ПУЭРТО-РИКО");
	СписокВозврата.Добавить("MKD", "РЕСПУБЛИКА МАКЕДОНИЯ");
	СписокВозврата.Добавить("REU", "РЕЮНЬОН");
	СписокВозврата.Добавить("RUS", "РОССИЯ");
	СписокВозврата.Добавить("RWA", "РУАНДА");
	СписокВозврата.Добавить("ROU", "РУМЫНИЯ");
	СписокВозврата.Добавить("WSM", "САМОА");
	СписокВозврата.Добавить("SMR", "САН-МАРИНО");
	СписокВозврата.Добавить("STP", "САН-ТОМЕ И ПРИНСИПИ");
	СписокВозврата.Добавить("SAU", "САУДОВСКАЯ АРАВИЯ");
	СписокВозврата.Добавить("SWZ", "СВАЗИЛЕНД");
	СписокВозврата.Добавить("SHN", "СВЯТАЯ ЕЛЕНА, ОСТРОВ ВОЗНЕСЕНИЯ, ТРИСТАН-ДА-КУНЬЯ");
	СписокВозврата.Добавить("MNP", "СЕВЕРНЫЕ МАРИАНСКИЕ ОСТРОВА");
	СписокВозврата.Добавить("SYC", "СЕЙШЕЛЫ");
	СписокВозврата.Добавить("BLM", "СЕН-БАРТЕЛЕМИ");
	СписокВозврата.Добавить("SEN", "СЕНЕГАЛ");
	СписокВозврата.Добавить("MAF", "СЕН-МАРТЕН");
	СписокВозврата.Добавить("SXM", "СЕН-МАРТЕН (нидерландская часть)");
	СписокВозврата.Добавить("SPM", "СЕН-ПЬЕР И МИКЕЛОН");
	СписокВозврата.Добавить("VCT", "СЕНТ-ВИНСЕНТ И ГРЕНАДИНЫ");
	СписокВозврата.Добавить("KNA", "СЕНТ-КИТС И НЕВИС");
	СписокВозврата.Добавить("LCA", "СЕНТ-ЛЮСИЯ");
	СписокВозврата.Добавить("SRB", "СЕРБИЯ");
	СписокВозврата.Добавить("SGP", "СИНГАПУР");
	СписокВозврата.Добавить("SYR", "СИРИЙСКАЯ АРАБСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("SVK", "СЛОВАКИЯ");
	СписокВозврата.Добавить("SVN", "СЛОВЕНИЯ");
	СписокВозврата.Добавить("GBR", "СОЕДИНЕННОЕ КОРОЛЕВСТВО");
	СписокВозврата.Добавить("USA", "СОЕДИНЕННЫЕ ШТАТЫ");
	СписокВозврата.Добавить("SLB", "СОЛОМОНОВЫ ОСТРОВА");
	СписокВозврата.Добавить("SOM", "СОМАЛИ");
	СписокВозврата.Добавить("SDN", "СУДАН");
	СписокВозврата.Добавить("SUR", "СУРИНАМ");
	СписокВозврата.Добавить("SLE", "СЬЕРРА-ЛЕОНЕ");
	СписокВозврата.Добавить("TJK", "ТАДЖИКИСТАН");
	СписокВозврата.Добавить("TWN", "ТАЙВАНЬ (КИТАЙ)");
	СписокВозврата.Добавить("THA", "ТАИЛАНД");
	СписокВозврата.Добавить("TZA", "ТАНЗАНИЯ, ОБЪЕДИНЕННАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("TLS", "ТИМОР-ЛЕСТЕ");
	СписокВозврата.Добавить("TGO", "ТОГО");
	СписокВозврата.Добавить("TKL", "ТОКЕЛАУ");
	СписокВозврата.Добавить("TON", "ТОНГА");
	СписокВозврата.Добавить("TTO", "ТРИНИДАД И ТОБАГО");
	СписокВозврата.Добавить("TUV", "ТУВАЛУ");
	СписокВозврата.Добавить("TUN", "ТУНИС");
	СписокВозврата.Добавить("TKM", "ТУРКМЕНИЯ");
	СписокВозврата.Добавить("TUR", "ТУРЦИЯ");
	СписокВозврата.Добавить("UGA", "УГАНДА");
	СписокВозврата.Добавить("UZB", "УЗБЕКИСТАН");
	СписокВозврата.Добавить("UKR", "УКРАИНА");
	СписокВозврата.Добавить("WLF", "УОЛЛИС И ФУТУНА");
	СписокВозврата.Добавить("URY", "УРУГВАЙ");
	СписокВозврата.Добавить("FRO", "ФАРЕРСКИЕ ОСТРОВА");
	СписокВозврата.Добавить("FJI", "ФИДЖИ");
	СписокВозврата.Добавить("PHL", "ФИЛИППИНЫ");
	СписокВозврата.Добавить("FIN", "ФИНЛЯНДИЯ");
	СписокВозврата.Добавить("FLK", "ФОЛКЛЕНДСКИЕ ОСТРОВА (МАЛЬВИНСКИЕ)");
	СписокВозврата.Добавить("FRA", "ФРАНЦИЯ");
	СписокВозврата.Добавить("GUF", "ФРАНЦУЗСКАЯ ГВИАНА");
	СписокВозврата.Добавить("PYF", "ФРАНЦУЗСКАЯ ПОЛИНЕЗИЯ");
	СписокВозврата.Добавить("ATF", "ФРАНЦУЗСКИЕ ЮЖНЫЕ ТЕРРИТОРИИ");
	СписокВозврата.Добавить("HRV", "ХОРВАТИЯ");
	СписокВозврата.Добавить("CAF", "ЦЕНТРАЛЬНО-АФРИКАНСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("TCD", "ЧАД");
	СписокВозврата.Добавить("MNE", "ЧЕРНОГОРИЯ");
	СписокВозврата.Добавить("CZE", "ЧЕШСКАЯ РЕСПУБЛИКА");
	СписокВозврата.Добавить("CHL", "ЧИЛИ");
	СписокВозврата.Добавить("CHE", "ШВЕЙЦАРИЯ");
	СписокВозврата.Добавить("SWE", "ШВЕЦИЯ");
	СписокВозврата.Добавить("SJM", "ШПИЦБЕРГЕН И ЯН МАЙЕН");
	СписокВозврата.Добавить("LKA", "ШРИ-ЛАНКА");
	СписокВозврата.Добавить("ECU", "ЭКВАДОР");
	СписокВозврата.Добавить("GNQ", "ЭКВАТОРИАЛЬНАЯ ГВИНЕЯ");
	СписокВозврата.Добавить("ALA", "ЭЛАНДСКИЕ ОСТРОВА");
	СписокВозврата.Добавить("SLV", "ЭЛЬ-САЛЬВАДОР");
	СписокВозврата.Добавить("ERI", "ЭРИТРЕЯ");
	СписокВозврата.Добавить("EST", "ЭСТОНИЯ");
	СписокВозврата.Добавить("ETH", "ЭФИОПИЯ");
	СписокВозврата.Добавить("ZAF", "ЮЖНАЯ АФРИКА");
	СписокВозврата.Добавить("SGS", "ЮЖНАЯ ДЖОРДЖИЯ И ЮЖНЫЕ САНДВИЧЕВЫ ОСТРОВА");
	СписокВозврата.Добавить("OST", "ЮЖНАЯ ОСЕТИЯ");
	СписокВозврата.Добавить("SSD", "ЮЖНЫЙ СУДАН");
	СписокВозврата.Добавить("JAM", "ЯМАЙКА");
	СписокВозврата.Добавить("JPN", "ЯПОНИЯ");
	
	СписокВозврата.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствияКодовСтранМира()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("895", "ABH");
	СписокВозврата.Добавить("533", "ABW");
	СписокВозврата.Добавить("004", "AFG");
	СписокВозврата.Добавить("024", "AGO");
	СписокВозврата.Добавить("660", "AIA");
	СписокВозврата.Добавить("248", "ALA");
	СписокВозврата.Добавить("008", "ALB");
	СписокВозврата.Добавить("020", "AND");
	СписокВозврата.Добавить("784", "ARE");
	СписокВозврата.Добавить("032", "ARG");
	СписокВозврата.Добавить("051", "ARM");
	СписокВозврата.Добавить("016", "ASM");
	СписокВозврата.Добавить("010", "ATA");
	СписокВозврата.Добавить("260", "ATF");
	СписокВозврата.Добавить("028", "ATG");
	СписокВозврата.Добавить("036", "AUS");
	СписокВозврата.Добавить("040", "AUT");
	СписокВозврата.Добавить("031", "AZE");
	СписокВозврата.Добавить("108", "BDI");
	СписокВозврата.Добавить("056", "BEL");
	СписокВозврата.Добавить("204", "BEN");
	СписокВозврата.Добавить("535", "BES");
	СписокВозврата.Добавить("854", "BFA");
	СписокВозврата.Добавить("050", "BGD");
	СписокВозврата.Добавить("100", "BGR");
	СписокВозврата.Добавить("048", "BHR");
	СписокВозврата.Добавить("044", "BHS");
	СписокВозврата.Добавить("070", "BIH");
	СписокВозврата.Добавить("652", "BLM");
	СписокВозврата.Добавить("112", "BLR");
	СписокВозврата.Добавить("084", "BLZ");
	СписокВозврата.Добавить("060", "BMU");
	СписокВозврата.Добавить("068", "BOL");
	СписокВозврата.Добавить("076", "BRA");
	СписокВозврата.Добавить("052", "BRB");
	СписокВозврата.Добавить("096", "BRN");
	СписокВозврата.Добавить("064", "BTN");
	СписокВозврата.Добавить("074", "BVT");
	СписокВозврата.Добавить("072", "BWA");
	СписокВозврата.Добавить("140", "CAF");
	СписокВозврата.Добавить("124", "CAN");
	СписокВозврата.Добавить("166", "CCK");
	СписокВозврата.Добавить("756", "CHE");
	СписокВозврата.Добавить("152", "CHL");
	СписокВозврата.Добавить("156", "CHN");
	СписокВозврата.Добавить("384", "CIV");
	СписокВозврата.Добавить("120", "CMR");
	СписокВозврата.Добавить("180", "COD");
	СписокВозврата.Добавить("178", "COG");
	СписокВозврата.Добавить("184", "COK");
	СписокВозврата.Добавить("170", "COL");
	СписокВозврата.Добавить("174", "COM");
	СписокВозврата.Добавить("132", "CPV");
	СписокВозврата.Добавить("188", "CRI");
	СписокВозврата.Добавить("192", "CUB");
	СписокВозврата.Добавить("531", "CUW");
	СписокВозврата.Добавить("162", "CXR");
	СписокВозврата.Добавить("136", "CYM");
	СписокВозврата.Добавить("196", "CYP");
	СписокВозврата.Добавить("203", "CZE");
	СписокВозврата.Добавить("276", "DEU");
	СписокВозврата.Добавить("262", "DJI");
	СписокВозврата.Добавить("212", "DMA");
	СписокВозврата.Добавить("208", "DNK");
	СписокВозврата.Добавить("214", "DOM");
	СписокВозврата.Добавить("012", "DZA");
	СписокВозврата.Добавить("218", "ECU");
	СписокВозврата.Добавить("818", "EGY");
	СписокВозврата.Добавить("232", "ERI");
	СписокВозврата.Добавить("732", "ESH");
	СписокВозврата.Добавить("724", "ESP");
	СписокВозврата.Добавить("233", "EST");
	СписокВозврата.Добавить("231", "ETH");
	СписокВозврата.Добавить("246", "FIN");
	СписокВозврата.Добавить("242", "FJI");
	СписокВозврата.Добавить("238", "FLK");
	СписокВозврата.Добавить("250", "FRA");
	СписокВозврата.Добавить("234", "FRO");
	СписокВозврата.Добавить("583", "FSM");
	СписокВозврата.Добавить("266", "GAB");
	СписокВозврата.Добавить("826", "GBR");
	СписокВозврата.Добавить("268", "GEO");
	СписокВозврата.Добавить("831", "GGY");
	СписокВозврата.Добавить("288", "GHA");
	СписокВозврата.Добавить("292", "GIB");
	СписокВозврата.Добавить("324", "GIN");
	СписокВозврата.Добавить("312", "GLP");
	СписокВозврата.Добавить("270", "GMB");
	СписокВозврата.Добавить("624", "GNB");
	СписокВозврата.Добавить("226", "GNQ");
	СписокВозврата.Добавить("300", "GRC");
	СписокВозврата.Добавить("308", "GRD");
	СписокВозврата.Добавить("304", "GRL");
	СписокВозврата.Добавить("320", "GTM");
	СписокВозврата.Добавить("254", "GUF");
	СписокВозврата.Добавить("316", "GUM");
	СписокВозврата.Добавить("328", "GUY");
	СписокВозврата.Добавить("344", "HKG");
	СписокВозврата.Добавить("334", "HMD");
	СписокВозврата.Добавить("340", "HND");
	СписокВозврата.Добавить("191", "HRV");
	СписокВозврата.Добавить("332", "HTI");
	СписокВозврата.Добавить("348", "HUN");
	СписокВозврата.Добавить("360", "IDN");
	СписокВозврата.Добавить("833", "IMN");
	СписокВозврата.Добавить("356", "IND");
	СписокВозврата.Добавить("086", "IOT");
	СписокВозврата.Добавить("372", "IRL");
	СписокВозврата.Добавить("364", "IRN");
	СписокВозврата.Добавить("368", "IRQ");
	СписокВозврата.Добавить("352", "ISL");
	СписокВозврата.Добавить("376", "ISR");
	СписокВозврата.Добавить("380", "ITA");
	СписокВозврата.Добавить("388", "JAM");
	СписокВозврата.Добавить("832", "JEY");
	СписокВозврата.Добавить("400", "JOR");
	СписокВозврата.Добавить("392", "JPN");
	СписокВозврата.Добавить("398", "KAZ");
	СписокВозврата.Добавить("404", "KEN");
	СписокВозврата.Добавить("417", "KGZ");
	СписокВозврата.Добавить("116", "KHM");
	СписокВозврата.Добавить("296", "KIR");
	СписокВозврата.Добавить("659", "KNA");
	СписокВозврата.Добавить("410", "KOR");
	СписокВозврата.Добавить("414", "KWT");
	СписокВозврата.Добавить("418", "LAO");
	СписокВозврата.Добавить("422", "LBN");
	СписокВозврата.Добавить("430", "LBR");
	СписокВозврата.Добавить("434", "LBY");
	СписокВозврата.Добавить("662", "LCA");
	СписокВозврата.Добавить("438", "LIE");
	СписокВозврата.Добавить("144", "LKA");
	СписокВозврата.Добавить("426", "LSO");
	СписокВозврата.Добавить("440", "LTU");
	СписокВозврата.Добавить("442", "LUX");
	СписокВозврата.Добавить("428", "LVA");
	СписокВозврата.Добавить("446", "MAC");
	СписокВозврата.Добавить("663", "MAF");
	СписокВозврата.Добавить("504", "MAR");
	СписокВозврата.Добавить("492", "MCO");
	СписокВозврата.Добавить("498", "MDA");
	СписокВозврата.Добавить("450", "MDG");
	СписокВозврата.Добавить("462", "MDV");
	СписокВозврата.Добавить("484", "MEX");
	СписокВозврата.Добавить("584", "MHL");
	СписокВозврата.Добавить("807", "MKD");
	СписокВозврата.Добавить("466", "MLI");
	СписокВозврата.Добавить("470", "MLT");
	СписокВозврата.Добавить("104", "MMR");
	СписокВозврата.Добавить("499", "MNE");
	СписокВозврата.Добавить("496", "MNG");
	СписокВозврата.Добавить("580", "MNP");
	СписокВозврата.Добавить("508", "MOZ");
	СписокВозврата.Добавить("478", "MRT");
	СписокВозврата.Добавить("500", "MSR");
	СписокВозврата.Добавить("474", "MTQ");
	СписокВозврата.Добавить("480", "MUS");
	СписокВозврата.Добавить("454", "MWI");
	СписокВозврата.Добавить("458", "MYS");
	СписокВозврата.Добавить("175", "MYT");
	СписокВозврата.Добавить("516", "NAM");
	СписокВозврата.Добавить("540", "NCL");
	СписокВозврата.Добавить("562", "NER");
	СписокВозврата.Добавить("574", "NFK");
	СписокВозврата.Добавить("566", "NGA");
	СписокВозврата.Добавить("558", "NIC");
	СписокВозврата.Добавить("570", "NIU");
	СписокВозврата.Добавить("528", "NLD");
	СписокВозврата.Добавить("578", "NOR");
	СписокВозврата.Добавить("524", "NPL");
	СписокВозврата.Добавить("520", "NRU");
	СписокВозврата.Добавить("554", "NZL");
	СписокВозврата.Добавить("512", "OMN");
	СписокВозврата.Добавить("896", "OST");
	СписокВозврата.Добавить("586", "PAK");
	СписокВозврата.Добавить("591", "PAN");
	СписокВозврата.Добавить("612", "PCN");
	СписокВозврата.Добавить("604", "PER");
	СписокВозврата.Добавить("608", "PHL");
	СписокВозврата.Добавить("585", "PLW");
	СписокВозврата.Добавить("598", "PNG");
	СписокВозврата.Добавить("616", "POL");
	СписокВозврата.Добавить("630", "PRI");
	СписокВозврата.Добавить("408", "PRK");
	СписокВозврата.Добавить("620", "PRT");
	СписокВозврата.Добавить("600", "PRY");
	СписокВозврата.Добавить("275", "PSE");
	СписокВозврата.Добавить("258", "PYF");
	СписокВозврата.Добавить("634", "QAT");
	СписокВозврата.Добавить("638", "REU");
	СписокВозврата.Добавить("642", "ROU");
	СписокВозврата.Добавить("643", "RUS");
	СписокВозврата.Добавить("646", "RWA");
	СписокВозврата.Добавить("682", "SAU");
	СписокВозврата.Добавить("729", "SDN");
	СписокВозврата.Добавить("686", "SEN");
	СписокВозврата.Добавить("702", "SGP");
	СписокВозврата.Добавить("239", "SGS");
	СписокВозврата.Добавить("654", "SHN");
	СписокВозврата.Добавить("744", "SJM");
	СписокВозврата.Добавить("090", "SLB");
	СписокВозврата.Добавить("694", "SLE");
	СписокВозврата.Добавить("222", "SLV");
	СписокВозврата.Добавить("674", "SMR");
	СписокВозврата.Добавить("706", "SOM");
	СписокВозврата.Добавить("666", "SPM");
	СписокВозврата.Добавить("688", "SRB");
	СписокВозврата.Добавить("728", "SSD");
	СписокВозврата.Добавить("678", "STP");
	СписокВозврата.Добавить("740", "SUR");
	СписокВозврата.Добавить("703", "SVK");
	СписокВозврата.Добавить("705", "SVN");
	СписокВозврата.Добавить("752", "SWE");
	СписокВозврата.Добавить("748", "SWZ");
	СписокВозврата.Добавить("534", "SXM");
	СписокВозврата.Добавить("690", "SYC");
	СписокВозврата.Добавить("760", "SYR");
	СписокВозврата.Добавить("796", "TCA");
	СписокВозврата.Добавить("148", "TCD");
	СписокВозврата.Добавить("768", "TGO");
	СписокВозврата.Добавить("764", "THA");
	СписокВозврата.Добавить("762", "TJK");
	СписокВозврата.Добавить("772", "TKL");
	СписокВозврата.Добавить("795", "TKM");
	СписокВозврата.Добавить("626", "TLS");
	СписокВозврата.Добавить("776", "TON");
	СписокВозврата.Добавить("780", "TTO");
	СписокВозврата.Добавить("788", "TUN");
	СписокВозврата.Добавить("792", "TUR");
	СписокВозврата.Добавить("798", "TUV");
	СписокВозврата.Добавить("158", "TWN");
	СписокВозврата.Добавить("834", "TZA");
	СписокВозврата.Добавить("800", "UGA");
	СписокВозврата.Добавить("804", "UKR");
	СписокВозврата.Добавить("581", "UMI");
	СписокВозврата.Добавить("858", "URY");
	СписокВозврата.Добавить("840", "USA");
	СписокВозврата.Добавить("860", "UZB");
	СписокВозврата.Добавить("336", "VAT");
	СписокВозврата.Добавить("670", "VCT");
	СписокВозврата.Добавить("862", "VEN");
	СписокВозврата.Добавить("092", "VGB");
	СписокВозврата.Добавить("850", "VIR");
	СписокВозврата.Добавить("704", "VNM");
	СписокВозврата.Добавить("548", "VUT");
	СписокВозврата.Добавить("876", "WLF");
	СписокВозврата.Добавить("882", "WSM");
	СписокВозврата.Добавить("887", "YEM");
	СписокВозврата.Добавить("710", "ZAF");
	СписокВозврата.Добавить("894", "ZMB");
	СписокВозврата.Добавить("716", "ZWE");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ВосстановитьНастройку(парамИдентификатор)
	
	Возврат ХранилищеОбщихНастроек.Загрузить(парамИдентификатор);
	
КонецФункции

&НаСервере
Функция СохранитьНастройку(парамИдентификатор, парамЗначение)
	
	ХранилищеОбщихНастроек.Сохранить(парамИдентификатор,, парамЗначение);
	
КонецФункции

&НаСервере
Функция ПривестиИНН(Знач парамЗначение)
	
	парамЗначение = УдалитьНецифирныеСимволыИзСтроки(парамЗначение);
	
	ДлинаЗначения = СтрДлина(парамЗначение);
	
	Если ДлинаЗначения <= 10 Тогда
		парамЗначение = ДополнитьСтроку(парамЗначение, 10, "0");
	ИначеЕсли ДлинаЗначения <= 12 Тогда
		парамЗначение = ДополнитьСтроку(парамЗначение, 12, "0");
	КонецЕсли;
	
	Возврат парамЗначение;
	
КонецФункции

&НаСервере
Функция ДополнитьСтроку(Знач Стр, Длина, Чем = " ", Режим = 0)
	
	СимволовДополнить = Длина - СтрДлина(Стр);
	
	Добавок = "";
	Для Н = 1 По СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	
	Возврат ?(Режим = 0, Добавок + Стр, Стр + Добавок);
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуНаЛатинском(Знач ИсходныйТекст)
	
	ПредыдущийСимвол = "";
	
	СоответствиеСимволов = ПолучитьСоответствиеСимволов();
	
	ИсходныйТекст = СокрЛП(ВРег(ИсходныйТекст));
	
	ГотовоеЗначение = "";
	ТекущийСимвол = "";
	ТекущийГотовыйСимвол = "";
	
	Для К = 1 по СтрДлина(ИсходныйТекст) Цикл
		
		ТекущийСимвол 			= Сред(ИсходныйТекст, К, 1);
		ТекущийГотовыйСимвол 	= СоответствиеСимволов.Получить(ТекущийСимвол);
		ТекущийПарныйСимвол 	= СоответствиеСимволов.Получить(ПредыдущийСимвол + ТекущийСимвол); 
		
		Если ЗначениеЗаполнено(ТекущийПарныйСимвол) Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийПарныйСимвол;
		ИначеЕсли ТекущийГотовыйСимвол = Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийСимвол;
		Иначе
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
		ПредыдущийСимвол = ТекущийСимвол;
		
	КонецЦикла;
	
	Возврат ГотовоеЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеСимволов()
	
	СоответствиеСимволов = Новый Соответствие;
	
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "YO");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");
	
	// парные символы
	//СоответствиеСимволов.Вставить("ЬЕ", "YE");
	//СоответствиеСимволов.Вставить("ЬЁ", "YE");
	
	Возврат СоответствиеСимволов;
	
КонецФункции

&НаСервере
Функция ПолучитьЗарплатныйПроект(парамОрганизация, парамБанк)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамБанк", парамБанк);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗарплатныеПроекты.Ссылка,
	|	МАКСИМУМ(ЗарплатныеПроекты.Наименование) КАК Наименование
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &парамОрганизация
	|	И ЗарплатныеПроекты.Банк = &парамБанк
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатныеПроекты.Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПривестиНомерСчета(Знач парамЗначение)
	
	парамЗначение = УдалитьНецифирныеСимволыИзСтроки(парамЗначение);
	
	ДлинаЗначения = СтрДлина(парамЗначение);
	
	Если ДлинаЗначения <= 16 Тогда
		парамЗначение = ДополнитьСтроку(парамЗначение, 16, "0");
	ИначеЕсли ДлинаЗначения <= 20 Тогда
		парамЗначение = ДополнитьСтроку(парамЗначение, 20, "0");
	КонецЕсли;
	
	Возврат парамЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбъявленияЛицевогоСчетаФизическогоЛица(парамФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект, парамПериод)
	
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Регистратор",			Документы.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ПустаяСсылка());
	СтруктураВозврата.Вставить("НомерСтроки",			0);
	СтруктураВозврата.Вставить("ФизическоеЛицо",		Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураВозврата.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураВозврата.Вставить("Банк",					Справочники.КлассификаторБанков.ПустаяСсылка());
	СтруктураВозврата.Вставить("НомерЛицевогоСчета",	"");
	СтруктураВозврата.Вставить("ЗарплатныйПроект",		Справочники.ЗарплатныеПроекты.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамЗарплатныйПроект", парамЗарплатныйПроект);
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Регистратор,
	//|	ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.НомерСтроки,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Банк,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.НомерЛицевогоСчета,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект
	//|ИЗ
	//|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(&парамПериод, ) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Сотрудники КАК ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники
	//|		ПО ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Документ = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка
	//|			И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.ФизическоеЛицо
	//|			И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.Организация
	//|			И (ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.Проведен)
	//|			И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Банк = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.ЗарплатныйПроект.Банк
	//|				ИЛИ ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.ЗарплатныйПроект)
	//|ГДЕ
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо = &парамФизическоеЛицо
	//|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = &парамОрганизация
	//|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = &парамЗарплатныйПроект";
	
	
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Регистратор,
	//|	ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.НомерСтроки,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Банк,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.НомерЛицевогоСчета,
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект
	//|ИЗ
	//|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(&парамПериод, ) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Сотрудники КАК ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники
	//|		ПО ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Документ = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка
	//|			И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.ФизическоеЛицо
	//|			И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.Организация
	//|			И (ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.Проведен)
	//|			И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Банк = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.ЗарплатныйПроект.Банк
	//|				ИЛИ ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = ПодтверждениеОткрытияЛицевыхСчетовСотрудниковСотрудники.Ссылка.ЗарплатныйПроект)
	//|ГДЕ
	//|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо = &парамФизическоеЛицо
	//|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = &парамОрганизация
	//|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = &парамЗарплатныйПроект";
	
	
	//без поддверждения
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация КАК Организация,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект.Банк КАК Банк
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних
	|ГДЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо = &парамФизическоеЛицо
	|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = &парамОрганизация
	|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = &парамЗарплатныйПроект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ДатаОткрытияЛицевогоСчета УБЫВ";
	
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ДанныеРезультата = Результат.Выгрузить()[0];
		
		//СтруктураВозврата.Регистратор			= ДанныеРезультата.Регистратор;
		//СтруктураВозврата.НомерСтроки			= ДанныеРезультата.НомерСтроки;
		СтруктураВозврата.ФизическоеЛицо		= ДанныеРезультата.ФизическоеЛицо;
		СтруктураВозврата.Организация			= ДанныеРезультата.Организация;
		СтруктураВозврата.Банк					= ДанныеРезультата.Банк;
		СтруктураВозврата.НомерЛицевогоСчета	= ДанныеРезультата.НомерЛицевогоСчета;
		СтруктураВозврата.ЗарплатныйПроект		= ДанныеРезультата.ЗарплатныйПроект;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьФамилиюИмяОтчествоФизическогоЛица(парамФизическоеЛицо)
	
	СтруктураФИО = ПолучитьСтруктуруФИОФизическогоЛица(парамФизическоеЛицо);
	
	Возврат СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруФИОФизическогоЛица(парамФизическоеЛицо)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Фамилия", "");
	СтруктураВозврата.Вставить("Имя", "");
	СтруктураВозврата.Вставить("Отчество", "");
	
	МассивФИО = ПолучитьДанныеФИОРегистра(парамФизическоеЛицо);
	
	Если МассивФИО = Неопределено Тогда
		МассивФИО = ПолучитьМассивФИО(СокрЛП(парамФизическоеЛицо.Наименование));
	КонецЕсли;
	
	СтруктураВозврата.Фамилия = МассивФИО[0];
	СтруктураВозврата.Имя = МассивФИО[1];
	СтруктураВозврата.Отчество = МассивФИО[2];
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФИОРегистра(парамФизическоеЛицо)
	
	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо = &парамФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПолученныеДанные = Результат.Выгрузить()[0];
		
		МассивФИО[0] = СокрЛП(ПолученныеДанные.Фамилия);
		МассивФИО[1] = СокрЛП(ПолученныеДанные.Имя);
		МассивФИО[2] = СокрЛП(ПолученныеДанные.Отчество);
		
		Возврат МассивФИО;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивФИО(ФИО)
	
	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодсток = РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодсток.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодсток[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодсток[Индекс];
		КонецЕсли;
	КонецЦикла;
	
	МассивФИО[0] = СокрЛП(МассивФИО[0]);
	МассивФИО[1] = СокрЛП(МассивФИО[1]);
	МассивФИО[2] = СокрЛП(МассивФИО[2]);
	
	Возврат МассивФИО;
	
КонецФункции

//masi
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьНомерЛицевогоСчетаФизическогоЛица(парамФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект)
	
	СписокЛицевыхСчетов = ПолучитьНомераЛицевыхСчетовФизическихЛиц(парамФизическоеЛицо, парамОрганизация, парамЗарплатныйПроект);
	
	Если СписокЛицевыхСчетов.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат УдалитьНецифирныеСимволыИзСтроки(СписокЛицевыхСчетов[0].НомерЛицевогоСчета);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьНомераЛицевыхСчетовФизическихЛиц(парамСписокФизическихЛиц, парамОрганизация, парамЗарплатныйПроект)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВозврата.Колонки.Добавить("НомерЛицевогоСчета", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамСписокФизическихЛиц", парамСписокФизическихЛиц);
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамЗарплатныйПроект", парамЗарплатныйПроект);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.НомерЛицевогоСчета КАК НомерЛицевогоСчета
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних
	|ГДЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо В(&парамСписокФизическихЛиц)
	|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Организация = &парамОрганизация
	|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ЗарплатныйПроект = &парамЗарплатныйПроект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ДатаОткрытияЛицевогоСчета УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаВозврата = Результат.Выгрузить().Скопировать(, "ФизическоеЛицо, НомерЛицевогоСчета");
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

&НаСервере
Функция ПривестиСтроку(парамСтрока, парамКоличествоЗнаков)
	
	Возврат Лев(СокрЛП(парамСтрока), парамКоличествоЗнаков);
	
КонецФункции

&НаСервере
//rarus tyurin 14/09/17 +
Функция ПолучитьФамилиюИмяСОграничениемДлины(парамФамилия, парамИмя, парамРазделитель, парамДлина)
	
	ИмяФамилия = парамФамилия + парамРазделитель + парамИмя;
	
	Если СтрДлина(ИмяФамилия) > парамДлина Тогда
		ИмяФамилия = парамФамилия + парамРазделитель + Лев(парамИмя, 1);
	КонецЕсли;
	
	Возврат ИмяФамилия;
КонецФункции
//rarus tyurin 14/09/17 -

&НаСервере
Функция ДопустимыеСимволыВСтроке(парамСтрока) Экспорт
	
	Возврат
	Найти(парамСтрока, Объект.мСимволРазделитель) = 0;
	
КонецФункции

&НаСервере
Функция ПолучитьФизическоеЛицо(парамФамилия, парамИмя, парамОтчество, парамСерияИНомерПаспорта, парамОрганизация, парамПериод)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПолучитьСписокВладельцевДокумента(парамСерияИНомерПаспорта, парамПериод));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокФизическихЛиц.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	&СписокФизическихЛиц КАК СписокФизическихЛиц";
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("парамФамилия",		СокрЛП(парамФамилия));
	Запрос.УстановитьПараметр("парамИмя",			СокрЛП(парамИмя));
	Запрос.УстановитьПараметр("парамОтчество",		СокрЛП(парамОтчество));
	Запрос.УстановитьПараметр("парамФИО",			СокрЛП(парамФамилия) + " " + СокрЛП(парамИмя) + " " + СокрЛП(парамОтчество));
	Запрос.УстановитьПараметр("парамОрганизация",	парамОрганизация);
	Запрос.УстановитьПараметр("парамПериод",		парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ) КАК ФИОФизическихЛицСрезПоследних
	|ГДЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия = &парамФамилия
	|	И ФИОФизическихЛицСрезПоследних.Имя = &парамИмя
	|	И ФИОФизическихЛицСрезПоследних.Отчество = &парамОтчество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &парамФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВидыЗанятостиСотрудниковСрезПоследних.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ВТФИОФизЛиц
	|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо = ВТФИОФизЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ВТФизическиеЛица
	|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо = ВТФизическиеЛица.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников.СрезПоследних(&парамПериод, ) КАК ВидыЗанятостиСотрудниковСрезПоследних
	|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ВидыЗанятостиСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		КОНЕЦ = &парамОрганизация
	|	И (НЕ ВТФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	|			ИЛИ НЕ ВТФИОФизЛиц.ФизическоеЛицо ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТСписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковСрезПоследних.Период КАК Период,
	|	ВТСписокСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТСписокСотрудников КАК ВТСписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|				&парамПериод,
	|				ВЫБОР
	|					КОГДА ДействуетДо <= &парамПериод
	|							И ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВидСобытия
	|					ИНАЧЕ ВидСобытия
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО ВТСписокСотрудников.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизическихЛиц КАК ВТСписокФизическихЛиц
	|		ПО ВТСписокСотрудников.ФизическоеЛицо = ВТСписокФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	(ВТСписокСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ИЛИ ВТСписокСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		Если ТаблицаРезультата.Количество() = 1 Тогда
			Возврат ТаблицаРезультата[0].ФизическоеЛицо;
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция ПолучитьБИК(парамФамилия, парамИмя, парамОтчество, парамБИК)
	
	Запрос = Новый Запрос;
	
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//
	//Запрос.УстановитьПараметр("СписокФизическихЛиц", ПолучитьСписокВладельцевДокумента(парамСерияИНомерПаспорта, парамПериод));
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СписокФизическихЛиц.ФизическоеЛицо
	//|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	//|ИЗ
	//|	&СписокФизическихЛиц КАК СписокФизическихЛиц";
	//
	//Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("парамФамилия",		СокрЛП(парамФамилия));
	Запрос.УстановитьПараметр("парамИмя",			СокрЛП(парамИмя));
	Запрос.УстановитьПараметр("парамОтчество",		СокрЛП(парамОтчество));
	Запрос.УстановитьПараметр("парамФИО",			СокрЛП(парамФамилия) + " " + СокрЛП(парамИмя) + " " + СокрЛП(парамОтчество));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
	|ГДЕ
	|	ФизическиеЛицаДополнительныеРеквизиты.Ссылка.Имя = &парамИмя
	|	И ФизическиеЛицаДополнительныеРеквизиты.Ссылка.Отчество = &парамОтчество
	|	И ФизическиеЛицаДополнительныеРеквизиты.Ссылка.Фамилия = &парамФамилия";
	
	
	Результат = Запрос.Выполнить();
	
	
	Если Не Результат.Пустой() Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		Если ТаблицаРезультата.Количество() = 1 Тогда
			Возврат ТаблицаРезультата[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции


&НаСервере
Функция ПолучитьФамилиюИОФизическогоЛица(парамФизическоеЛицо) Экспорт
	
	СтруктураФИО = ПолучитьСтруктуруФИОФизическогоЛица(парамФизическоеЛицо);
	
	Возврат СтруктураФИО.Фамилия + " " + Лев(СтруктураФИО.Имя, 1) + "." + Лев(СтруктураФИО.Отчество, 1) + ".";
	
КонецФункции

&НаСервере
Функция ПолучитьСписокУволенныхРаботников(парамОрганизация, парамПериодНачало, парамПериодОкончание)
	
	СписокВозврата = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамПериодНачало", парамПериодНачало);
	Запрос.УстановитьПараметр("парамПериодОкончание", парамПериодОкончание);
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	//|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК ГоловнаяОрганизация,
	//|	ВЫБОР
	//|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	//|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ОрганизацияПоОкончании
	//|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	//|	КОНЕЦ КАК Организация,
	//|	ВЫБОР
	//|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	//|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытияПоОкончании
	//|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	//|	КОНЕЦ КАК ВидСобытия,
	//|	ВЫБОР
	//|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	//|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо
	//|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Период
	//|	КОНЕЦ КАК Период
	//|ПОМЕСТИТЬ ВТРаботникиОрганизаций
	//|ИЗ
	//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(ДОБАВИТЬКДАТЕ(&парамПериодОкончание, ДЕНЬ, 1), ) КАК КадроваяИсторияСотрудниковСрезПоследних
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	//|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ОрганизацияПоОкончании
	//|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	//|		КОНЕЦ = &парамОрганизация
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	//|	ВТРаботникиОрганизаций.Организация
	//|ПОМЕСТИТЬ ВТУволенные
	//|ИЗ
	//|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	//|ГДЕ
	//|	ВТРаботникиОрганизаций.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	//|	И ВТРаботникиОрганизаций.Период МЕЖДУ &парамПериодНачало И &парамПериодОкончание
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	//|	ВТРаботникиОрганизаций.Организация
	//|ПОМЕСТИТЬ ВТРаботающие
	//|ИЗ
	//|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	//|ГДЕ
	//|	ВТРаботникиОрганизаций.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТУволенные.ФизическоеЛицо
	//|ИЗ
	//|	ВТУволенные КАК ВТУволенные
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающие КАК ВТРаботающие
	//|		ПО ВТУволенные.Организация = ВТРаботающие.Организация
	//|			И ВТУволенные.ФизическоеЛицо = ВТРаботающие.ФизическоеЛицо
	//|ГДЕ
	//|	ВТРаботающие.ФизическоеЛицо ЕСТЬ NULL ";
	
	//masi 2017 01 23 заменено обращение к кадровому регистру
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|	КОНЕЦ КАК ВидСобытия,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Период
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТРаботникиОрганизаций
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(ДОБАВИТЬКДАТЕ(&парамПериодОкончание, ДЕНЬ, 1), ) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериодОкончание
	|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		КОНЕЦ = &парамОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	|	ВТРаботникиОрганизаций.Организация
	|ПОМЕСТИТЬ ВТУволенные
	|ИЗ
	|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	|ГДЕ
	|	ВТРаботникиОрганизаций.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|	И ВТРаботникиОрганизаций.Период МЕЖДУ &парамПериодНачало И &парамПериодОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	|	ВТРаботникиОрганизаций.Организация
	|ПОМЕСТИТЬ ВТРаботающие
	|ИЗ
	|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	|ГДЕ
	|	ВТРаботникиОрганизаций.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТУволенные.ФизическоеЛицо
	|ИЗ
	|	ВТУволенные КАК ВТУволенные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающие КАК ВТРаботающие
	|		ПО ВТУволенные.Организация = ВТРаботающие.Организация
	|			И ВТУволенные.ФизическоеЛицо = ВТРаботающие.ФизическоеЛицо
	|ГДЕ
	|	ВТРаботающие.ФизическоеЛицо ЕСТЬ NULL ";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СписокВозврата.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокРаботающихРаботников(парамОрганизация, парамПериод, парамПодразделение)
	
	СписокВозврата = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация",		парамОрганизация);
	Запрос.УстановитьПараметр("парамПериод",			парамПериод);
	
	Запрос.УстановитьПараметр("парамПодразделение",		парамПодразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям",	Не ЗначениеЗаполнено(парамПодразделение));
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	//|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	//|	ВЫБОР
	//|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	//|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ОрганизацияПоОкончании
	//|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	//|	КОНЕЦ КАК Организация,
	//|	ВЫБОР
	//|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	//|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытияПоОкончании
	//|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	//|	КОНЕЦ КАК ВидСобытия
	//|ПОМЕСТИТЬ ВТРаботникиОрганизаций
	//|ИЗ
	//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	//|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ОрганизацияПоОкончании
	//|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	//|		КОНЕЦ = &парамОрганизация
	//|	И (ВЫБОР
	//|				КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	//|						И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|					ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ПодразделениеПоОкончании
	//|				ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Подразделение
	//|			КОНЕЦ В ИЕРАРХИИ (&парамПодразделение)
	//|			ИЛИ &ПоВсемПодразделениям)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	//|	ВТРаботникиОрганизаций.Организация
	//|ПОМЕСТИТЬ ВТРаботающие
	//|ИЗ
	//|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	//|ГДЕ
	//|	ВТРаботникиОрганизаций.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТРаботающие.ФизическоеЛицо
	//|ИЗ
	//|	ВТРаботающие КАК ВТРаботающие";
	
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|	КОНЕЦ КАК ВидСобытия
	|ПОМЕСТИТЬ ВТРаботникиОрганизаций
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		КОНЕЦ = &парамОрганизация
	|	И (ВЫБОР
	|				КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|						И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Подразделение
	|				ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Подразделение
	|			КОНЕЦ В ИЕРАРХИИ (&парамПодразделение)
	|			ИЛИ &ПоВсемПодразделениям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботникиОрганизаций.ФизическоеЛицо,
	|	ВТРаботникиОрганизаций.Организация
	|ПОМЕСТИТЬ ВТРаботающие
	|ИЗ
	|	ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
	|ГДЕ
	|	ВТРаботникиОрганизаций.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТРаботающие.ФизическоеЛицо
	|ИЗ
	|	ВТРаботающие КАК ВТРаботающие";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СписокВозврата.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьРабочееМестоФизическогоЛица(парамФизическоеЛицо, парамОрганизация, парамПериод) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Сотрудник",				Справочники.Сотрудники.ПустаяСсылка());
	СтруктураВозврата.Вставить("ТабельныйНомер",		"");
	СтруктураВозврата.Вставить("Должность",				Справочники.Должности.ПустаяСсылка());
	СтруктураВозврата.Вставить("НаименованиеДолжности",	"");
	СтруктураВозврата.Вставить("КодДолжности",			"");
	СтруктураВозврата.Вставить("ДатаПриемаНаРаботу",	Дата('00010101'));
	СтруктураВозврата.Вставить("ОсновнойДоход",			0);
	СтруктураВозврата.Вставить("СтатусРаботника",		"");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	КадроваяИсторияСотрудниковСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Должность
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|	КОНЕЦ КАК Организация,
	|	ВидыЗанятостиСотрудниковСрезПоследних.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДанныеРабочегоМеста
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|			&парамПериод,
	|			Сотрудник.ФизическоеЛицо = &парамФизическоеЛицо
	|				И ВЫБОР
	|					КОГДА ДействуетДо <= &парамПериод
	|							И ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВидСобытия
	|					ИНАЧЕ ВидСобытия
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)) КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников.СрезПоследних(&парамПериод, ) КАК ВидыЗанятостиСотрудниковСрезПоследних
	|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ВидыЗанятостиСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		КОНЕЦ = &парамОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДанныеРабочегоМеста.Сотрудник КАК Сотрудник,
	|	ВТДанныеРабочегоМеста.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТДанныеРабочегоМеста.Период КАК Период,
	|	ВТДанныеРабочегоМеста.Должность КАК Должность,
	|	МАКСИМУМ(ЕСТЬNULL(КадроваяИсторияСотрудников.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПриемаНаРаботу,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|	КОНЕЦ КАК ВидСобытия,
	|	ВТДанныеРабочегоМеста.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеРабочегоМеста КАК ВТДанныеРабочегоМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ПО ВТДанныеРабочегоМеста.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, Сотрудник.ФизическоеЛицо = &парамФизическоеЛицо) КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО ВТДанныеРабочегоМеста.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|			И (ВТДанныеРабочегоМеста.Организация = ВЫБОР
	|				КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|						И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|				ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			КОНЕЦ)
	|ГДЕ
	|	(ВТДанныеРабочегоМеста.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ИЛИ ВТДанныеРабочегоМеста.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРабочегоМеста.Сотрудник,
	|	ВТДанныеРабочегоМеста.ТабельныйНомер,
	|	ВТДанныеРабочегоМеста.Период,
	|	ВТДанныеРабочегоМеста.Должность,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|		ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия
	|	КОНЕЦ,
	|	ВТДанныеРабочегоМеста.ВидЗанятости";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СтрокаРезультата = Результат.Выгрузить()[0];
		СтруктураВозврата.Сотрудник				= СтрокаРезультата.Сотрудник;
		СтруктураВозврата.ТабельныйНомер		= СтрокаРезультата.ТабельныйНомер;
		СтруктураВозврата.Должность				= СтрокаРезультата.Должность;
		СтруктураВозврата.НаименованиеДолжности	= СтрокаРезультата.Должность.Наименование;
		СтруктураВозврата.КодДолжности			= ПолучитьКодДолжности(СтрокаРезультата.Должность);
		СтруктураВозврата.ДатаПриемаНаРаботу	= СтрокаРезультата.ДатаПриемаНаРаботу;
		СтруктураВозврата.СтатусРаботника		= ?(СтрокаРезультата.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение, "Удален", "Активный");
		
		МесячнаяТарифнаяСтавка = МесячнаяТарифнаяСтавкаРаботникаОрг(СтрокаРезультата.Сотрудник, парамПериод);
		СуммаРайонногоКоэффициента = РайонныйКоэффициентРаботникаОрг(СтрокаРезультата.Сотрудник, парамПериод, МесячнаяТарифнаяСтавка);
		СуммаСевернойНадбавки = СевернаяНадбавкаРаботникаОрг(СтрокаРезультата.Сотрудник, парамПериод, МесячнаяТарифнаяСтавка);
		
		СтруктураВозврата.ОсновнойДоход			= (МесячнаяТарифнаяСтавка + СуммаРайонногоКоэффициента + СуммаСевернойНадбавки) * 0.87; // вычитаем НДФЛ
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьГражданствоФизическогоЛица(парамФизическоеЛицо, парамПериод) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Страна
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&парамПериод, ФизическоеЛицо = &парамФизическоеЛицо) КАК ГражданствоФизЛицСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СтрокаРезультата = Результат.Выгрузить()[0];
		Страна					= СтрокаРезультата.Страна;
	Иначе
		Страна					= Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",	Страна);
	СтруктураВозврата.Вставить("КодСтраны",	Страна.Код);
	
	Возврат СтруктураВозврата;
	
КонецФункции

//aliega 07.02.2019------------------------------------------------
&НаСервере
Функция ПолучитьДанныеОМСФизическогоЛица(парамФизическоеЛицо, парамПериод) Экспорт
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);	
	
	Запрос.Текст	=	"ВЫБРАТЬ
	|	ФизическиеЛицаДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|	ФизическиеЛицаДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
	|	ФизическиеЛицаДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК Значение,
	|	ФизическиеЛицаДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
	|ИЗ
	|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
	|ГДЕ
	|	ФизическиеЛицаДополнительныеРеквизиты.Ссылка = &парамФизическоеЛицо
	|	И (ФизическиеЛицаДополнительныеРеквизиты.Свойство = &Серия
	|			ИЛИ ФизическиеЛицаДополнительныеРеквизиты.Свойство = &Номер)";
	
	Запрос.УстановитьПараметр("Серия", 	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Серия ОМС"));
	Запрос.УстановитьПараметр("Номер", 	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер ОМС"));		
	
	Результат	=	Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СтрокаРезультата0	=	Результат.Выгрузить()[0];
		Если СтрДлина(СтрокаРезультата0.Значение) > 6 Тогда
			СтрокаРезультата0.Значение	=	"";
			СтрокаРезультата1			=	Результат.Выгрузить()[0];
		Иначе 
			СтрокаРезультата0			= Результат.Выгрузить()[0];
			СтрокаРезультата1			= Результат.Выгрузить()[1];
		КонецЕсли;
		ДокументСерия		= СтрокаРезультата0.Значение;
		ДокументНомер		= СтрокаРезультата1.Значение;
	Иначе
		ДокументСерия		= "";
		ДокументНомер		= "";
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДокументСерия",				ДокументСерия);
	СтруктураВозврата.Вставить("ДокументНомер",				ДокументНомер);
	
	Возврат СтруктураВозврата;	
	
КонецФункции
//aliega 07.02.2019------------------------------------------------

&НаСервере
Функция ПолучитьПаспортныеДанныеФизическогоЛица(парамФизическоеЛицо, парамПериод) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамФизическоеЛицо", парамФизическоеЛицо);
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&парамПериод,
	|			Физлицо = &парамФизическоеЛицо
	|				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СтрокаРезультата = Результат.Выгрузить()[0];
		ДокументВид							= СтрокаРезультата.ДокументВид;
		ДокументСерия						= СтрокаРезультата.ДокументСерия;
		ДокументНомер						= СтрокаРезультата.ДокументНомер;
		ДокументДатаВыдачи					= СтрокаРезультата.ДокументДатаВыдачи;
		ДокументКемВыдан					= СтрокаРезультата.ДокументКемВыдан;
		ДокументКодПодразделения			= СтрокаРезультата.ДокументКодПодразделения;
	Иначе
		ДокументВид							= Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
		ДокументСерия						= "";
		ДокументНомер						= "";
		ДокументДатаВыдачи					= Дата('00010101');
		ДокументКемВыдан					= "";
		ДокументКодПодразделения			= "";
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДокументВид",				ДокументВид);
	СтруктураВозврата.Вставить("ДокументКод",				ПолучитьКодДокументаУдостоверяющегоЛичность(ДокументВид));
	СтруктураВозврата.Вставить("ДокументСерия",				ДокументСерия);
	СтруктураВозврата.Вставить("ДокументНомер",				ДокументНомер);
	СтруктураВозврата.Вставить("ДокументДатаВыдачи",		ДокументДатаВыдачи);
	СтруктураВозврата.Вставить("ДокументКемВыдан",			ДокументКемВыдан);
	СтруктураВозврата.Вставить("ДокументКодПодразделения",	ДокументКодПодразделения);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеНеосновныхДокументовФизическогоЛица(парамФизическоеЛицо) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДокументКод", "");
	СтруктураВозврата.Вставить("ДокументНомер", "");
	
	Если Не ПустаяСтрока(СтрЗаменить(парамФизическоеЛицо.СтраховойНомерПФР, "-", "")) Тогда
		СтруктураВозврата.ДокументКод = "СНИЛС";
		СтруктураВозврата.ДокументНомер = парамФизическоеЛицо.СтраховойНомерПФР;
	ИначеЕсли Не ПустаяСтрока(парамФизическоеЛицо.ИНН) Тогда
		СтруктураВозврата.ДокументКод = "ИНН";
		СтруктураВозврата.ДокументНомер = парамФизическоеЛицо.ИНН;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресОбъекта(парамОбъект, парамВидАдреса) Экспорт
	
	КонтактныеДанные = ПолучитьКонтактныеДанные(парамОбъект, Перечисления.ТипыКонтактнойИнформации.Адрес, парамВидАдреса);
	
	Если ЗначениеЗаполнено(КонтактныеДанные) Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Адрес",		"");
		СтруктураВозврата.Вставить("Индекс",	"");
		СтруктураВозврата.Вставить("Район",		"");
		СтруктураВозврата.Вставить("Город",		"");
		СтруктураВозврата.Вставить("Улица",		"");
		СтруктураВозврата.Вставить("Дом",		"");
		СтруктураВозврата.Вставить("Корпус",	"");
		СтруктураВозврата.Вставить("Квартира",	"");
		
		СтранаРоссия = Справочники.СтраныМира.Россия;
		
		// Пытаемся заполнить из параметров
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактныеДанные.ЗначенияПолей) Тогда
			РезультатыЧтения = Новый Структура;
			XDTOСтруктура = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(КонтактныеДанные.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
			Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
				XDTOСтруктура.Представление = КонтактныеДанные.Представление;
				XDTOСтруктура.Состав.Страна = Строка(СтранаРоссия);
			КонецЕсли;
		Иначе
			XDTOСтруктура = УправлениеКонтактнойИнформациейЛокализация.АдресXMLВXDTO(КонтактныеДанные.ЗначенияПолей, КонтактныеДанные.Представление, );
		КонецЕсли;
		
		// Разбираем адрес
		АдресРФ = XDTOСтруктура.Состав.Состав;
		Страна = СокрЛП(XDTOСтруктура.Состав.Страна);
		//masi 2017 07 20
		//Если УправлениеКонтактнойИнформациейСлужебный.ЭтоРоссийскийАдрес(АдресРФ) Тогда
		Если Страна = "РОССИЯ" или Страна = "Россия" Тогда
			
			//Индекс = УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(АдресРФ);
			Индекс = Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(АдресРФ);
			
			//Индекс="1";
			Район = РайонАдреса(АдресРФ);
			
			// Район = Обработки.РасширенныйВводКонтактнойИнформации.район
			
			
			СубъектРФ = АдресРФ.СубъектРФ;
			Город = АдресРФ.Город;
			НаселенныйПункт = АдресРФ.НаселПункт;
			
			Город_НаселенныПункт = Город;
			Если ПустаяСтрока(Город) Тогда
				Город_НаселенныПункт = СокрЛП("" + СубъектРФ + " " + НаселенныйПункт);
			ИначеЕсли Не ПустаяСтрока(НаселенныйПункт) Тогда
				Город_НаселенныПункт = СокрЛП("" + Город + " " + НаселенныйПункт);
			КонецЕсли;
			
			Если ПустаяСтрока(Район) И ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) Тогда
				Город = СубъектРФ;
				Город_НаселенныПункт = СубъектРФ;
			КонецЕсли;
			
			Улица = АдресРФ.Улица;
			
			Дом = "";
			Корпус = "";
			Квартира = "";
			
			// Строения и помещения
			//Данные = УправлениеКонтактнойИнформациейСлужебный.ЗданияИПомещенияАдреса(АдресРФ);
			//masi
			Данные = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(АдресРФ);
			
			
			Для Ном = 1 По Мин(Данные.Здания.Количество(), 1) Цикл
				Строка = Данные.Здания[Ном - 1];
				Дом = Строка.Значение;
			КонецЦикла;
			
			Для Ном = 2 По Данные.Здания.Количество() Цикл
				Строка = Данные.Здания[Ном - 1];
				Корпус = Строка.Значение;
			КонецЦикла;
			
			Для Ном = 1 По Мин(Данные.Помещения.Количество(), 1) Цикл
				Строка = Данные.Помещения[Ном - 1];
				Квартира = Строка.Значение;
			КонецЦикла;
			
			Если ПустаяСтрока(Улица) Тогда 
				Улица = НаселенныйПункт;
			КонецЕсли;
			
			Если ПустаяСтрока(Дом) Тогда 
				Дом = Корпус;
			КонецЕсли;
			
			Адрес = Строка(Индекс) + ", " + Строка(Район) + ", " + Строка(Город) + ", " + Строка(НаселенныйПункт) + ", " + Строка(Улица) + ", " + Строка(Дом) + ", " + Строка(Корпус) + ", " +Строка(Квартира);
			
			СтруктураВозврата.Индекс	= Индекс;
			СтруктураВозврата.Район		= Район;
			СтруктураВозврата.Город		= Город_НаселенныПункт;
			СтруктураВозврата.Улица		= Улица;
			СтруктураВозврата.Дом		= Дом;
			СтруктураВозврата.Корпус	= Корпус;
			СтруктураВозврата.Квартира	= Квартира;
			
		Иначе
			// Это иностранный адрес
			Адрес = СокрЛП(АдресРФ);
		КонецЕсли;
		
		СтруктураВозврата.Адрес = Адрес;
		
		Возврат СтруктураВозврата;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтактныеДанные(парамОбъект, парамТип, парамВид)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОбъект", парамОбъект);
	Запрос.УстановитьПараметр("парамТип", парамТип);
	Запрос.УстановитьПараметр("парамВид", парамВид);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип,
	|	ФизическиеЛицаКонтактнаяИнформация.Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей,
	|	ФизическиеЛицаКонтактнаяИнформация.Страна,
	|	ФизическиеЛицаКонтактнаяИнформация.Регион,
	|	ФизическиеЛицаКонтактнаяИнформация.Город,
	|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП,
	|	ФизическиеЛицаКонтактнаяИнформация.ДоменноеИмяСервера,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &парамОбъект
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = &парамТип
	|	И ФизическиеЛицаКонтактнаяИнформация.Вид = &парамВид
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Тип,
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Страна,
	|	ОрганизацииКонтактнаяИнформация.Регион,
	|	ОрганизацииКонтактнаяИнформация.Город,
	|	ОрганизацииКонтактнаяИнформация.АдресЭП,
	|	ОрганизацииКонтактнаяИнформация.ДоменноеИмяСервера,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефона,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &парамОбъект
	|	И ОрганизацииКонтактнаяИнформация.Тип = &парамТип
	|	И ОрганизацииКонтактнаяИнформация.Вид = &парамВид";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		СтрокаРезультата = Результат.Выгрузить()[0];
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Тип",					СтрокаРезультата.Тип);
		СтруктураВозврата.Вставить("Вид",					СтрокаРезультата.Вид);
		СтруктураВозврата.Вставить("Представление",			СтрокаРезультата.Представление);
		СтруктураВозврата.Вставить("ЗначенияПолей",			СтрокаРезультата.ЗначенияПолей);
		СтруктураВозврата.Вставить("Страна",				СтрокаРезультата.Страна);
		СтруктураВозврата.Вставить("Регион",				СтрокаРезультата.Регион);
		СтруктураВозврата.Вставить("Город",					СтрокаРезультата.Город);
		СтруктураВозврата.Вставить("АдресЭП",				СтрокаРезультата.АдресЭП);
		СтруктураВозврата.Вставить("ДоменноеИмяСервера",	СтрокаРезультата.ДоменноеИмяСервера);
		СтруктураВозврата.Вставить("НомерТелефона",			СтрокаРезультата.НомерТелефона);
		СтруктураВозврата.Вставить("НомерТелефонаБезКодов",	СтрокаРезультата.НомерТелефонаБезКодов);
		
		Возврат СтруктураВозврата;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТелефонОбъекта(парамОбъект, парамВидТелефона) Экспорт
	
	КонтактныеДанные = ПолучитьКонтактныеДанные(парамОбъект, Перечисления.ТипыКонтактнойИнформации.Телефон, парамВидТелефона);
	
	Если ЗначениеЗаполнено(КонтактныеДанные) Тогда
		
		// Пытаемся заполнить из параметров
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактныеДанные.ЗначенияПолей) Тогда
			РезультатыЧтения = Новый Структура;
			XDTOСтруктура = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(КонтактныеДанные.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения);
			Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
				XDTOСтруктура.Представление = Параметры.Представление;
			КонецЕсли;
		Иначе
			XDTOСтруктура = УправлениеКонтактнойИнформациейЛокализация.ДесериализацияТелефона(КонтактныеДанные.ЗначенияПолей, КонтактныеДанные.Представление, );
		КонецЕсли;
		
		// Разбираем телефон
		ТелефонРФ = XDTOСтруктура.Состав;
		
		КодСтраны = ТелефонРФ.КодСтраны;
		КодГорода = ТелефонРФ.КодГорода;
		НомерТелефона = ТелефонРФ.Номер;
		
		Телефон = НомерТелефона;
		Если Не ПустаяСтрока(КодГорода) Тогда
			Если Не ПустаяСтрока(Телефон) Тогда
				Телефон = " " + Телефон;
			КонецЕсли;
			Телефон = КодГорода + Телефон;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Телефон",		Телефон);
		СтруктураВозврата.Вставить("КодСтраны",		КодСтраны);
		СтруктураВозврата.Вставить("КодГорода",		КодГорода);
		СтруктураВозврата.Вставить("НомерТелефона",	НомерТелефона);
		
		Возврат СтруктураВозврата;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМестоРожденияФизическогоЛица(парамФизическоеЛицо) Экспорт
	
	СтруктураМестоРождения = РазложитьМестоРождения(парамФизическоеЛицо.МестоРождения, Ложь);
	
	Результат = СтруктураМестоРождения.Страна;
	
	Если Не ПустаяСтрока(СтруктураМестоРождения.Область) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + ", ";
		КонецЕсли;
		Результат = Результат + СтруктураМестоРождения.Область;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураМестоРождения.Район) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + ", ";
		КонецЕсли;
		Результат = Результат + СтруктураМестоРождения.Район;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураМестоРождения.НаселенныйПункт) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + ", ";
		КонецЕсли;
		Результат = Результат + СтруктураМестоРождения.НаселенныйПункт;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПреобразоватьКодСтраныМира(Знач парамКодСтраны)
	
	парамКодСтраны = СокрЛП(парамКодСтраны);
	
	НайденноеЗначение = Объект.мСоответствияКодовСтранМира.НайтиПоЗначению(парамКодСтраны);
	
	Если НайденноеЗначение = Неопределено Тогда
		Возврат парамКодСтраны;
	Иначе
		Возврат НайденноеЗначение.Представление;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКодДолжности(парамДолжность)
	
	Результат = Неопределено;
	
	Если Результат = Неопределено Тогда
		Результат = "05";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МесячнаяТарифнаяСтавкаРаботникаОрг(парамСотрудник, парамПериод)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",	парамСотрудник);
	Запрос.УстановитьПараметр("парамПериод",	парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
	|		ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
	|	КОНЕЦ КАК Показатель
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
	|			&парамПериод,
	|			Сотрудник = &парамСотрудник
	|				И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)) КАК ПлановыеНачисленияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
	|				&парамПериод,
	|				Сотрудник = &парамСотрудник
	|					И Показатель.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо <= &парамПериод
	|					И ПлановыеНачисленияСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисленияСрезПоследних.Используется
	|			ИНАЧЕ ПлановыеНачисленияСрезПоследних.Используется
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Показатель;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция РайонныйКоэффициентРаботникаОрг(парамСотрудник, парамПериод, парамМесячнаяТарифнаяСтавка)
	
	Возврат парамМесячнаяТарифнаяСтавка * ПолучитьПоказательРайонногоКоэффициента(парамСотрудник, парамПериод);
	
КонецФункции

&НаСервере
Функция СевернаяНадбавкаРаботникаОрг(парамСотрудник, парамПериод, парамМесячнаяТарифнаяСтавка)
	
	
	Возврат парамМесячнаяТарифнаяСтавка * ПолучитьПоказательСевернойНадбавки(парамСотрудник, парамПериод);
	
КонецФункции

&НаСервере
Функция ПолучитьКодДокументаУдостоверяющегоЛичность(парамДокументВид)
	
	СоответствиеВидовИКодовДокументов = ПолучитьСоответствиеВидовИКодовДокументов();
	
	Результат = СоответствиеВидовИКодовДокументов.Получить(парамДокументВид);
	
	Если Результат = Неопределено Тогда
		Результат = "ИныеДокМВД";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина)
	
	Особое = 0;
	НаселенныйПункт = "";
	Район = "";
	Область = "";
	Страна = "";
	
	МассивМестоРождения	= РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" Тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Особое",			Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",	НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",				Район);
	СтруктураВозврата.Вставить("Область",			Область);
	СтруктураВозврата.Вставить("Страна",			Страна);
	
	Возврат СтруктураВозврата;
	
КонецФункции	 

&НаСервере
Функция ПолучитьПоказательРайонногоКоэффициента(парамСотрудник, парамПериод)
	
	Если РасчетЗарплаты.ВостребованностьРКиСН().РайонныйКоэффициент Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("парамСотрудник",	парамСотрудник);
		Запрос.УстановитьПараметр("парамПериод",	парамПериод);
		
		//Запрос.Текст =
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ВЫБОР
		//|		КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
		//|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ЗначениеПоОкончании
		//|		ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
		//|	КОНЕЦ КАК Показатель
		//|ИЗ
		//|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
		//|			&парамПериод,
		//|			Сотрудник = &парамСотрудник
		//|				И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)) КАК ПлановыеНачисленияСрезПоследних
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
		//|				&парамПериод,
		//|				Сотрудник = &парамСотрудник
		//|					И Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		//|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
		//|ГДЕ
		//|	ВЫБОР
		//|			КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо <= &парамПериод
		//|					И ПлановыеНачисленияСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|				ТОГДА ПлановыеНачисленияСрезПоследних.ИспользуетсяПоОкончании
		//|			ИНАЧЕ ПлановыеНачисленияСрезПоследних.Используется
		//|		КОНЕЦ";
		
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
		|		ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
		|	КОНЕЦ КАК Показатель
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
		|			&парамПериод,
		|			Сотрудник = &парамСотрудник
		|				И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)) КАК ПлановыеНачисленияСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
		|				&парамПериод,
		|				Сотрудник = &парамСотрудник
		|					И Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо <= &парамПериод
		|					И ПлановыеНачисленияСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ПлановыеНачисленияСрезПоследних.Используется
		|			ИНАЧЕ ПлановыеНачисленияСрезПоследних.Используется
		|		КОНЕЦ";
		
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Показатель = Макс(Результат.Выгрузить()[0].Показатель, 1) - 1;
		Иначе
			Показатель = 0;
		КонецЕсли;
		
	Иначе
		Показатель = 0;
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказательСевернойНадбавки(парамСотрудник, парамПериод)
	
	Если РасчетЗарплаты.ВостребованностьРКиСН().СевернаяНадбавка Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("парамСотрудник",		парамСотрудник);
		Запрос.УстановитьПараметр("парамПериод",		парамПериод);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо <= &парамПериод
		|				И ПлановыеНачисленияСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ПлановыеНачисленияСрезПоследних.Размер
		|		ИНАЧЕ ПлановыеНачисленияСрезПоследних.Размер
		|	КОНЕЦ КАК Показатель
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
		|			&парамПериод,
		|			Сотрудник = &парамСотрудник
		|				И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)) КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПлановыеНачисленияСрезПоследних.ДействуетДо <= &парамПериод
		|					И ПлановыеНачисленияСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ПлановыеНачисленияСрезПоследних.Используется
		|			ИНАЧЕ ПлановыеНачисленияСрезПоследних.Используется
		|		КОНЕЦ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Показатель = КадровыйУчетРасширенный.ПроцентСевернойНадбавки(парамСотрудник, парамПериод) / 100;
		Иначе
			Показатель = 0;
		КонецЕсли;
		
	Иначе
		Показатель = 0;
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеВидовИКодовДокументов()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,				"Паспорт"); // Паспорт гражданина СССР
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"ЗагрПаспСССР"); // Загранпаспорт гражданина СССР
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"СвРождении"); // Свидетельство о рождении
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,		"УдстЛичности"); // Удостоверение личности офицера
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота,		"ПаспМинМорФл"); // Паспорт Минморфлота
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет,				"ВоенныйБилет"); // Военный билет солдата (матроса, сержанта, старшины)
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт,	"ДипПаспРФ"); // Дипломатический паспорт гражданина Российской Федерации
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"ПаспортРФ"); // Паспорт гражданина Российской Федерации
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,			"ЗагрПаспРФ"); // Загранпаспорт гражданина Российской Федерации
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"ПаспМоряка"); // Паспорт моряка
	СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса,"ВоенБилОфЗап"); // Военный билет офицера запаса
	//Чтоб находил и другие виды докуметов, но лучше так не делать
	Попытка
		СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Иностранный паспорт"),								"ЗагрПаспорт"); // Иностранный паспорт
	Исключение	
	КонецПопытки;
	Попытка
		СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Временное удостоверение личности гражданина РФ"),	"ВремУдост"); // Временное удостоверение личности гражданина РФ
	Исключение	
	КонецПопытки;
	Попытка
		СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Вид на жительство"),									"ВидНаЖительс"); // Вид на жительство
	Исключение	
	КонецПопытки;
	Попытка
		СоответствиеВозврата.Вставить(Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Свидетельство о предоставлении временного убежища на территории Российской Федерации"),									"УдостБежРФ"); // Вид на жительство
	Исключение	
	КонецПопытки;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаДляЗагрузкиДанныхБанковскихКартНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляЗагрузки(Объект.ИмяФайлаДляЗагрузкиДанныхБанковскихКарт);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляЗагрузки(парамЗначение, ПроверятьСуществование = Истина)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.ПолноеИмяФайла				= парамЗначение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= ПроверятьСуществование;
	ДиалогВыбораФайла.Расширение					= "txt";
	ДиалогВыбораФайла.Фильтр						= "Текстовые документы (*.txt)|*.txt";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		парамЗначение = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРаботников(парамОрганизация, парамПериод)
	
	СписокВозврата = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", парамОрганизация);
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	//|ИЗ
	//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	//|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ОрганизацияПоОкончании
	//|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	//|		КОНЕЦ = &парамОрганизация";
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&парамПериод, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <= &парамПериод
	|					И КадроваяИсторияСотрудниковСрезПоследних.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|			ИНАЧЕ КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		КОНЕЦ = &парамОрганизация";
	
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		СписокВозврата.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьКодСтажаРаботы(ДатаНачала, ДатаОкончания)
	
	Лет	= 0;
	Месяцев = 0;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		РазобратьРазностьДат(ДатаОкончания, ДатаНачала, Лет, Месяцев);
	КонецЕсли;
	
	Месяцев = Лет * 12 + Месяцев;
	
	Если Месяцев <= 3 Тогда
		КодСтажа = "01";
	ИначеЕсли Месяцев <= 6 Тогда
		КодСтажа = "02";
	ИначеЕсли Месяцев <= 12 Тогда
		КодСтажа = "03";
	ИначеЕсли Месяцев <= 36 Тогда
		КодСтажа = "05";
	Иначе
		КодСтажа = "06";
	КонецЕсли;
	
	Возврат КодСтажа;
	
КонецФункции

&НаСервере
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0)
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата, -1)) / 86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -12);
			Месяцев = 12;
		КонецЕсли;
		Лет		= Макс(				Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев +	Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней +		День(ВременнаяДата)		- День(Дата2),	0);
		
		// скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах
		Если Дата2 <> (ДобавитьМесяц(Дата1, -Лет * 12 - Месяцев) - Дней * 86400) Тогда
			Дней = Дней + ((ДобавитьМесяц(Дата1, -Лет * 12 - Месяцев) - Дней * 86400) - Дата2) / 86400;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)
	
	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(парамИмяМакета)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет(парамИмяМакета);
	
	Возврат Макет;
	
КонецФункции

&НаСервере
Функция УдалитьНецифирныеСимволыИзСтроки(парамСтрока)
	
	Результат = "";
	
	СписокЦифирныхСимволов = ПолучитьСписокЦифирныхСимволов();
	
	Для Ном = 1 По СтрДлина(парамСтрока) Цикл
		
		ТекСимвол = Сред(парамСтрока, Ном, 1);
		
		Если СписокЦифирныхСимволов.НайтиПоЗначению(ТекСимвол) <> Неопределено Тогда
			
			Результат = Результат + ТекСимвол;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЦифирныхСимволов()
	
	СписокВозврата = Новый СписокЗначений;
	
	СписокВозврата.Добавить("0");
	СписокВозврата.Добавить("1");
	СписокВозврата.Добавить("2");
	СписокВозврата.Добавить("3");
	СписокВозврата.Добавить("4");
	СписокВозврата.Добавить("5");
	СписокВозврата.Добавить("6");
	СписокВозврата.Добавить("7");
	СписокВозврата.Добавить("8");
	СписокВозврата.Добавить("9");
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВладельцевДокумента(парамСерияИНомерДокумента, парамПериод)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамПериод", парамПериод);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&парамПериод, ) КАК ДокументыФизическихЛицСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Для Каждого ТекСтрока Из Результат.Выгрузить() Цикл
			
			Если УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.ДокументСерия) + УдалитьНецифирныеСимволыИзСтроки(ТекСтрока.ДокументНомер) = УдалитьНецифирныеСимволыИзСтроки(парамСерияИНомерДокумента) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), ТекСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

&НаСервере
Функция ЭтоРоссийскийРубль(парамКодВалюты) Экспорт
	
	Возврат СокрЛП(парамКодВалюты) = "810" Или ВРег(СокрЛП(парамКодВалюты)) = "RUR";
	
КонецФункции

&НаСервере
Функция СконвертироватьСумму(парамСумма, парамКодВалюты, парамКурсВалюты) Экспорт
	
	Возврат парамСумма / ?(ЭтоРоссийскийРубль(парамКодВалюты), 1, ?(парамКурсВалюты = 0, 1, парамКурсВалюты));
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуПредставленияСпискаВедомостей(парамСписокВедомостей) Экспорт
	
	Результат = "";
	
	Для Каждого ТекВедомость Из парамСписокВедомостей Цикл
		
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + "; ";
		КонецЕсли;
		
		Результат = Результат +
		СокрЛП(ТекВедомость.ВедомостьНаВыплатуЗарплатыВБанк.Номер) + " от " + Формат(ТекВедомость.ВедомостьНаВыплатуЗарплатыВБанк.Дата, Объект.мФорматДаты5);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл
		ПозицияТочки = ПозицияТочки - 1;
	КонецЦикла;
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСписокВедомостей(парамСписокВедомостей)
	
	Объект.СписокВедомостей.Очистить();
	Для каждого Строка из парамСписокВедомостей.ВыгрузитьЗначения() Цикл
		НоваяСтрока = Объект.СписокВедомостей.Добавить();
		НоваяСтрока.ВедомостьНаВыплатуЗарплатыВБанк = Строка;
	КонецЦикла;
	
	Объект.ВедомостьНаВыплатуЗарплатыВБанк = ПолучитьСтрокуПредставленияСпискаВедомостей(Объект.СписокВедомостей);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСпискаВедомостейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ЗагрузитьСписокВедомостей(РезультатЗакрытия.СписокВедомостей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестра(ДанныеФайлаРеестра, ИмяФайлаРеестра)
	
	ФайлРеестра = Новый ТекстовыйДокумент;
	
	ФайлРеестра.УстановитьТекст(ДанныеФайлаРеестра);
	
	ФайлРеестра.Записать(Объект.ПапкаДляВыгрузкиФайлов + "\" + ИмяФайлаРеестра, Объект.мКодировка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганВыдачиДокумента(КодДокумента, ОрганВыдачиДокумента) Экспорт
	
	Если КодДокумента = "СНИЛС" Тогда
		ОрганВыдачиДокумента = "Пенсионный фонд РФ";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





#Область ФункцииРаботыСКонтактнымиДанными

//masi 2017 07 20 {+
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
//masi 2017 07 20 -}



&НаСервере
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		//Результат = Неопределено;
		//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		
		//masi 2017 07 20
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		
		//XDTOТип = XDTOАдрес.Тип();
		//Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		//	АдресРФ = XDTOАдрес;
		//Иначе
		//	АдресРФ = XDTOАдрес.Состав;
		//КонецЕсли;
		
		//Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
		//	Возврат УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, УправлениеКонтактнойИнформациейКлиентСервер.XPathРайона());
		//КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, РаботаСАдресами.XPathРайона());
		КонецЕсли;
		
		
		
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

&НаСервере
Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

&НаКлиенте
Процедура ДополнительныеУсловияПриИзменении(Элемент)
	СохранитьЗначение_ДополнительныеУсловия(Объект.ДополнительныеУсловия);
	СформироватьИменаФайловРеестров();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗачисленияПриИзменении(Элемент)
	СохранитьЗначение_ВидЗачисления(Объект.ВидЗачисления);
	СформироватьИменаФайловРеестров();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяФайлаРеестрСКП(Команда)
	СформироватьИмяФайлаРеестраНаСКП();	// Вставить содержимое обработчика.
КонецПроцедуры

//aliega 16.01.2019------------------------------------------------------
&НаКлиенте
Процедура РеестрСКППередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "РеестрСКПКодДокумента" Или Элемент.ТекущийЭлемент.Имя = "РеестрСКПКодВторогоДокумента" Тогда
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		ЗаполнитьОрганВыдачиДокумента(ТекущаяСтрока.КодВторогоДокумента, ТекущаяСтрока.КемВыданВторойДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

//aliega 16.01.2019------------------------------------------------------

&НаКлиенте
Процедура РеестрСКМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "РеестрСКМКодДокумента" Или Элемент.ТекущийЭлемент.Имя = "РеестрСКМКодВторогоДокумента" Тогда
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		ЗаполнитьОрганВыдачиДокумента(ТекущаяСтрока.КодВторогоДокумента, ТекущаяСтрока.КемВыданВторойДокумент);
		
	КонецЕсли;
	
КонецПроцедуры


//aliega 16.01.2019------------------------------------------------------
&НаКлиенте
Процедура РеестрСКПФизическоеЛицоПриИзменении(Элемент)
	ЗаполнитьДанныеСтрокиРеестраНаВыпускСКП(Элементы.РеестрСКП.ТекущиеДанные.НомерСтроки, Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании, Объект.Банк, Объект.ТипБанковскихКарт, Объект.ДатаРеестраНаВыпускБанковскихКарт);
КонецПроцедуры
//aliega 16.01.2019------------------------------------------------------
&НаКлиенте
Процедура КнопкаЗаполнитьРеестрНаВыпускСКП(Команда)
	ЗаполнитьРеестрНаВыпускСКП(Объект.Организация, Объект.ЭмбоссируемоеНазваниеКомпании, Объект.Банк, Объект.ЗарплатныйПроект, Объект.ТипБанковскихКарт, Объект.ДатаРеестраСКП, Объект.Подразделение);
КонецПроцедуры
// Плюснин ЕС 24.06.2024
&НаКлиенте
Процедура есОткорректироватьНомераТелефонов(Команда) 	 
	Для каждого Стр из Объект.РеестрНаВыпускБанковскихКарт Цикл 
		Если не СтрНачинаетсяС(Стр.ТелефонМобильный,"9") или не Сред(Стр.ТелефонМобильный,4,1) = " "  Тогда
			Стр.ТелефонМобильный = ОткорректироватьНомераТелефонов(Стр.ТелефонМобильный);
		КонецЕсли;
		Если СтрДлина(Стр.ТелефонМобильный) < 11 и ЗначениеЗаполнено(Стр.ТелефонМобильный) Тогда
			Сообщить("В строке " + Стр.НомерСтроки + " неверно указан номер мобильного телефона. Пожалуйста, укажите номер телефона в формате 912 1231212.");
		КонецЕсли;
		
		Если ТолькоЦифрыВСтроке(Стр.ТелефонРабочий) и СтрДлина(Стр.ТелефонРабочий) = 11 Тогда	
				Длина = СтрДлина(Стр.ТелефонРабочий);
				РабочийНомер = Сред(Стр.ТелефонРабочий,2,Длина);
				РабочийНомерСТремяЦифрами  = Лев(РабочийНомер,3) + " "  + Сред(РабочийНомер,4);
				Стр.ТелефонРабочий = РабочийНомерСТремяЦифрами;
			ИначеЕсли СтрДлина(СтрРазделить(Строка(Стр.ТелефонРабочий)," ")[0]) = 4 Тогда
				 Длина = СтрДлина(Стр.ТелефонРабочий);
					РабочийНомер = Сред(Стр.ТелефонРабочий,2,Длина);
					РабочийНомерСТремяЦифрами  = Лев(РабочийНомер,3) + " "  + Сред(РабочийНомер,5);
					Стр.ТелефонРабочий = РабочийНомерСТремяЦифрами;	
			Иначе
				Если Не СтрДлина(СтрРазделить(Строка(Стр.ТелефонРабочий)," ")[0]) = 3 Тогда
					Если ТолькоЦифрыВСтроке(Стр.ТелефонРабочий) и СтрДлина(Стр.ТелефонРабочий) = 10 Тогда
						
					Длина = СтрДлина(Стр.ТелефонРабочий);
					РабочийНомер = Сред(Стр.ТелефонРабочий,0,Длина);
					РабочийНомерСТремяЦифрами  = Лев(РабочийНомер,3) + " "  + Сред(РабочийНомер,4);
					Стр.ТелефонРабочий = РабочийНомерСТремяЦифрами;
				Иначе
					Если СтрДлина(Стр.ТелефонРабочий) = 11 Тогда
						Сообщить("В строке " + Стр.НомерСтроки + "указан номер в верном формате"); 
					КонецЕсли;
					Если СтрДлина(Стр.ТелефонРабочий) <> 11 Тогда
						Сообщить("В строке " + Стр.НомерСтроки + " неверно указан номер рабочего телефона. Пожалуйста, укажите номер телефона в формате 495 1231212.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КонецЦикла; 
	
КонецПроцедуры 

// Плюснин ЕС 24.06.2024
&НаСервере
Функция ОткорректироватьНомераТелефонов(НомерТелефона)
	НомерТелефона = СтрЗаменить(Строка(НомерТелефона)," ","");
	Если ТолькоЦифрыВСтроке(Строка(НомерТелефона)) И СтрДлина(Строка(НомерТелефона)) = 11   Тогда
		НомерТелефона = Прав(Строка(НомерТелефона),10);
		НомерТелефона = Лев(НомерТелефона,3) + " " + Сред(НомерТелефона,4);
	ИначеЕсли СтрДлина(Строка(НомерТелефона)) = 10 и СтрНачинаетсяС(Строка(НомерТелефона),"9") Тогда
		НомерТелефона = Лев(НомерТелефона,3) + " " + Сред(НомерТелефона,4);
	Иначе
		НомерТелефона = СтрЗаменить(Строка(НомерТелефона),"+","");
		НомерТелефона = СтрЗаменить(НомерТелефона,"-","");
		Если СтрДлина(Строка(НомерТелефона)) = 11 Тогда 
			НомерТелефона = Прав(Строка(НомерТелефона),10);
			НомерТелефона = Лев(НомерТелефона,3) + " " + Сред(НомерТелефона,4);	
		КонецЕсли;		
	КонецЕсли;                                   
	НомерТелефона = НомерТелефона;
	Возврат НомерТелефона;
	
КонецФункции
#КонецОбласти
